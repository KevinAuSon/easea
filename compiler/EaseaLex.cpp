#line 2 "compiler/EaseaLex.cpp"

#line 4 "compiler/EaseaLex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 416
#define YY_END_OF_BUFFER 417
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1398] =
    {   0,
      222,  222,  224,  224,  250,  250,   28,   28,  417,    2,
      415,  416,  408,  416,    1,    2,  415,  416,  415,  416,
      232,  415,  416,  234,  408,  416,    1,  415,  416,  415,
      416,  415,  416,  248,  415,  416,  249,  415,  416,  249,
      415,  416,  249,  415,  416,  415,  416,  249,  415,  416,
      249,  415,  416,  249,  415,  416,  249,  415,  416,  249,
      415,  416,  249,  415,  416,  249,  415,  416,  232,  415,
      416,  233,  234,  408,  416,  415,  416,  147,  415,  416,
      147,  408,  416,    1,  147,  415,  416,  147,  415,  416,
      147,  415,  416,  147,  415,  416,  147,  415,  416,  223,

      415,  416,  223,  408,  416,    1,  223,  415,  416,  222,
      223,  415,  416,  227,  415,  416,  224,  227,  415,  416,
      227,  408,  416,    1,  227,  415,  416,  227,  415,  416,
      227,  415,  416,  226,  227,  415,  416,  152,  415,  416,
      153,  408,  416,    1,  152,  415,  416,  152,  415,  416,
      155,  415,  416,  156,  408,  416,    1,  155,  415,  416,
      155,  415,  416,  161,  415,  416,  162,  408,  416,    1,
      161,  415,  416,  161,  415,  416,  180,  415,  416,  180,
      408,  416,    1,  180,  415,  416,  180,  415,  416,  149,
      415,  416,  150,  408,  416,    1,  149,  415,  416,  149,

      415,  416,   23,  415,  416,   24,  408,  416,    1,   23,
      415,  416,   23,  415,  416,  221,  415,  416,  221,  415,
      416,  221,  408,  416,    1,  221,  415,  416,  181,  221,
      415,  416,  221,  415,  416,  221,  415,  416,  221,  415,
      416,  221,  415,  416,  221,  415,  416,  221,  415,  416,
      221,  415,  416,  221,  415,  416,  221,  415,  416,  217,
      221,  415,  416,  221,  415,  416,  221,  415,  416,  221,
      415,  416,  221,  415,  416,  221,  415,  416,  221,  415,
      416,  221,  415,  416,  221,  415,  416,  257,  415,  416,
      257,  408,  416,    1,  257,  415,  416,  257,  415,  416,

      259,  415,  416,  260,  408,  416,    1,  259,  415,  416,
      259,  415,  416,  262,  415,  416,  263,  408,  416,    1,
      262,  415,  416,  262,  415,  416,  265,  415,  416,  266,
      408,  416,    1,  265,  415,  416,  265,  415,  416,  268,
      415,  416,  269,  408,  416,    1,  268,  415,  416,  268,
      415,  416,  164,  415,  416,  165,  408,  416,    1,  164,
      415,  416,  164,  415,  416,  252,  415,  416,  252,  408,
      416,    1,  252,  415,  416,  252,  415,  416,  365,  415,
      416,  365,  408,  416,    1,  365,  415,  416,  332,  365,
      415,  416,  365,  415,  416,  365,  415,  416,  363,  365,

      415,  416,  365,  415,  416,  365,  415,  416,  365,  415,
      416,  365,  415,  416,  365,  415,  416,  365,  415,  416,
      365,  415,  416,  365,  415,  416,  365,  415,  416,  365,
      415,  416,  365,  415,  416,  365,  415,  416,  365,  415,
      416,  365,  415,  416,  365,  415,  416,  321,  415,  416,
      321,  408,  416,    1,  321,  415,  416,  275,  321,  415,
      416,  321,  415,  416,  321,  415,  416,  318,  321,  415,
      416,  321,  415,  416,  321,  415,  416,  321,  415,  416,
      321,  415,  416,  321,  415,  416,  321,  415,  416,  321,
      415,  416,  278,  321,  415,  416,  321,  415,  416,  321,

      415,  416,  321,  415,  416,  321,  415,  416,  321,  415,
      416,  321,  415,  416,  321,  415,  416,  321,  415,  416,
      321,  415,  416,  321,  415,  416,  367,  415,  416,  367,
      408,  416,    1,  367,  415,  416,  367,  415,  416,  372,
      415,  416,  374,  408,  416,  415,  416,  415,  416,  405,
      415,  416,  406,  415,  416,  406,  415,  416,  406,  415,
      416,  406,  415,  416,  406,  415,  416,  406,  415,  416,
      406,  415,  416,  406,  415,  416,  406,  415,  416,  406,
      415,  416,  406,  415,  416,  406,  415,  416,  406,  415,
      416,  406,  415,  416,  415,  416,  406,  415,  416,  406,

      415,  416,  406,  415,  416,  372,  415,  416,  373,  374,
      408,  416,  415,  416,  158,  415,  416,  159,  408,  416,
        1,  158,  415,  416,  158,  415,  416,  176,  415,  416,
      175,  408,  416,    1,  176,  415,  416,  176,  415,  416,
      250,  415,  416,  250,  408,  416,    1,  250,  415,  416,
      255,  415,  416,  255,  408,  416,    1,  255,  415,  416,
      255,  415,  416,  178,  415,  416,  178,  408,  416,    1,
      178,  415,  416,  178,  415,  416,  173,  415,  416,  172,
      408,  416,    1,  173,  415,  416,  173,  415,  416,  167,
      415,  416,  167,  408,  416,    1,  167,  415,  416,  167,

      415,  416,  170,  415,  416,  171,  408,  416,    1,  170,
      415,  416,  170,  415,  416,   29,  415,  416,   29,  408,
      416,  415,  416,   31,  415,  416,  415,  416,   28,  415,
      416,   30,  415,  416,   25,  415,  416,  415,  416,   32,
      415,  416,   38,  415,  416,   37,  408,  416,    1,   38,
      415,  416,   38,  415,  416,   38,  415,  416,   33,   38,
      415,  416,   34,   38,  415,  416,   48,  415,  416,   56,
      408,  416,    1,   48,  415,  416,   48,  415,  416,   48,
      415,  416,   48,  415,  416,   48,  415,  416,  247,  228,
      247,  248,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  233,  228,  222,  224,  226,  225,  225,
      182,  322,  333,  328,  329,  322,  270,  276,  270,  404,
      368,  404,  405,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  373,  368,
      250,   27,   28,   25,  228,  247,  247,  249,  249,  249,
      249,  249,  249,  249,  239,  249,  249,  249,  228,  229,
      225,  225,  322,  322,  323,  270,  320,  270,  271,  368,
      404,  404,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  368,  369,   26,   36,
      247,  230,  247,  249,  249,  249,  244,  235,  249,  242,
      249,  249,  249,  249,  249,  230,  225,  225,  220,  206,
      325,  364,  353,  325,  272,  317,  310,  272,  404,  370,
      404,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  407,  370,  254,   22,   47,  249,  249,
      249,  249,  249,  241,  249,  249,  249,  231,    4,    5,
       76,  219,  205,  324,  352,  324,  326,  316,  309,  273,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  371,
       52,  237,  249,  249,  249,  249,  240,  249,  249,  238,
      249,   68,   74,   79,  207,  210,  184,  209,  354,  331,
      336,  357,  358,  356,  362,  326,  311,  274,  281,  313,
      406,  406,  378,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,   49,   57,  249,  249,
      236,  249,  243,  249,    8,  121,  212,  196,  347,  359,
      360,  300,  406,  406,  378,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,   35,   55,  249,  246,    9,
       75,  126,    6,  112,  130,  114,  113,    7,  212,16576,

    16577,16574,16575,16571,  185,16570,  194,  208,  340,  337,
      338,  355,  295,  297,  291,  293,  285,  282,  283,  312,
      406,  406,  396,  406,  406,  401,  406,  406,  406,  406,
      406,  406,  406,   53,   54,  249,  125,  123,  110,  109,
      100,  203,  204,  201,  202,  198,  197,16573,  349,  348,
      344,  330,  307,  308,  305,  306,  302,  301,  289,  406,
      406,  406,  401,  406,  406,  406,  406,  406,   50,   51,
      249,   69,  127,  115, 8384, 8385, 8382, 8383, 8379, 8378,
      200,16572,  341,  339,  351,  342,  296,  298,  292,  294,
      286,  284,  304,  287,  406,  406,  245,  249,  128,  111,

      134,  102,  122,  124,  154,  215, 8381,  199,  218,  327,
      345,  350,  290,  303,  315,  399,  385,  376,   63,   73,
      119,   64,  133,  120,  106,  104,  132, 8380,  216,  343,
      288,  277,  399,  412,  385,  384,  403,  376,  146,  214,
      384,  403,   67,  116,   70,   66,  108,  118,  117,  179,
      213,   72,   77,   85,    3,  211,  361,  314,  397,  383,
       71,  138,  139,  397,  411,  383,  377,  389,  390,  157,
      177,   65,   84,   86,   87,   12,   10,  105,  103,  144,
    16567,  334,  279,  377,  389,  390,   20,  135,  137,  101,
      195,  346,  299,  388,  380,  392,   90,   82,  107,  142,

      151, 8375,  335,  280,  388,  380,  379,  392,   91,   62,
       95,  129,  400,  379,  394,   61,   19,   18,   16,   97,
      409,  410,  381,  414,  400,  413,  394,   60,   88,   89,
       81,   17,   80,   58,  131,  143,  261,  251,  382,  395,
      402,  381,  375,   40,   42,   39,   78,   96,  319,  382,
      395,  402,  375,  253,  136,   92,  140,  145,  258,  264,
      267,  366,  386,  387,  391,   11,  141,  386,  387,  391,
      148,  256,  393,   41,   43,  393,   98,   83,   21,  169,
       93,   44,   94,   59,   13,   99,  163,   15,  160,   45,
      398,  398,   46,  166,  174,   14,  168

    } ;

static yyconst flex_int16_t yy_accept[3383] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,   10,
       13,   15,   19,   21,   24,   27,   30,   32,   34,   37,
       40,   43,   46,   48,   51,   54,   57,   60,   63,   66,
       69,   72,   76,   78,   81,   84,   88,   91,   94,   97,

      100,  103,  106,  110,  114,  117,  121,  124,  128,  131,
      134,  138,  141,  144,  148,  151,  154,  157,  161,  164,
      167,  170,  174,  177,  180,  183,  187,  190,  193,  196,
      200,  203,  206,  209,  213,  216,  219,  222,  225,  229,
      233,  236,  239,  242,  245,  248,  251,  254,  257,  260,
      264,  267,  270,  273,  276,  279,  282,  285,  288,  291,
      294,  298,  301,  304,  307,  311,  314,  317,  320,  324,
      327,  330,  333,  337,  340,  343,  346,  350,  353,  356,
      359,  363,  366,  369,  372,  376,  379,  382,  385,  389,
      393,  396,  399,  403,  406,  409,  412,  415,  418,  421,

      424,  427,  430,  433,  436,  439,  442,  445,  448,  451,
      454,  458,  462,  465,  468,  472,  475,  478,  481,  484,
      487,  490,  493,  497,  500,  503,  506,  509,  512,  515,
      518,  521,  524,  527,  530,  533,  537,  540,  543,  546,
      548,  550,  553,  556,  559,  562,  565,  568,  571,  574,
      577,  580,  583,  586,  589,  592,  595,  597,  600,  603,
      606,  609,  613,  615,  618,  621,  625,  628,  631,  634,
      638,  641,  644,  647,  651,  654,  657,  661,  664,  667,
      670,  674,  677,  680,  683,  687,  690,  693,  696,  700,
      703,  706,  709,  713,  716,  719,  722,  724,  727,  729,

      732,  735,  738,  740,  743,  746,  749,  753,  756,  759,
      763,  767,  770,  773,  777,  780,  783,  786,  789,  790,
      790,  791,  792,  793,  793,  794,  795,  796,  797,  797,
      798,  799,  800,  801,  802,  803,  804,  804,  805,  805,
      805,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  807,  808,  808,  809,  810,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  813,  813,  813,
      813,  813,  813,  813,  814,  814,  814,  814,  815,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  817,  817,  817,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  820,  820,
      821,  821,  822,  823,  824,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  842,  843,  844,  845,  846,  847,  848,
      848,  849,  849,  850,  850,  850,  851,  851,  851,  852,

      852,  852,  852,  852,  852,  852,  853,  853,  853,  854,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  856,  857,  857,  857,  858,  859,  860,  861,
      861,  862,  863,  864,  865,  867,  868,  869,  869,  869,
      869,  869,  870,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  875,  876,  876,  876,  876,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  879,  880,  880,  880,  880,  880,
      881,  882,  882,  882,  883,  884,  885,  886,  887,  888,
      889,  889,  890,  891,  892,  893,  893,  894,  895,  896,

      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  907,  907,  907,  907,  907,  908,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  910,  910,  911,
      911,  911,  911,  911,  911,  911,  911,  912,  913,  913,
      914,  915,  916,  917,  918,  920,  922,  923,  924,  925,
      926,  926,  926,  926,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  928,  928,

      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  932,  932,  932,
      932,  932,  932,  932,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  934,  934,  934,  934,  935,  935,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  938,  938,
      938,  938,  939,  939,  939,  940,  941,  941,  942,  943,
      944,  945,  946,  947,  948,  948,  948,  949,  949,  950,

      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  965,  965,  965,  966,
      966,  966,  966,  967,  967,  967,  967,  967,  968,  968,
      968,  968,  968,  969,  969,  970,  971,  972,  973,  974,
      976,  977,  978,  978,  978,  979,  980,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,

      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  983,  983,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  989,  989,  989,  990,  990,  990,
      990,  990,  990,  990,  991,  991,  992,  993,  994,  995,
      996,  997,  998,  998,  998,  998,  999,  999, 1000, 1000,
     1001, 1002, 1002, 1003, 1004, 1005, 1006, 1006, 1007, 1008,
     1008, 1009, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1012, 1012, 1012, 1012, 1014,
     1015, 1016, 1017, 1019, 1020, 1022, 1022, 1022, 1022, 1022,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1026, 1026,
     1026, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1030, 1031, 1031, 1032, 1032, 1032, 1032,

     1033, 1034, 1034, 1034, 1034, 1034, 1035, 1036, 1036, 1037,
     1038, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1041, 1041, 1041, 1042, 1043, 1043, 1044,
     1045, 1046, 1046, 1047, 1047, 1047, 1047, 1048, 1048, 1049,
     1049, 1050, 1051, 1051, 1052, 1052, 1053, 1054, 1054, 1055,
     1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1058, 1058, 1059, 1060, 1061, 1063,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074, 1075, 1076,
     1077, 1078, 1078, 1079, 1079, 1079, 1079, 1080, 1080, 1081,
     1081, 1081, 1081, 1082, 1082, 1083, 1083, 1083, 1083, 1083,

     1084, 1085, 1085, 1085, 1085, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087,
     1088, 1089, 1090, 1091, 1091, 1091, 1091, 1092, 1092, 1092,
     1092, 1092, 1093, 1094, 1095, 1095, 1095, 1095, 1095, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1097, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1107, 1107, 1107, 1108,
     1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109, 1109,

     1109, 1109, 1110, 1111, 1112, 1112, 1112, 1112, 1112, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1121, 1121, 1122, 1123, 1123, 1124,
     1125, 1125, 1126, 1126, 1127, 1127, 1127, 1128, 1128, 1129,
     1129, 1129, 1129, 1130, 1130, 1131, 1131, 1131, 1131, 1131,
     1131, 1132, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1135, 1135, 1136, 1136, 1136,
     1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1138, 1139,

     1139, 1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1143, 1143, 1143, 1144, 1144, 1144,
     1145, 1145, 1145, 1146, 1146, 1146, 1147, 1147, 1147, 1148,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1150, 1150, 1151, 1152, 1152,
     1152, 1152, 1153, 1153, 1154, 1154, 1155, 1155, 1156, 1156,
     1157, 1157, 1158, 1158, 1159, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1161, 1162, 1163, 1163, 1163, 1164, 1164, 1164,

     1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170,
     1171, 1171, 1172, 1172, 1172, 1172, 1172, 1172, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1176, 1177, 1178, 1179, 1180, 1181, 1181, 1181, 1182,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1184, 1185, 1185, 1186, 1187, 1187, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1193, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1204, 1205, 1205, 1205, 1206, 1206, 1206, 1206,
     1206, 1206, 1207, 1208, 1208, 1208, 1209, 1209, 1209, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1211, 1212, 1212,
     1213, 1213, 1213, 1214, 1214, 1215, 1215, 1215, 1215, 1216,
     1216, 1216, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1220, 1220, 1221, 1222, 1222, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1224, 1225, 1225, 1225,
     1225, 1226, 1226, 1227, 1227, 1227, 1227, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1229, 1229, 1229, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1232, 1232,
     1232, 1232, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235, 1235,
     1235, 1236, 1236, 1236, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1238, 1238, 1238, 1238, 1238, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,

     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1244, 1244, 1244, 1245, 1245, 1245, 1245,
     1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247,

     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1249, 1250, 1250, 1250,
     1250, 1250, 1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256, 1256,
     1256, 1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1258, 1258, 1258, 1259, 1259, 1259, 1259,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263,
     1263, 1263, 1263, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1265, 1265, 1265, 1265, 1265, 1265, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1267, 1267, 1268, 1268, 1268,
     1268, 1268, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270,
     1270, 1271, 1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278, 1279,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281,
     1281, 1281, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1283, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285, 1285,
     1286, 1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1288, 1288, 1288, 1289, 1289, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293,
     1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1296, 1296, 1296, 1296, 1296, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1302,
     1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1304, 1305, 1305, 1305, 1305, 1305, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1307, 1307, 1308, 1308, 1308, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1311, 1311, 1311, 1311, 1311, 1312, 1312,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1314, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318, 1319, 1319,
     1320, 1320, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1322, 1322, 1323, 1323, 1324, 1325, 1325, 1325, 1325, 1325,
     1326, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,

     1328, 1328, 1329, 1330, 1331, 1331, 1331, 1332, 1332, 1332,
     1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1334, 1335,
     1335, 1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1338, 1338, 1338, 1338, 1338, 1339, 1339, 1339,
     1339, 1340, 1340, 1341, 1341, 1341, 1341, 1342, 1343, 1343,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
     1346, 1347, 1347, 1348, 1348, 1348, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,
     1351, 1352, 1352, 1352, 1353, 1354, 1354, 1354, 1354, 1354,

     1354, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
     1356, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1358, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360,
     1361, 1361, 1362, 1362, 1362, 1363, 1363, 1364, 1364, 1365,
     1365, 1365, 1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367, 1368, 1368, 1368, 1368, 1368, 1368,
     1369, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1373, 1373,

     1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1379,
     1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380,
     1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1383, 1383, 1384, 1385, 1385, 1386, 1386, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387,
     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389,
     1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
     1391, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,
     1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1397, 1397,
     1398, 1398
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    1,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       17,   17,   17,   17,   17,   17,   17,   20,   21,    1,
       22,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   32,   62,   63,   64,   65,
       66,   67,   32,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,    1,   78,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    2,    3,    1,    2,    4,    1,    4,    4,    4,
        4,    4,    1,    4,    1,    4,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    4,    1,
        6,    7,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    8
    } ;

static yyconst flex_int16_t yy_base[3468] =
    {   0,
        0,    2,    6,   83,   86,   88,  138,  216,  114,  159,
      120,  122,  131,  152,  162,  164,  189,  191,  193,  195,
      197,  200,  294,    0,  202,  204,  206,  230,  370,  372,
      374,  376,  378,  380,  382,  384,  386,  388,  438,   91,
      516,   92,  592,  594,  644,   98,  720,  722,  724,  726,
      101,  179,  728,  730,  732,  734,  736,  738,  740,  742,
      744,  746,  796,  874,  748,  750,  866,  868, 5971, 5972,
     5972, 5972, 5972, 5972, 5972, 5972,  167,  164,  378,    0,
       49, 5913, 5912, 5902, 5907, 5900, 5902, 5899, 5897, 5892,
      246, 5972,  224, 5972, 5972, 5972, 5934, 5937, 5934,  930,

     5972, 5972, 5972,    0, 5972,   93, 5972, 5972,  253,  241,
      584, 5972, 5972, 5972, 5915, 5972, 5972, 5972, 5914, 5972,
     5972, 5972, 5932, 5972, 5972, 5972, 5912, 5972, 5972, 5972,
     5925, 5972, 5972, 5972, 5899, 5898,  766, 5897, 5896, 5895,
       56,  125,  762,  819,  259,  396,  398,  602,  777, 5894,
      846,  397,  758,  847,  851,  753,  853,  764, 5972, 5972,
     5972, 5918, 5972, 5972, 5972, 5917, 5972, 5972, 5972, 5916,
     5972, 5972, 5972, 5915, 5972, 5972, 5972, 5914, 5972, 5972,
     5972, 5919, 5972, 5972, 5972, 5912, 5886, 5885, 5884, 5883,
      589, 5972, 5882, 5878, 5891, 5909, 5895, 5904, 5893,  779,

      182,  804,  190, 5876,  216,  103,  906,  848, 5874, 5873,
     5872, 5871,  850, 5972, 5870, 5866,  384, 5898, 5884, 5893,
     5882,  781, 5864, 5893, 5845,   49, 5862, 5858, 5875, 5859,
      145,  910,  919, 5972, 5972, 5972, 5885, 5972, 5972,  257,
      266,  922,    0, 5857, 5841,  215, 5847, 5850, 5868,  358,
      352, 5847,  218, 5847,  553, 5842, 5845,  351, 5847, 5839,
      610, 5972,  274, 5972, 5972, 5972, 5856, 5972, 5972, 5972,
     5875,    0,    0,    0, 5972, 5972, 5972,  351, 5972, 5972,
     5972, 5873, 5972, 5972, 5972, 5873, 5972, 5972, 5972, 5872,
     5972, 5972, 5972, 5863, 5972, 5972, 5887, 5972, 5876,  399,

     5972,    0, 5834, 5972, 5972, 5972, 5972, 5850, 5853, 5972,
     5972, 5972, 5972, 5972, 5852, 5844,  234, 5829,  929, 5874,
        0,  963,  970,  613,    0, 5848, 5818, 5812, 5816, 5814,
     5826, 5807, 5811, 5806, 5814, 5821,  617, 5972,  398, 5862,
     5869, 5830, 5829, 5817,  580, 5845,  722,  880, 5842, 5839,
      599,  586, 5841,  251,  803, 5837,  951,  882, 5823, 5825,
        0,  408,  914,  981,  984,  987,  998, 5792, 5791, 5802,
     5789, 5800, 5799, 5789,  839, 5797, 5796,  858,  990, 1016,
     1017, 1021, 1023, 1027, 1028,  940, 5972, 5787, 1029, 1034,
     1035, 1041, 1040, 1045, 1047, 1046, 1052, 5794, 5793, 5792,

     5791, 5790, 5788, 5788, 5778, 5832,    0, 5777, 5799, 5788,
     5801, 5800, 5793, 5972, 5771, 5774, 5766, 5972, 5972, 5770,
     5775, 5770, 5762, 5764, 5758, 5758, 5755, 1054,  746, 5814,
     5821, 5757, 5811,    0, 5756, 5774, 5783, 5776, 5765, 5778,
     5777, 5770, 5972, 5748, 5755, 5743, 5795, 5743, 5745, 5750,
     5740, 5740, 5735, 5732, 1056,  927, 5791, 5798, 5743, 1050,
     5788,    0, 1061, 1075, 1102,    0, 5735, 5731, 5735, 5742,
     5729, 5728, 1071, 5718,  372, 5721, 1079, 5726, 5731, 5722,
     5720, 5725,  572, 5713, 1032, 5708, 5730, 5714, 5717, 5715,
     5714, 1122, 5972, 1085, 5767, 5774, 5707, 5705,    0, 5705,

     5708, 5706, 5701, 5700, 5704, 5972, 5762, 5764, 1091,    0,
     5701, 5740, 5726, 5725, 5720, 5704, 5695, 5689, 1116, 5747,
     5741,    0, 1122, 1133, 1125, 1136, 5690, 5689, 5694, 5697,
     5689, 5683, 5696, 5696,    0, 5683, 5677, 5735, 5742, 5733,
     5727, 5739, 5972, 5718, 5713, 5712, 5715, 5696, 5702, 5698,
     1048, 5708, 5702, 5680, 5688, 5678, 5677, 5692, 5686, 5674,
     5673,  933, 5682, 5671, 5694, 5694, 5683, 5681,  890, 1133,
     5674,  910, 5694, 5676, 5680, 5679, 5679, 5681, 5667, 1146,
     1153, 1164, 1156, 1167, 5653, 5652, 5650, 5650, 5641, 5646,
     5638, 5638, 5644, 1124, 1164, 1186, 1187, 1191, 1192, 1196,

     1197, 5645, 1198, 1202, 1203, 1207, 1209, 1211, 1213, 1217,
     1221, 1226, 5635, 5634, 5633, 5632, 5631, 5625, 5629, 5627,
     5681, 5675,    0, 5624, 5637, 5659, 5635, 5652, 5658, 5628,
     5620, 5614, 5612, 5615, 5609, 5621, 5621, 5605, 5606, 5617,
     5662, 5669, 5660, 5654, 5666, 5972, 5602, 5656, 5650,    0,
     5599, 5633, 5632, 5610, 5632, 5608, 5625, 5631, 5601, 5587,
     5587, 5972, 5591, 5584, 5587, 5584, 5594, 5580, 5591, 5636,
     5643, 5634, 5628, 5640, 5972, 5584, 1215, 5630, 5624,    0,
     1224, 1235, 1218, 1239, 5583, 5569, 5567, 5573, 5582, 5577,
     1243, 1257, 5565, 1261, 5579, 1282, 5577, 5561, 5559, 5557,

     5562, 5555, 5559, 5567, 5566, 5550, 5564, 5552, 5547, 5561,
     5561, 5605, 5612, 5603, 5597, 5609, 5972, 5554, 1286, 5553,
     5553, 5537, 1290, 1294, 5538, 5603, 5972, 5549, 5972, 5561,
     5560, 5564, 5536, 5544, 5528, 1252, 1285, 5972, 1288, 1291,
     5542, 5533, 5530, 5972, 5538,    0, 5531, 5523, 5522, 5530,
     5579, 5573, 5585, 1309, 5560, 5563, 5562, 5550, 5552, 5556,
     5545, 5542, 5532, 5555, 5535, 5550, 5552, 5536, 5532,  581,
      812, 5544,  153, 5531, 5539, 5517,  954, 5516, 5527, 5524,
     5513, 5528, 5539, 5536, 5509, 5523, 5532, 5531, 5513, 5516,
     5511, 5516, 5526, 5500, 5509, 5523, 1298, 1301, 1304, 1307,

     5481, 5480, 5481, 5478, 5479, 5483, 5480, 5476, 5480, 1272,
     1325, 1326, 1327, 1332, 1333, 1337, 1338, 5972, 1277, 1339,
     1345, 1349, 1350, 1351, 1361, 1362, 1366, 1367, 5474, 5473,
     5472, 5471, 5470, 5478, 5468, 5470, 5529, 5467, 5492, 5502,
     5487, 5475, 5486, 5972, 5469, 5467, 5466, 5452, 5484, 5455,
     5453, 5450, 5492, 5972, 5505, 5499, 5511, 1374, 5450, 5972,
     5448, 5476, 5475, 5471, 5481, 5465, 5452, 5463, 5972, 5426,
     5437, 5417, 5429, 5410, 5407, 5390, 5388, 5972, 5395, 5342,
     5251, 1378, 5169, 1367, 1375, 5972, 1378, 1381, 5117, 5089,
      231, 5075, 5069, 5061, 5066, 1385, 5073, 1399, 5053, 5062,

     4828, 4817, 1407, 4820, 4811, 4825, 4808, 1411, 4822, 4819,
     1415, 4805, 4813, 1420, 5972, 4862,  121,  154, 1424,  176,
     1428,  541, 5972,  569, 1432, 1436,  568, 5972,  719,  731,
      746,  727, 5972,  797,  810,  844,  854,  876,  906,    0,
      920,  952, 1440, 1445, 5972, 5972, 5972,  968,  966,  995,
      990, 1033, 1041, 1019, 1035, 1086, 1067, 1065, 1082, 1075,
     1082, 1096, 1096, 1110, 1115, 1120, 1134, 1138, 1127, 1129,
     1150, 1149, 1165, 1198, 1173, 1197, 1198, 1216, 5972, 1416,
     1219, 1213, 1242, 1259, 1252, 1246, 1266, 1261, 1307, 1318,
     1306, 1454, 1459, 1289, 1463, 1294, 1297,    0, 1306, 1308,

     1447, 1465, 1467, 1469, 1471, 1477, 1473, 1475, 1479, 1481,
     1485, 1487, 1486, 1492, 1498, 1508, 1510, 1311, 1318, 1339,
     1341, 1347, 1351, 1360,    0, 5972, 1379, 1400, 1415, 1427,
     1425, 1441, 1498, 1430, 5972, 1438, 1434, 1435, 1450, 1453,
     1453, 1518, 1523, 5972,    0, 1465, 1493, 1498, 1490, 1495,
     1501, 1495, 1482, 5972, 1470, 1483, 5972, 1476, 1475, 1475,
     1475, 1540, 1544, 5972, 1473, 1487, 1484, 1553, 1485, 1504,
     1557, 1510, 1501, 1500, 1498, 1497, 1503, 1508, 1572, 1502,
     1503, 1576, 1527, 1580, 1527, 1529, 1585, 1519, 1523, 1590,
     1594, 1522, 1598, 1602, 1606, 5972, 1610, 1545, 1614, 1546,

     1546, 1550, 1557, 1569, 1571, 1579, 1558, 1558,    0, 1599,
     1556, 1561,    0, 1559,    0, 1601, 1588, 1594, 1600, 5972,
     1592, 1608, 1594, 1583, 1595, 1597, 5972, 1596, 1591, 1617,
     1614, 1600, 1620, 1610, 1618, 1607, 1606, 1626, 1610, 1615,
     1611, 1623, 1613, 1616, 1627, 1607, 1633, 1631, 1635, 1641,
     1638, 1628, 1625, 1628, 1617, 1633, 1649, 1639, 1643, 5972,
     1623, 1674, 1678, 1621, 1682, 1625, 1681, 5972, 1631, 1632,
     1688, 1690, 1692, 1697, 1702, 1696, 1709, 1704, 1710, 1714,
     1715, 1716, 1720, 1721, 1727, 1634, 1639, 1643, 1651, 1653,
     1743, 1670, 5972, 1703, 1698, 1747, 1691, 1714, 1705, 5972,

     5972, 1677, 1696, 1683, 1736, 5972, 5972, 1695, 5972, 5972,
     5972, 1716, 1719, 1721, 1772, 1711, 1734, 1724, 1693, 1698,
     1715, 1719, 5972, 1715, 1715, 1714, 1708, 1779, 1784, 1719,
     1720, 1790, 1721, 1739, 1736, 1741, 1739, 1740, 1736, 1801,
     1805, 1744, 1739, 1741, 1810, 1814, 1818, 1748, 1761, 1822,
     1768, 1826, 1771, 1772, 1832, 1781, 1836, 1840, 1783, 1787,
     1793, 1830, 1833, 1804, 1797, 1850, 1793, 1837,    0,    0,
     1837, 1834, 1827, 1827, 1837, 1823, 1824, 1827, 1834, 5972,
     1840, 1845, 1831, 1822, 1823, 1850, 1850, 1837, 1853, 1851,
     1837, 1848, 5972, 1834, 1839, 1857, 1847, 1843, 1851, 1858,

     1858, 1867, 1856, 1845, 1861, 1862, 1849, 1877, 1875, 1883,
     1865, 1877, 1869, 1872, 1854, 1869, 1913, 1850, 1892, 1853,
     1895, 1920, 1921, 1922, 1926, 1927, 1928, 1932, 1936, 1940,
     1913, 1942, 1946, 1955, 1959, 1961, 1965, 1966, 1970, 1971,
     1911, 1915, 1921, 1925, 1927, 1975, 1934, 1911, 1955, 1980,
     1959, 1960, 1948, 1949, 1961, 1938, 1923, 5972, 5972, 1928,
     1969, 1970, 1971, 1972, 1976, 2001, 1979, 1978, 1967, 1968,
     1980, 1949, 1958, 1942, 1949, 1945, 1956, 1961, 2019, 2023,
     1954, 1970, 1972, 2028, 1964, 1978, 1971, 1968, 1974, 2003,
     1981, 2042, 1981, 1996, 1989, 1981, 2050, 2054, 1987, 2002,

     1994, 2059, 2063, 1995, 2002, 2005, 1999, 2011, 2019, 2072,
     2076, 2080, 2017, 2069, 5972, 2072, 2025, 2075, 2055, 5972,
     2031, 5972, 5972, 2043, 2069, 2066, 5972, 2061, 2073, 2066,
     2070, 5972, 5972, 5972, 2075, 2078, 2104, 2053, 5972, 2068,
     2071, 2072, 2079, 2087, 2081, 2086, 2082, 2098, 2095, 2082,
     2073, 2111, 2084, 2085, 2107, 2102, 2102, 2105, 2106, 2102,
     2109, 2108, 2118, 2122, 2111, 2125, 2118, 5972, 2114, 2100,
     2130, 2155, 2106, 2098, 2095, 2100, 2162, 2163, 2167, 2171,
     2175, 2179, 2183, 5972, 2189, 2185, 2193, 2194, 2198, 2202,
     2204, 2212, 2213, 2103, 2108, 2112, 2116, 2120, 2130, 2145,

     2160, 2217, 5972, 2221, 2196, 2188, 2170, 2165, 2214, 5972,
     2229, 2233, 2239, 2247, 2255, 5972, 2260, 2208, 2200, 2183,
     2179, 2184, 2187, 5972, 2248, 2185, 2188, 2269, 5972, 2196,
     2210, 2273, 2278, 2282, 2288, 2292, 2203, 2297, 2301, 2227,
     2209, 2228, 2229, 2222, 2230, 2248, 2247, 2254, 2239, 2238,
     2308, 2247, 2248, 2313, 2251, 2260, 2259, 2256, 2320, 2262,
     2266, 2325, 2329, 2333, 5972, 2278, 5972, 2322, 2282, 2274,
     2273, 2314, 2308, 2304, 2306, 2324, 2321, 2301, 2298, 2309,
     2326, 2331, 2328, 2329, 2318, 2329, 2326, 2333, 2338, 2331,
     2346, 2333, 2331, 2347, 2335, 2335, 2342, 5972, 5972, 2339,

     5972, 2353, 2341, 5972, 2361, 2359, 2353, 2353, 2355, 2347,
     2351, 2343, 2356, 2360, 2372, 2347, 2363, 2360, 2350, 2351,
     2352, 2374, 2369, 2344, 2385, 2337, 2341, 2358, 2355, 2360,
     2412, 2413, 2417, 2399, 2421, 2425, 2403, 2429, 2435, 2407,
     2443, 2451, 2411, 2457, 2461, 2414, 2465, 2473, 2419, 2486,
     2447, 2472, 2480, 2488, 2494, 2391, 2402, 2408, 2416, 2427,
     2427, 2439, 2428, 2498, 2476, 2504, 2480, 2508, 2480, 2440,
     2483, 5972, 2513, 2492, 2520, 2497, 2526, 2499, 2531, 2505,
     2535, 2510, 2541, 2517, 2547, 2517, 2482, 2486, 2525, 2489,
     2488, 2494, 2559, 2563, 2488, 2568, 2572, 2576, 2580, 2584,

     2588, 2592, 2498, 2507, 2596, 2600, 2507, 2515, 2514, 2530,
     2524, 2533, 2537, 2604, 2608, 2536, 2544, 2550, 2613, 2547,
     2564, 2619, 2563, 2568, 2569, 2563, 2627, 5972, 2580, 5972,
     2580, 2565, 2597, 2614, 2597, 2597, 2605, 5972, 2589, 2590,
     2616, 2620, 2607, 2606, 2611, 2615, 2611, 2604, 2624, 2611,
     2618, 2630, 2616, 2635, 2610, 2641, 2629, 2630, 2615, 2637,
     2636, 2628, 2629, 2645, 2629, 2643, 2623, 2624, 5972, 2625,
     2638, 2638, 2650, 2630, 2645, 2645, 2648, 2647, 2654, 2655,
     2653, 2656, 2652, 2670, 2659, 2660, 2653, 2657, 2658, 2673,
     2659, 2678, 2650, 2702, 2649, 2639, 2640, 2642, 2642, 2710,

     5972, 5972, 5972, 5972, 5972, 5972, 2714, 2718, 2691, 2722,
     2724, 2726, 2728, 2649, 2663, 2665, 2666, 2668, 2670, 2670,
     2672, 5972, 5972, 2743, 2720, 2747, 2690, 2694, 5972, 5972,
     5972, 5972, 5972, 5972, 2751, 2733, 2755, 2702, 2708, 2705,
     2698, 2693, 2765, 2769, 2773, 2711, 2784, 2711, 2717, 2716,
     2731, 2789, 2722, 2727, 2794, 2741, 2798, 2802, 2806, 2810,
     2733, 2737, 2753, 2761, 2763, 2760, 2816, 2750, 2756, 2822,
     2826, 2832, 2753, 2773, 2775, 2783, 2780, 2784, 2769, 2773,
        0, 2791, 2804, 2818, 2794, 5972, 2823, 2823, 5972, 2809,
     2815, 2801, 2814, 2828, 2818, 2832, 2829, 2834, 2831, 2827,

     2824, 2843, 2829, 2816, 2838, 2836, 2849, 2846, 2849, 2833,
     2849, 2854, 2848, 2840, 2858, 2848, 2845, 2850, 2848, 5972,
     2849, 2856, 2857, 2869, 2862, 2872, 2865, 2878, 2879, 2865,
     5972, 2862, 2853, 2883, 2884, 2856, 2886, 2879, 2880, 2876,
     2871, 5972, 5972, 2846, 2913, 5972, 2849, 2862, 2851, 2868,
     2853, 2921, 5972, 2922, 2926, 2908, 2930, 2932, 2934, 2869,
     2871, 2873, 2874, 2876, 2871, 2878, 5972, 5972, 2947, 2931,
     2886, 2890, 5972, 2954, 2936, 2892, 2893, 2897, 2914, 2899,
     2965, 2969, 2897, 2900, 2916, 2975, 2903, 2908, 2924, 2915,
     2916, 2929, 2921, 2986, 2921, 2935, 2926, 2933, 2997, 3002,

     3006, 3010, 2928, 2931, 2936, 2933, 2945, 2947, 3016, 2957,
     3020, 2962, 2971, 3026, 3030, 2965, 2962, 2973, 2975, 2977,
     3037, 2988, 2974, 3008, 3024, 3008, 3012, 3007, 3009, 3021,
     3009, 3011, 3014, 5972, 3016, 5972, 5972, 3034, 5972, 3022,
     3033, 3019, 3009, 3028, 3034, 3028, 3022, 3032, 3027, 3033,
     3041, 3032, 3033, 3034, 3050, 3043, 3048, 3035, 3044, 3028,
     3047, 3053, 3056, 3044, 3038, 5972, 5972, 3048, 3047, 3048,
     5972, 3049, 5972, 3054, 3049, 3065, 5972, 3064, 3061, 3056,
     3069, 3064, 3052, 3053, 3076, 3080, 3051, 3030, 3037, 3087,
     3038, 3089, 3090, 5972, 3109, 3110, 5972, 3093, 3096, 3097,

     3098, 3099, 3050, 3101, 5972, 3069, 3057, 5972, 3071, 3050,
     3060, 5972, 3125, 3129, 3063, 3080, 3133, 3082, 3137, 3074,
     3086, 3074, 3079, 3089, 3093, 5972, 3079, 3084, 3080, 3075,
     3150, 3093, 3154, 3158, 3090, 3094, 3109, 3105, 3106, 3111,
     3167, 3175, 3179, 3110, 3115, 3107, 3183, 3113, 3126, 3126,
     3129, 3126, 3190, 3131, 3176, 3159, 3163, 3147, 3162, 3173,
     3165, 3163, 3152, 3167, 3181, 3176, 3174, 3173, 3158, 3174,
     3185, 3190, 3187, 3184, 3193, 3186, 3195, 3192, 3195, 3178,
     3180, 3199, 3186, 3204, 3200, 3198, 3193, 3200, 3207, 3182,
     3184, 3211, 3201, 3198, 3213, 3206, 3219, 3220, 3218, 3214,

     3206, 3220, 3225, 3222, 3227, 3220, 3200, 3226, 3227, 5972,
     3215, 3187, 3188, 3257, 3241, 3197, 3244, 5972, 3263, 3264,
     3247, 3250, 3251, 3252, 3253, 3214, 3255, 3206, 3214, 3209,
     3257, 3217, 3280, 3230, 3223, 3285, 3221, 3289, 3230, 3293,
     3237, 3245, 3298, 3249, 3302, 3249, 3247, 3252, 3234, 3309,
     3252, 3246, 3314, 3252, 3250, 3253, 3320, 3324, 3261, 3261,
     3274, 3267, 3266, 3278, 3271, 3272, 3280, 3268, 3320, 3316,
     3315, 3318, 5972, 3316, 3305, 5972, 3318, 3314, 3309, 3327,
     5972, 3321, 3324, 3329, 3311, 3312, 3319, 3312, 3324, 3319,
     3320, 3315, 3322, 3313, 3324, 3315, 3316, 3332, 3347, 3337,

     3347, 3339, 3334, 3334, 3342, 3350, 3336, 3352, 3341, 3339,
     3359, 3342, 3346, 5972, 3345, 3346, 3337, 3353, 3368, 3356,
     3360, 3366, 3360, 3362, 3355, 5972, 5972, 3356, 3338, 3340,
     3399, 5972, 3342, 3337, 5972, 3404, 3405, 3347, 3356, 3348,
     3356, 3348, 3354, 3360, 3356, 3361, 3359, 3358, 3365, 3370,
     3371, 3423, 3360, 3368, 3360, 3365, 3430, 3434, 3381, 3439,
     3384, 3443, 3372, 3383, 3447, 3394, 3388, 3452, 3456, 3391,
     3394, 3410, 3393, 3409, 3401, 3404, 3401, 3418, 3470, 3415,
     3415, 3475, 3426, 3424, 3445, 3441, 3450, 3458, 5972, 3456,
     3451, 3458, 3456, 3455, 3465, 3463, 3467, 3473, 3455, 5972,

     3472, 3469, 3464, 3479, 3472, 3477, 3453, 3465, 3466, 3482,
     3474, 3479, 3469, 3485, 5972, 3486, 3491, 3489, 3491, 3481,
     3475, 3492, 3496, 3499, 3496, 3502, 3489, 3490, 3493, 3493,
     3488, 3494, 3505, 3502, 3482, 3508, 3498, 5972, 3471, 3477,
     3474, 3535, 3539, 3540, 3478, 3478, 3476, 3476, 3482, 3485,
     3490, 3486, 5972, 3487, 3495, 5972, 3487, 3502, 3555, 3559,
     3502, 3496, 3512, 3496, 3510, 3566, 3516, 3515, 3512, 3521,
     3523, 3516, 3576, 3580, 3586, 3521, 3590, 3518, 3595, 3519,
     3520, 3536, 3599, 3531, 3533, 3605, 3539, 3609, 3615, 3548,
     3619, 3546, 3551, 3600, 3600, 3605, 3589, 3596, 3589, 3594,

     5972, 3604, 3598, 3609, 3597, 3604, 3608, 3600, 3613, 3619,
     3603, 3602, 3608, 3602, 3622, 3603, 3604, 3623, 3624, 3611,
     3601, 3602, 3615, 3616, 3635, 3625, 3635, 3625, 3636, 3621,
     3640, 3630, 3624, 3627, 3628, 3632, 5972, 3633, 3636, 3644,
     3639, 3632, 5972, 3643, 3613, 3614, 3619, 3625, 3680, 3622,
     3618, 3616, 3634, 3618, 3630, 3621, 3626, 3627, 3627, 3641,
     3634, 3694, 3630, 3630, 3631, 3700, 3637, 5972, 3645, 3640,
     3645, 3640, 3640, 3642, 3710, 3714, 3718, 3722, 3647, 3662,
     3726, 3730, 3653, 3660, 3672, 3734, 3738, 3677, 3673, 3745,
     5972, 3683, 3682, 3750, 5972, 3692, 3703, 3696, 3705, 3732,

     3720, 3720, 5972, 3735, 3711, 3722, 3714, 3740, 3743, 5972,
     3726, 3736, 3749, 3748, 3740, 5972, 3744, 3740, 3754, 3755,
     3748, 3749, 3729, 3740, 3760, 3759, 3748, 5972, 3745, 5972,
     3765, 3747, 3765, 3748, 3761, 3762, 5972, 3757, 5972, 5972,
     3769, 3756, 3770, 3767, 3772, 3762, 5972, 3732, 3743, 3733,
     3747, 3803, 3737, 3740, 3757, 3748, 3751, 3811, 3748, 3815,
     3819, 3751, 3759, 3763, 3774, 3826, 3761, 3830, 3764, 3773,
     3768, 3778, 3783, 3781, 3790, 3842, 3846, 3793, 3795, 3851,
     3855, 3787, 3802, 3859, 3798, 3863, 3801, 3799, 3868, 3817,
     3808, 3813, 5972, 3836, 3837, 5972, 3838, 5972, 3851, 3841,

     3849, 3861, 3854, 3844, 3845, 3857, 3852, 3838, 3857, 3858,
     3851, 3852, 3869, 3869, 3855, 3858, 3877, 3863, 3875, 3863,
     3873, 3863, 3881, 3870, 3874, 3869, 3883, 5972, 3859, 3879,
     3862, 3881, 3914, 3918, 3857, 3853, 3922, 3926, 3904, 3869,
     3863, 3863, 3864, 3872, 3935, 3876, 3940, 3919, 3944, 3928,
     3891, 3896, 3893, 3885, 3954, 3958, 3962, 3903, 3908, 3908,
     3910, 3901, 3903, 3907, 3905, 3909, 3909, 3915, 3977,    0,
     3981, 3913, 3926, 3985, 3991, 3924, 3930, 3997, 3935, 3933,
     3932, 5972, 3977, 3981, 3980, 3985, 3978, 3968, 3970, 3981,
     3961, 3973, 3979, 3988, 3965, 3984, 3994, 3995, 3994, 3982,

     3992, 5972, 3990, 3983, 3985, 4004, 3991, 3998, 3988, 3995,
     4001, 5972, 3999, 4009, 4008, 3994, 5972, 4035, 5972, 4039,
     3990, 3990, 5972, 3993, 3981, 3982, 3996, 3989, 3988, 3999,
     5972, 5972, 3983, 3984, 3986, 3991, 4056, 4062, 3992, 4066,
     3992, 4070, 3991, 4074, 4005, 4013, 4021, 4027, 4079,    0,
     4083, 4087, 4092, 4099, 4103, 4107, 4017, 4029, 4111, 4119,
     4038, 4052, 4058, 4064, 4065, 4075, 4078, 4080, 4081, 4098,
     4098, 4074, 4084, 4104, 5972, 4099, 4100, 4106, 4092, 4098,
     4102, 4106, 4086, 4097, 4104, 4104, 4111, 5972, 4101, 5972,
     4101, 4093, 4094, 4109, 4085, 4086, 4082, 4088, 4080, 4085,

     4084, 4086, 4087, 4082, 4098, 4102, 4085, 4093, 4101, 4102,
     4162, 4091, 4166, 4170, 4174, 4101, 4108, 4110, 4110, 4182,
     4186, 4190, 4194, 4198, 4202, 4206, 4116, 4210, 4214, 4218,
     4113, 5972, 4167, 4154, 4179, 4193, 4184, 4185, 4190, 4204,
     4188, 4201, 4194, 4205, 4190, 4207, 5972, 5972, 4200, 5972,
     4199, 5972, 4199, 4211, 4207, 4198, 4204, 4204, 4195, 4191,
     4202, 4203, 4212, 4178, 4187, 4188, 4189, 4194, 4250, 4188,
     4199, 4200, 4259, 4194, 4191, 4263, 4269, 4200, 4200, 5972,
     4275, 5972, 4279, 4283, 5972, 4288, 4204, 4222, 4221, 4295,
     5972, 4299, 4235, 4225, 4304, 4239, 4232, 4239, 4272, 4283,

     4275, 4261, 5972, 5972, 4262, 4281, 5972, 4291, 4292, 4271,
     4279, 4280, 5972, 4269, 4286, 4296, 4287, 5972, 5972, 4289,
     5972, 4284, 4289, 4290, 5972, 4272, 4261, 4264, 4263, 4265,
     4333, 5972, 4272, 4273, 4340, 4344, 5972, 4329, 4279, 4349,
     4353, 4357, 4363, 4293, 4287, 4368, 4373, 4377, 4381, 4387,
     4391, 4293, 4299, 4314, 4395, 4321, 4316, 4320, 4319, 4349,
     4370, 4363, 4374, 4375, 4370, 4363, 4370, 4365, 4356, 4357,
     5972, 4382, 5972, 4383, 4376, 5972, 4375, 4380, 4382, 4415,
     4362, 4351, 4365, 4421, 4425, 4429, 4433, 5972, 4437, 4441,
     4445, 4449, 4453, 4457, 4461, 4465, 4359, 4469, 4363, 4473,

     5972, 4378, 4380, 4398, 4475, 5972, 4419, 4413, 4454, 4438,
     5972, 4430, 4458, 4453, 4456, 4457, 4444, 4457, 4449, 4458,
     5972, 5972, 4492, 4428, 4437, 4431, 4498, 5972, 4502, 5972,
     4507, 5972, 4431, 4511, 5972, 4518, 4527, 4534, 4538, 4436,
     4440, 4542, 4546, 4443, 4455, 4449, 4449, 4550, 4469, 4459,
     4477, 4490, 4518, 4511, 4520, 4532, 4516, 4522, 4522, 4523,
     4527, 4528, 5972, 5972, 4494, 4564, 4502, 4568, 4507, 4572,
     4576, 4519, 4580, 4584, 4523, 4588, 4539, 4533, 4540, 4528,
     4544, 4573, 4556, 4549, 4577, 4581, 4574, 4570, 4564, 4566,
     4586, 4581, 4548, 4612, 5972, 4551, 4616, 5972, 4565, 4554,

     4621, 4625, 4632, 4637, 4555, 4563, 4560, 4641, 4577, 4615,
     4608, 4620, 4605, 4614, 4612, 4598, 5972, 5972, 4609, 4610,
     4598, 4649, 4585, 4603, 4655, 4659, 4602, 4602, 4600, 4602,
     4665, 4615, 4612, 4637, 4647, 4650, 4643, 4641, 4640, 4653,
     4647, 4648, 4610, 4661, 4621, 4613, 4627, 4620, 4620, 4667,
     4617, 4634, 4622, 4657, 4650, 4659, 4657, 5972, 5972, 4668,
     4660, 4662, 4639, 5972, 4635, 4641, 4647, 4647, 4640, 5972,
     4643, 4647, 4706, 5972, 4678, 4676, 4676, 4685, 4678, 4679,
     4650, 4652, 4652, 4648, 4652, 4726, 4668, 4728, 4730, 5972,
     4686, 5972, 5972, 4687, 5972, 4684, 4669, 4734, 4673, 4685,

     4688, 4740, 4674, 4744, 4692, 4712, 4711, 5972, 4750, 4754,
     5972, 4689, 4703, 4691, 4691, 4697, 4762, 5972, 4738, 4770,
     5972, 4774, 4766, 4705, 4713, 4712, 4779, 5972, 4731, 4786,
     4790, 4798, 4719, 4732, 4802, 4756, 4806, 4726, 4740, 4740,
     4810, 5972, 4786, 4749, 4814, 4757, 4782, 4766, 4821, 4759,
     4793, 4758, 4758, 4766, 4809, 4772, 4769, 4833, 4812, 4773,
     4785, 4839, 5972, 4816, 4780, 4776, 4812, 4846, 4789, 4825,
     4852, 5972, 4792, 4824, 4796, 4820, 4862, 5972, 4866, 5972,
     5972, 4886, 4894, 4902, 4910, 4918, 4926, 4934, 4942, 4950,
     4958, 4966, 4974, 4982, 4990, 4998, 5006, 5014, 5022, 5030,

     5038, 5046, 5054, 5062, 5070, 5078, 5086, 5094, 5102, 5110,
     5114, 5117, 5123, 5126, 5133, 5137, 5140, 5147, 5155, 5163,
     5171, 5179, 5187, 5195, 5203, 5211, 5219, 5227, 5235, 5243,
     5251, 5259, 5267, 5275, 5283, 5291, 5299, 5307, 5315, 5323,
     5331, 5339, 5347, 5355, 5363, 5371, 5379, 5387, 5395, 5403,
     5407, 5414, 5422, 5430, 5438, 5446, 5450, 5457, 5465, 5473,
     5481, 5489, 4858, 5493, 4865, 5495, 5500
    } ;

static yyconst flex_int16_t yy_def[3468] =
    {   0,
     3382, 3382, 3381,    3, 3383, 3383, 3384, 3384, 3385, 3385,
     3386, 3386, 3387, 3387, 3388, 3388, 3389, 3389, 3390, 3390,
     3391, 3391, 3381,   23, 3392, 3392, 3393, 3393, 3394, 3394,
     3395, 3395, 3396, 3396, 3397, 3397, 3398, 3398, 3381,   39,
     3381,   41, 3399, 3399, 3381,   45, 3400, 3400, 3401, 3401,
     3402, 3402, 3403, 3403, 3404, 3404, 3405, 3405, 3406, 3406,
     3407, 3407, 3408, 3408, 3409, 3409, 3410, 3410, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3411,
     3411, 3411, 3381, 3411, 3411, 3411, 3411, 3411, 3411, 3411,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3412, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414,
     3414, 3414, 3414, 3414, 3414, 3414, 3381, 3414, 3414, 3414,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3415, 3415, 3415, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3416, 3381, 3381, 3381,

     3381, 3417, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3418,
     3419, 3381, 3381, 3381, 3411, 3411, 3411, 3411, 3381, 3411,
     3411, 3411, 3411, 3411, 3411, 3411, 3381, 3381, 3381, 3420,
     3421, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3412, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413, 3413, 3413,
     3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381, 3413, 3413,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3422, 3423, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3424,
     3425, 3381, 3426, 3427, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3428, 3429, 3381, 3381,
     3430, 3431, 3381, 3381, 3381, 3414, 3414, 3414, 3414, 3414,
     3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414,
     3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414, 3414, 3381,
     3414, 3381, 3381, 3381, 3432, 3433, 3381, 3381, 3415, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3416, 3434, 3381, 3417,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3418,
     3381, 3419, 3381, 3381, 3381, 3381, 3411, 3411, 3411, 3381,
     3411, 3411, 3411, 3411, 3411, 3411, 3411, 3435, 3436, 3437,
     3381, 3438, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3413, 3413, 3413, 3413, 3413, 3413, 3413,

     3413, 3381, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413,
     3413, 3413, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3422, 3381, 3423, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3439, 3440, 3441, 3381, 3442, 3381, 3381, 3443, 3381, 3444,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3445,
     3446, 3447, 3381, 3448, 3381, 3381, 3381, 3449, 3381, 3450,
     3381, 3381, 3381, 3381, 3451, 3451, 3451, 3451, 3451, 3451,
     3381, 3451, 3451, 3451, 3451, 3381, 3451, 3451, 3451, 3451,

     3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451,
     3381, 3452, 3453, 3454, 3381, 3455, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3456, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3457, 3457, 3457, 3381, 3457, 3457, 3457, 3457, 3457, 3457,
     3458, 3381, 3459, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3413, 3413,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3439, 3381, 3440, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3445, 3381,
     3446, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3451, 3451,
     3451, 3451, 3451, 3451, 3381, 3381, 3451, 3381, 3451, 3381,

     3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451, 3451,
     3451, 3451, 3451, 3451, 3381, 3452, 3381, 3453, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3457, 3457, 3457, 3457, 3457, 3457,
     3457, 3457, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3460, 3381, 3381,

     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3461, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3462, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3451, 3451, 3451, 3451, 3451,
     3451, 3451, 3381, 3381, 3381, 3451, 3381, 3451, 3381, 3451,
     3451, 3381, 3451, 3451, 3451, 3451, 3381, 3451, 3451, 3381,
     3451, 3451, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3457, 3457,
     3457, 3457, 3457, 3457, 3457, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413,
     3413, 3413, 3413, 3413, 3413, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3451, 3451, 3381, 3381, 3451,
     3451, 3381, 3451, 3381, 3381, 3381, 3451, 3381, 3451, 3381,
     3451, 3451, 3381, 3451, 3381, 3451, 3451, 3381, 3451, 3451,
     3381, 3381, 3451, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3463, 3381, 3381, 3381, 3457, 3457, 3457, 3457,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3413, 3413, 3413, 3413, 3413, 3413, 3381, 3381,
     3381, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413, 3413,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3451, 3451, 3381, 3451,
     3451, 3381, 3451, 3381, 3381, 3381, 3451, 3381, 3451, 3381,
     3381, 3381, 3451, 3381, 3451, 3381, 3381, 3381, 3381, 3451,

     3451, 3381, 3381, 3381, 3451, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3464, 3465, 3381, 3381,
     3457, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413, 3413, 3413,
     3413, 3413, 3413, 3381, 3413, 3413, 3413, 3413, 3413, 3413,
     3413, 3413, 3413, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3451, 3451, 3381, 3381, 3451,
     3381, 3451, 3381, 3381, 3381, 3381, 3451, 3381, 3451, 3381,
     3381, 3381, 3451, 3381, 3451, 3381, 3381, 3381, 3381, 3381,
     3451, 3451, 3381, 3381, 3381, 3451, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3464, 3381, 3381, 3466, 3381,
     3457, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3413, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413,
     3413, 3413, 3413, 3413, 3413, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3451, 3451, 3451, 3381, 3381, 3381, 3381, 3381, 3451,

     3381, 3381, 3381, 3381, 3381, 3451, 3381, 3451, 3381, 3381,
     3381, 3381, 3381, 3381, 3451, 3381, 3381, 3381, 3451, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3466, 3381,
     3381, 3457, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413,
     3413, 3413, 3413, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3451, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3451,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3457, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3413, 3381, 3381, 3381, 3381, 3413, 3413, 3413, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3413, 3413, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413, 3413,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3413, 3413, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3413, 3413, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3413, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3413, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3467,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3467,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
        0, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381
    } ;

static yyconst flex_int16_t yy_nxt[6051] =
    {   0,
     3381, 3381,   71,   72,   71,   72,   73,   74,   75,   76,
       74,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       77,   78,   79,   79,   79,   73,   73,   73,   80,   80,
       80,   80,   80,   80,   81,   80,   80,   80,   80,   80,
       82,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   73,   83,   73,   80,   80,   84,
       85,   86,   80,   87,   80,   80,   88,   80,   80,   80,
       80,   80,   89,   80,   90,   80,   80,   80,   80,   80,
       80,   80,   73,   73,   91,   92,  326,   91,   95,   96,
       95,   96,  207,  232,  362,  207,  232,  362,   93,  261,

      262,  447,  261,  273,  274,  327,  208,  233,   97,  374,
       97,  377,   98,  263,   98,  106,  107,  108,  106,   99,
      448,   99,  113,  114,  113,  114,  375,  109,  110,  375,
      111,  111,  111,  117,  118,  100, 1094,  100,  101,  101,
      102,  103,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  117,  118,  717,  101,  101,  101,
      106,  107,  108,  106,  121,  122,  121,  122,  426,  115,
      427,  115,  109,  110,  320,  111,  111,  111,   73,  321,
      119,  273,  274,  319,  319,  319,  101,  101,  101,  966,
      967,  125,  126,  125,  126,  129,  130,  129,  130,  133,

      134,  119,  133,  134,  160,  161,  160,  161,  164,  165,
      453,  123,  454,  123,  101,  101,  101,  101,  102,  103,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  164,  165,  340,  101,  101,  101,  127,  341,
      127,  416,  131, 1097,  131,  421,  135,  337,  338,  135,
      337,  162,  417,  162,  422,  166,   73,  365,  365,  365,
      375,  339,  516,  375,  101,  101,  101,  363,  424,  364,
      364,  364,  425,  460,  460,  460,  461,  469,  565,  166,
      480,  462,  383,  481,  495,  482,  470, 1068,  566,  496,
      517, 1069,  101,  101,  136,  137,  138,  139,  137,  140,

      141,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      142,  142,  142,  136,  136,  136,  142,  142,  142,  142,
      142,  142,  143,  142,  142,  142,  142,  142,  144,  145,
      142,  146,  142,  147,  142,  142,  142,  142,  142,  148,
      142,  142,  136,  149,  150,  151,  142,  152,  153,  142,
      142,  154,  142,  142,  155,  142,  142,  142,  142,  142,
      156,  157,  142,  158,  142,  142,  142,  142,  142,  142,
      136,  136,  168,  169,  168,  169,  172,  173,  172,  173,
      176,  177,  176,  177,  180,  181,  180,  181,  184,  185,
      184,  185,  322,  500,  323,  323,  323,  375,  375,  375,

      375,  375,  375,  474,  324,  477,  436,  501,  538,  362,
      474,  491,  362,  539,  437,  509,  509,  509,  475,  170,
      390,  170,  478,  174,  385,  174,  438,  178,  476,  178,
      693,  182,  384,  182,  324,  186,  694,  186,  187,  187,
      188,  189,  187,  190,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  191,  192,  192,  192,  187,  193,  187,
      192,  192,  192,  192,  192,  192,  194,  192,  192,  192,
      192,  192,  195,  196,  192,  197,  192,  198,  192,  192,
      192,  192,  192,  199,  192,  192,  187,  200,  187,  192,
      192,  192,  201,  192,  192,  202,  192,  192,  203,  192,

      192,  192,  192,  192,  204,  205,  192,  206,  192,  192,
      192,  192,  192,  192,  187,  187,  209,  209,  210,  211,
      209,  212,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  213,  214,  214,  214,  209,  215,  209,  214,  214,
      214,  214,  214,  214,  216,  214,  214,  214,  214,  214,
      217,  218,  214,  219,  214,  220,  214,  214,  214,  214,
      214,  221,  214,  214,  209,  222,  223,  214,  214,  224,
      225,  214,  226,  227,  214,  214,  228,  214,  214,  214,
      214,  214,  229,  230,  214,  231,  214,  214,  214,  214,
      214,  214,  209,  209,  235,  236,  235,  236,  366,  406,

      364,  364,  364,  375,  407,  484,  375,  961, 1099,  485,
      367,  492,  493,  486,  492,  547,  562,  962,  337,  338,
      548,  337,  487,  488,  525,  494,  525,  702,  563,  526,
      526,  526,  339, 1100,  559,  703,  560, 1103,  386,  561,
      367,  237,  405,  237,   73,  238,  239,   76,  238,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  240,  241,
      242,  242,  242,   73,   73,   73,  243,  244,  245,  243,
      246,  247,  248,  243,  249,  243,  243,  243,  250,  251,
      252,  253,  243,  254,  255,  256,  243,  243,  243,  243,
      243,  243,   73,  257,   73,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  258,  259,  243,
      243,  243,  260,  243,  243,  243,  243,  243,  243,  243,
       73,   73,  265,  266,  265,  266,  269,  270,  269,  270,
      276,  277,  276,  277,  280,  281,  280,  281,  284,  285,
      284,  285,  288,  289,  288,  289,  292,  293,  292,  293,
      306,  307,  306,  307,  375,  550,  641,  375,  551,  375,
     1104,  642,  375,  375,  552,  375,  375,  375,  375,  267,
      375,  267, 1105,  271,  308,  271,  308,  278,  309,  278,
      309,  282,  387,  282,  414,  286,  443,  286, 1106,  290,
      394,  290, 1107,  294,  376,  294,   73,  295,  296,   76,

      295,  297,   73,   73,   73,   73,   73,   73,  298,   73,
       73,  299,  300,  300,  300,   73,  301,   73,  379,  374,
      375,  418,  419,  375,  310,  311,  310,  311,  391,  396,
      374,  397,  405,  388,  432,  415,  567,  444,  963,  568,
      375,  380,  569,  375,   73,  303,   73,  375,  375,  381,
      375,  375,  375,  964,  375,  375,  420,  375,  430,  375,
      433,  382,  375,  431, 1108,  434, 1109,  376,  313,  314,
      313,  314,  304,   73,   73,  295,  296,   76,  295,  297,
       73,   73,   73,   73,   73,   73,  298,   73,   73,  299,
      300,  300,  300,   73,  301,   73,  315,  389,  315,  392,

     1110,  405,  316,  432,  316,  395,  393,  428,  575, 1111,
      428,  455,  576,  553,  455,  317,  554,  317,  555,  577,
      782,  429,   73,  303,   73,  456,  783,  556, 1112,  457,
      365,  365,  365,  318,  458,  318,  463,  670,  464,  464,
      464,  375,  671,  788,  375,  319,  319,  319,  465,  789,
      304,   73,  345,  346,  347,  519,  348,  349,  350,  405,
      351,  774, 1113,  432,  352,  353,  354,  355,  775,  356,
      357,  358,  432,  571,  359,  360, 1114,  572,  465,  523,
      523,  523,  971,  601,  322,  519,  323,  323,  323,  524,
      972,  375,  573,  574,  375,  366,  324,  364,  364,  364,

      365,  365,  365,  581,  581,  581, 1115,  367, 1116,  583,
      580,  583, 1117,  582,  584,  584,  584,  375,  375,  524,
      375,  375,  375, 1118,  375,  375,  324,  375,  375,  375,
      375,  375,  375,  375, 1119,  375,  375,  367,  375,  375,
      580,  375,  375,  582,  375,  375,  375,  375,  375,  375,
      375,  375,  596,  375,  594,  428,  375,  455,  428, 1120,
      455,  595,  597, 1121,  599,  600,  460,  460,  460,  429,
     1122,  456,  691,  691,  598,  691,  677,  681,  681,  681,
      696,  696,  762,  696,  603,  763, 1123,  682,  604,  463,
      605,  464,  464,  464,  705,  712,  608, 1126, 1127,  706,

      713,  465,  606,  607, 1128, 1129,  677,  509,  509,  509,
      609,  610, 1124,  683,  611,  683, 1125,  682,  684,  684,
      684, 1130,  612,  492,  493,  375,  492,  736,  375,  736,
     1131,  465,  737,  737,  737, 1132, 1133,  494,  523,  523,
      523,  526,  526,  526,  739, 1134,  739, 1135,  524,  740,
      740,  740,  526,  526,  526,  784, 1136,  797,  785,  797,
     1137, 1138,  798,  798,  798,  375, 1139,  786,  375,  581,
      581,  581,  584,  584,  584,  799, 1140,  799,  524,  582,
      800,  800,  800,  584,  584,  584, 1141,  375,  375,  810,
      375,  375,  375,  375,  811,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375, 1142,  375,  375,  375,  582,
      375,  375,  375,  375,  375,  375,  812,  375,  375,  814,
     1143,  375,  375,  817, 1144,  375,  884,  375,  884,  816,
      375,  885,  885,  885,  684,  684,  684, 1145,  813, 1146,
      681,  681,  681,  815,  691,  691,  887,  691,  887, 1147,
      682,  888,  888,  888,  819,  684,  684,  684,  896,  896,
     1151,  896,  898,  898, 1152,  898, 1153,  820,  737,  737,
      737,  821,  826,  375,  822,  824,  375,  823,  375,  825,
      682,  375,  828,  696,  696, 1154,  696,  921,  921,  827,
      921,  925,  925, 1155,  925,  926,  926, 1156,  926, 1157,

      895,  737,  737,  737,  740,  740,  740,  740,  740,  740,
      944,  945, 1158,  944,  798,  798,  798,  798,  798,  798,
      800,  800,  800,  800,  800,  800,  375,  375,  375,  375,
      375,  375, 1159,  375,  375, 1001,  375,  375,  375,  375,
      375,  375,  375,  375, 1160, 1161,  375,  900, 1009,  375,
      375,  375,  375,  375,  375,  375, 1164, 1166, 1005, 1002,
     1003, 1167,  375,  375, 1004,  375,  375,  375,  375, 1169,
      375,  375, 1170, 1006, 1186, 1043, 1044, 1008, 1043, 1063,
     1064, 1187, 1063,  885,  885,  885,  896,  896, 1007,  896,
     1017,  885,  885,  885,  888,  888,  888,  888,  888,  888,

      898,  898, 1188,  898, 1189, 1012, 1013, 1010, 1082, 1082,
     1190, 1082, 1087, 1087, 1011, 1087, 1090, 1090, 1191, 1090,
     1014, 1093, 1093, 1192, 1093, 1095, 1096, 1016, 1095,  921,
      921, 1015,  921,  925,  925, 1194,  925,  926,  926, 1195,
      926,  944,  945, 1148,  944, 1074,  944,  945,  375,  944,
     1196,  375, 1149, 1150, 1075, 1162, 1162, 1197, 1162, 1077,
     1163, 1163, 1198, 1163, 1165, 1165,  375, 1165,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375, 1098,  375,  375,  375,  375,  375,
      375,  375, 1199,  375, 1202, 1172,  375, 1173, 1203,  375,

     1204, 1101,  375, 1171, 1205, 1102, 1175, 1176, 1174,  375,
     1177,  375,  375, 1206,  375, 1200, 1201, 1207, 1208, 1043,
     1209, 1211, 1043, 1212, 1043, 1209, 1178, 1043, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1179,
     1224, 1063, 1064, 1225, 1063, 1063, 1064, 1226, 1063, 1227,
     1180, 1181, 1182, 1230, 1228, 1228, 1231, 1228, 1232, 1232,
     1183, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241,
     1242, 1184, 1229, 1240, 1240, 1185, 1240, 1082, 1082, 1244,
     1082, 1245, 1245, 1246, 1245, 1247, 1087, 1087, 1249, 1087,
     1250, 1090, 1090, 1253, 1090, 1252, 1252, 1256, 1252, 1093,

     1093, 1258, 1093, 1095, 1096, 1259, 1095, 1095, 1096, 1260,
     1095, 1255, 1255, 1261, 1255, 1257, 1257, 1262, 1257, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1243, 1288, 1289, 1290, 1291, 1292,
     1293, 1248, 1294, 1295, 1296, 1251, 1297, 1298, 1299, 1300,
     1254, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1162, 1162, 1317, 1162, 1163,
     1163, 1319, 1163, 1165, 1165, 1320, 1165, 1321, 1322,  375,
     1341,  375,  375,  375,  375, 1342,  375,  375,  375, 1343,

      375,  375, 1316, 1329, 1330,  375, 1329, 1344,  375, 1345,
      375,  375, 1323,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375, 1331,  375,  375, 1347, 1348,  375, 1315,
     1324,  375, 1326, 1328, 1349, 1333, 1318, 1325, 1352, 1327,
     1353, 1334, 1354, 1332, 1346, 1346, 1355, 1346, 1350, 1350,
     1356, 1350, 1357, 1358, 1359, 1360, 1361, 1365, 1368, 1363,
     1369, 1370, 1371, 1362, 1335, 1336, 1364, 1372, 1351, 1373,
     1338, 1374, 1339, 1366, 1366, 1375, 1366, 1376, 1377, 1378,
     1228, 1228, 1380, 1228, 1337, 1379, 1379, 1340, 1379, 1381,
     1383, 1232, 1232, 1367, 1232, 1384, 1385, 1386, 1229, 1387,

     1388, 1389, 1240, 1240, 1393, 1240, 1392, 1392, 1394, 1392,
     1395, 1245, 1245, 1399, 1245, 1397, 1397, 1400, 1397, 1398,
     1398, 1401, 1398, 1402, 1402, 1403, 1402, 1252, 1252, 1390,
     1252, 1405, 1406, 1255, 1255, 1408, 1255, 1257, 1257, 1411,
     1257, 1410, 1410, 1412, 1410, 1413, 1414, 1414, 1414, 1416,
     1416, 1416, 1418, 1419, 1420, 1421, 1422, 1382, 1391, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1409, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1396, 1441,
     1415, 1442, 1443, 1404, 1444, 1445, 1446, 1447, 1448, 1407,
     1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1409,

     1459, 1460, 1464, 1461, 1462, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1473, 1458, 1472, 1472, 1474, 1472, 1475, 1476,
     1463, 1477,  375,  375, 1477,  375,  375,  375,  375,  375,
      375,  375,  375,  375, 1484, 1494,  375, 1329, 1330, 1495,
     1329, 1330, 1330,  375, 1330, 1496,  375,  375, 1479, 1497,
      375, 1498, 1480, 1481, 1482, 1483,  375, 1331, 1500,  375,
      375, 1331,  375,  375,  376,  375,  375,  375, 1485,  375,
      375,  375,  375, 1501,  375,  375, 1346, 1346, 1502, 1346,
     1503, 1350, 1350, 1478, 1350, 1486, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1490, 1487, 1511, 1512, 1513, 1514, 1515,

     1516, 1351, 1366, 1366, 1517, 1366, 1518, 1519, 1520, 1521,
     1522, 1523, 1489, 1524, 1525, 1488, 1526, 1527, 1491, 1530,
     1379, 1379, 1367, 1379, 1528, 1528, 1531, 1528, 1532, 1533,
     1533, 1499, 1533, 1535, 1536, 1493, 1537, 1538, 1539, 1492,
     1540, 1541, 1529, 1392, 1392, 1543, 1392, 1534, 1544, 1545,
     1546, 1397, 1397, 1550, 1397, 1398, 1398, 1551, 1398, 1552,
     1402, 1402, 1555, 1402, 1554, 1554, 1556, 1554, 1557, 1558,
     1559, 1560, 1564, 1410, 1410, 1567, 1410, 1562, 1562, 1570,
     1562, 1563, 1563, 1571, 1563, 1414, 1414, 1414, 1416, 1416,
     1416, 1568, 1568, 1568, 1572, 1573, 1574, 1575, 1576, 1577,

     1578, 1579, 1580, 1581, 1594, 1595, 1596, 1542, 1597, 1598,
     1599, 1600, 1601, 1582, 1549, 1547, 1548, 1602, 1583, 1415,
     1603, 1604, 1565, 1605, 1606, 1553, 1561, 1584, 1585, 1586,
     1587, 1588, 1589, 1607, 1590, 1608, 1609, 1610, 1591, 1611,
     1592, 1612, 1613, 1614, 1615, 1616, 1593, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1472, 1472, 1627, 1472,
     1628, 1629, 1630, 1477,  375, 1656, 1477,  375, 1632, 1633,
     1657, 1632, 1635, 1636, 1658, 1635, 1638, 1639, 1659, 1638,
     1641, 1642, 1660, 1641, 1644, 1645,  375, 1644, 1634,  375,
     1647, 1648, 1637, 1647,  375,  375, 1640,  375,  375,  375,

     1643, 1661,  375,  375, 1646,  375,  375, 1662,  375, 1650,
     1649, 1626, 1663,  375,  375, 1631,  375,  375, 1664, 1664,
     1668, 1664, 1666, 1666, 1669, 1666, 1670, 1671, 1672, 1651,
     1673, 1673, 1685, 1673, 1675, 1675, 1686, 1675, 1665, 1687,
     1677, 1677, 1667, 1677, 1688, 1652, 1689, 1690, 1679, 1679,
     1674, 1679, 1691, 1692, 1676, 1693, 1681, 1681, 1653, 1681,
     1678, 1683, 1683, 1694, 1683, 1695, 1654, 1700, 1680, 1703,
     1528, 1528, 1655, 1528, 1696, 1696, 1682, 1696, 1704, 1533,
     1533, 1684, 1533, 1697, 1697, 1705, 1697, 1706, 1529, 1698,
     1698, 1707, 1698, 1699, 1699, 1708, 1699, 1534, 1701, 1701,

     1709, 1701, 1702, 1702, 1710, 1702, 1711, 1712, 1713, 1714,
     1714, 1715, 1714, 1716, 1554, 1554, 1718, 1554, 1719, 1720,
     1721, 1722, 1722, 1723, 1722, 1724, 1562, 1562, 1567, 1562,
     1563, 1563, 1730, 1563, 1727, 1727, 1731, 1727, 1568, 1568,
     1568, 1732, 1733, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
     1743, 1734, 1744, 1746, 1747, 1749, 1735, 1751, 1748, 1753,
     1752, 1754, 1755, 1757, 1758, 1750, 1760, 1745, 1761, 1756,
     1763, 1764, 1728, 1765, 1766, 1759, 1767, 1768, 1725, 1717,
     1769, 1770, 1771, 1772, 1773, 1726, 1774, 1779, 1762, 1775,
     1776, 1777, 1778, 1780, 1781, 1782, 1783, 1784, 1785, 1786,

     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1799,  375, 1632, 1633,  375, 1632, 1633, 1633,
     1801, 1633, 1635, 1636, 1802, 1635, 1636, 1636, 1803, 1636,
     1638, 1639, 1804, 1638, 1634, 1805, 1639, 1639, 1634, 1639,
     1806,  376, 1637, 1814, 1641, 1642, 1637, 1641,  375,  376,
     1640,  375, 1642, 1642, 1815, 1642, 1640,  376, 1644, 1645,
     1816, 1644, 1645, 1645, 1643, 1645, 1647, 1648, 1817, 1647,
     1810,  376, 1643,  375, 1648, 1648,  375, 1648, 1646, 1818,
     1800,  375, 1646, 1819,  375,  376, 1649, 1807, 1808,  375,
     1807, 1820,  375,  376, 1649,  375, 1821, 1822,  375, 1664,

     1664, 1823, 1664, 1826, 1827, 1666, 1666, 1809, 1666, 1824,
     1824, 1828, 1824, 1829, 1673, 1673, 1812, 1673, 1830, 1665,
     1831, 1675, 1675, 1489, 1675, 1667, 1832, 1677, 1677, 1825,
     1677, 1833, 1679, 1679, 1674, 1679, 1681, 1681, 1834, 1681,
     1837, 1676, 1683, 1683, 1811, 1683, 1838, 1678, 1835, 1835,
     1839, 1835, 1680, 1840, 1841, 1842, 1682, 1843, 1846, 1813,
     1844, 1844, 1684, 1844, 1845, 1845, 1855, 1845, 1836, 1696,
     1696, 1856, 1696, 1697, 1697, 1859, 1697, 1698, 1698, 1860,
     1698, 1699, 1699, 1861, 1699, 1852, 1852, 1862, 1852, 1701,
     1701, 1863, 1701, 1702, 1702, 1864, 1702, 1857, 1857, 1865,

     1857, 1858, 1858, 1868, 1858, 1714, 1714, 1847, 1714, 1867,
     1867, 1869, 1867, 1870, 1871, 1871, 1872, 1871, 1873, 1875,
     1722, 1722, 1848, 1722, 1876, 1877, 1849, 1878, 1727, 1727,
     1730, 1727, 1880, 1881, 1882, 1851, 1883, 1884, 1885, 1886,
     1887, 1888, 1889, 1893, 1890, 1850, 1894, 1895, 1891, 1896,
     1897, 1898, 1899, 1900, 1901, 1902, 1903, 1853, 1854, 1892,
     1904, 1905, 1866, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1919, 1874, 1920, 1921,
     1922, 1923, 1924, 1879, 1925, 1926, 1927, 1928, 1929, 1930,
     1931, 1932, 1933, 1934, 1936, 1937, 1935, 1938, 1939, 1940,

     1942, 1943, 1944, 1945, 1945, 1947, 1945, 1948, 1949, 1950,
     1951,  375, 1953, 1941,  375, 1807, 1808, 1960, 1807, 1808,
     1808, 1946, 1808, 1954, 1955,  375, 1954,  375,  375,  375,
      375, 1961,  375, 1962, 1963, 1809, 1964, 1965, 1966, 1809,
     1967, 1968,  376, 1956, 1824, 1824, 1971, 1824, 1969, 1969,
     1972, 1969, 1835, 1835, 1973, 1835, 1974, 1974, 1976, 1974,
     1977, 1978, 1979, 1980, 1825, 1985, 1981, 1981, 1970, 1981,
     1844, 1844, 1836, 1844, 1845, 1845, 1975, 1845, 1952, 1987,
     1957, 1988, 1958, 1989, 1982, 1986, 1986, 1990, 1986, 1992,
     1852, 1852, 1959, 1852, 1993, 1994, 1994, 1995, 1994, 1857,

     1857, 2002, 1857, 1858, 1858, 2003, 1858, 1999, 1999, 2004,
     1999, 2001, 2001, 2005, 2001, 2006, 2007, 1867, 1867, 2009,
     1867, 2010, 2016, 2011, 2011, 2000, 2011, 1871, 1871, 2017,
     1871, 1984, 2018, 2014, 2014, 1983, 2014, 2019, 2020, 2021,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
     2032, 2015, 2033, 2034, 2035, 1991, 1996, 2036, 2037, 2038,
     2039, 2040, 2041, 1997, 2042, 2043, 2044, 2045, 2046, 2047,
     1998, 2048, 2049, 2052, 2056, 2057, 2058, 2053, 2059, 2060,
     2061, 2008, 2050, 2062, 2063, 2054, 2055, 2064, 2065, 2066,
     2067, 2012, 2013, 2068, 2069, 2070, 2071, 2051, 2072, 2073,

     2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 1945, 1945, 2088, 1945, 2089, 2090,
     2091, 2092,  375, 1954, 1955,  375, 1954, 1955, 1955, 2094,
     1955,  375, 1946,  375,  375,  375,  375, 2098,  375, 2099,
     2093, 2100, 2101, 1956, 2102, 2103, 2104, 1956, 1969, 1969,
      376, 1969, 2105, 2106, 2107, 1974, 1974, 2108, 1974, 2109,
     2110, 2111, 2112, 2113, 2115, 2116, 1981, 1981, 1970, 1981,
     2114, 2114, 2117, 2114, 2119, 1975, 1986, 1986, 2120, 1986,
     2121, 2122, 2097, 2123, 1982, 2124, 2125, 1994, 1994, 2127,
     1994, 2128, 2129, 2130, 2135, 2136, 2096, 2095, 1999, 1999,

     2137, 1999, 2138, 2131, 2131, 2126, 2131, 2001, 2001, 2139,
     2001, 2133, 2133, 2140, 2133, 2143, 2000, 2141, 2141, 2145,
     2141, 2011, 2011, 2146, 2011, 2148, 2149, 2014, 2014, 2134,
     2014, 2147, 2147, 2150, 2147, 2142, 2151, 2152, 2153, 2153,
     2154, 2153, 2155, 2118, 2156, 2015, 2157, 2158, 2159, 2160,
     2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
     2181, 2182, 2183, 2184, 2132, 2186, 2187, 2144, 2188, 2189,
     2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
     2200, 2201, 2202, 2204, 2185, 2205, 2206, 2207, 2203, 2208,

     2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
      375,  375, 2221,  375,  375, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2233, 2234, 2233,
     2114, 2114, 2235, 2114, 2236, 2236, 2237, 2236, 2238, 2238,
     2239, 2238, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
     2248, 2131, 2131, 2249, 2131, 2133, 2133, 2251, 2133, 2250,
     2250, 2219, 2250, 2252, 2253, 2254, 2255, 2256, 2141, 2141,
     2259, 2141, 2260, 2134, 2261, 2220, 2257, 2257, 2262, 2257,
     2258, 2258, 2263, 2258, 2147, 2147, 2142, 2147, 2264, 2265,
     2266, 2153, 2153, 2268, 2153, 2269, 2270, 2271, 2272, 2273,

     2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2284,
     2285, 2286, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295,
     2296, 2287, 2297, 2298, 2283, 2299, 2300, 2301, 2302, 2303,
     2304, 2305, 2306, 2308, 2307, 2309, 2310, 2311, 2312, 2313,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2327, 2328, 2267, 2329, 2330, 2331, 2331,
     2333, 2331, 2334, 2335,  375,  375, 2338,  375,  375, 2339,
     2340, 2341, 2342, 2343, 2344, 2345, 2332, 2346, 2347, 2348,
     2349, 2233, 2233, 2351, 2233, 2352, 2236, 2236, 2354, 2236,
     2238, 2238, 2356, 2238, 2357, 2357, 2358, 2357, 2359, 2360,

     2360, 2361, 2360, 2362, 2362, 2363, 2362, 2364, 2365, 2366,
     2250, 2250, 2367, 2250, 2368, 2369, 2369, 2370, 2369, 2371,
     2372, 2257, 2257, 2374, 2257, 2258, 2258, 2337, 2258, 2375,
     2376, 2377, 2336, 2378, 2379, 2380, 2381, 2382, 2383, 2384,
     2385, 2386, 2387, 2388, 2389, 2390, 2350, 2391, 2392, 2393,
     2353, 2394, 2395, 2396, 2397, 2398, 2399, 2355, 2400, 2401,
     2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411,
     2412, 2413, 2414, 2415, 2416, 2417, 2419, 2373, 2420, 2421,
     2422, 2423, 2424, 2425, 2418, 2426, 2427, 2428, 2429, 2430,
     2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440,

     2331, 2331, 2441, 2331, 2442,  375,  375, 2445,  375,  375,
     2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2332, 2454,
     2455, 2456, 2457, 2458, 2459, 2459, 2461, 2459, 2462, 2463,
     2464, 2357, 2357, 2467, 2357, 2466, 2466, 2469, 2466, 2471,
     2360, 2360, 2460, 2360, 2362, 2362, 2472, 2362, 2473, 2473,
     2475, 2473, 2476, 2477, 2477, 2479, 2477, 2369, 2369, 2480,
     2369, 2444, 2481, 2482, 2443, 2483, 2474, 2484, 2485, 2486,
     2487, 2488, 2488, 2489, 2488, 2490, 2491, 2491, 2492, 2491,
     2493, 2494, 2495, 2496, 2497, 2465, 2498, 2499, 2500, 2501,
     2502, 2503, 2504, 2505, 2468, 2506, 2507, 2470, 2508, 2510,

     2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520,
     2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2478,
     2530, 2531, 2532, 2509, 2533, 2534, 2535, 2536, 2537, 2538,
     2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548,
      375,  375, 2550,  375,  375, 2551, 2552, 2553, 2554, 2555,
     2556, 2557, 2558, 2559, 2560, 2561, 2459, 2459, 2563, 2459,
     2562, 2562, 2564, 2562, 2565, 2566, 2567, 2466, 2466, 2569,
     2466, 2570, 2571, 2572, 2460, 2573, 2574, 2473, 2473, 2578,
     2473, 2575, 2575, 2580, 2575, 2568, 2583, 2576, 2576, 2584,
     2576, 2477, 2477, 2585, 2477, 2474, 2581, 2581, 2588, 2581,

     2586, 2586, 2589, 2586, 2549, 2577, 2590, 2590, 2592, 2590,
     2488, 2488, 2596, 2488, 2582, 2598, 2594, 2594, 2587, 2594,
     2491, 2491, 2599, 2491, 2591, 2600, 2601, 2602, 2603, 2604,
     2605, 2606, 2607, 2608, 2595, 2609, 2610, 2611, 2612, 2613,
     2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623,
     2624, 2625, 2626, 2627, 2628, 2579, 2629, 2630, 2631, 2632,
     2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642,
     2643, 2644, 2645, 2646, 2593, 2597, 2647, 2648, 2649, 2650,
     2651,  375, 2653, 2654,  375, 2655, 2656, 2657, 2658, 2659,
     2660, 2661, 2662, 2663, 2664, 2562, 2562, 2665, 2562, 2666,

     2667, 2668, 2668, 2669, 2668, 2670, 2671, 2672, 2673, 2674,
     2675, 2575, 2575, 2678, 2575, 2576, 2576, 2679, 2576, 2676,
     2676, 2681, 2676, 2677, 2677, 2682, 2677, 2581, 2581, 2683,
     2581, 2680, 2680, 2577, 2680, 2586, 2586, 2685, 2586, 2684,
     2684, 2686, 2684, 2687, 2652, 2582, 2590, 2590, 2688, 2590,
     2689, 2594, 2594, 2587, 2594, 2690, 2691, 2692, 2693, 2694,
     2695, 2696, 2697, 2698, 2591, 2699, 2700, 2701, 2702, 2595,
     2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712,
     2713, 2714, 2715, 2717, 2718, 2719, 2716, 2720, 2721, 2722,
     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732,

     2733, 2734, 2735, 2736, 2737, 2738, 2740, 2737, 2741, 2742,
     2743, 2744, 2745, 2745, 2746, 2745, 2747, 2747, 2751, 2747,
     2749, 2749, 2752, 2749, 2739, 2753, 2754, 2755, 2755, 2757,
     2755, 2668, 2668, 2759, 2668, 2760, 2748, 2761, 2762, 2763,
     2750, 2764, 2765, 2676, 2676, 2756, 2676, 2677, 2677, 2767,
     2677, 2768, 2680, 2680, 2771, 2680, 2769, 2769, 2772, 2769,
     2684, 2684, 2773, 2684, 2774, 2774, 2776, 2774, 2777, 2778,
     2778, 2779, 2778, 2780, 2770, 2781, 2782, 2783, 2784, 2785,
     2786, 2787, 2775, 2788, 2789, 2790, 2791, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2758, 2803,

     2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813,
     2814, 2766, 2815, 2816, 2817, 2818, 2818, 2821, 2818, 2820,
     2820, 2822, 2820, 2737, 2738, 2823, 2737, 2738, 2738, 2824,
     2738, 2825, 2826, 2819, 2827, 2828, 2745, 2745, 2830, 2745,
     2831, 2747, 2747, 2739, 2747, 2749, 2749, 2739, 2749, 2832,
      376, 2833, 2834, 2835, 2836, 2755, 2755, 2839, 2755, 2837,
     2837, 2748, 2837, 2838, 2838, 2750, 2838, 2840, 2841, 2842,
     2843, 2844, 2845, 2756, 2846, 2847, 2848, 2849, 2769, 2769,
     2853, 2769, 2851, 2851, 2854, 2851, 2774, 2774, 2856, 2774,
     2857, 2829, 2855, 2855, 2859, 2855, 2770, 2860, 2778, 2778,

     2852, 2778, 2861, 2862, 2775, 2863, 2864, 2865, 2866, 2867,
     2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877,
     2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887,
     2888, 2889, 2890, 2891, 2893, 2894, 2818, 2818, 2892, 2818,
     2820, 2820, 2896, 2820, 2897, 2898, 2899, 2900, 2901, 2902,
     2903, 2904, 2905, 2906, 2819, 2907, 2908, 2837, 2837, 2910,
     2837, 2912, 2858, 2838, 2838, 2914, 2838, 2911, 2911, 2916,
     2911, 2913, 2913, 2917, 2913, 2915, 2915, 2918, 2915, 2919,
     2920, 2920, 2927, 2920, 2851, 2851, 2928, 2851, 2922, 2922,
     2931, 2922, 2932, 2923, 2923, 2895, 2923, 2933, 2921, 2934,

     2924, 2924, 2852, 2924, 2855, 2855, 2935, 2855, 2926, 2926,
     2936, 2926, 2929, 2929, 2937, 2929, 2938, 2939, 2925, 2909,
     2930, 2930, 2940, 2930, 2941, 2942, 2943, 2944, 2947, 2948,
     2949, 2945, 2950, 2946, 2951, 2952, 2953, 2954, 2955, 2956,
     2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976,
     2977, 2978, 2979, 2911, 2911, 2981, 2911, 2913, 2913, 2986,
     2913, 2983, 2983, 2987, 2983, 2915, 2915, 2988, 2915, 2989,
     2994, 2980, 2998, 2920, 2920, 2982, 2920, 2990, 2990, 2984,
     2990, 2922, 2922, 2985, 2922, 2923, 2923, 2999, 2923, 2924,

     2924, 2921, 2924, 2992, 2992, 3000, 2992, 2926, 2926, 3001,
     2926, 2995, 2995, 2991, 2995, 2929, 2929, 2925, 2929, 2930,
     2930, 3002, 2930, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
     3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
     3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3031, 3031, 3033, 3031, 3034, 3035, 3038, 3039, 2993,
     3036, 3036, 3044, 3036, 3040, 3040, 3045, 3040, 3051, 3032,
     3042, 3042, 2996, 3042, 3052, 2997, 3046, 3046, 3037, 3046,
     2983, 2983, 3041, 2983, 3048, 3048, 3053, 3048, 3043, 3049,
     3049, 3054, 3049, 3055, 3047, 3057, 2990, 2990, 2984, 2990,

     2992, 2992, 3058, 2992, 3059, 2995, 2995, 3050, 2995, 3060,
     3061, 3062, 3063, 3064, 3065, 3066, 3068, 3069, 3070, 3071,
     3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081,
     3082, 3083, 3084, 3067, 3031, 3031, 3081, 3031, 3083, 3085,
     3086, 3087, 3087, 3088, 3087, 3036, 3036, 3089, 3036, 3092,
     3040, 3040, 3032, 3040, 3090, 3090, 3093, 3090, 3042, 3042,
     3056, 3042, 3097, 3037, 3091, 3091, 3098, 3091, 3041, 3046,
     3046, 3099, 3046, 3102, 3094, 3094, 3043, 3094, 3048, 3048,
     3103, 3048, 3049, 3049, 3104, 3049, 3105, 3047, 3095, 3095,
     3106, 3095, 3096, 3096, 3107, 3096, 3100, 3100, 3108, 3100,

     3050, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117,
     3118, 3119, 3120, 3121, 3101, 3122, 3123, 3123, 3124, 3123,
     3125, 3126, 3127, 3127, 3141, 3127, 3129, 3129, 3144, 3129,
     3131, 3131, 3145, 3131, 3087, 3087, 3146, 3087, 3134, 3134,
     3128, 3134, 3090, 3090, 3130, 3090, 3091, 3091, 3132, 3091,
     3136, 3136, 3147, 3136, 3138, 3138, 3135, 3138, 3094, 3094,
     3152, 3094, 3095, 3095, 3153, 3095, 3096, 3096, 3137, 3096,
     3142, 3142, 3139, 3142, 3100, 3100, 3148, 3100, 3154, 3148,
     3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3143, 3163,
     3133, 3164, 3101, 3123, 3123, 3166, 3123, 3167, 3168, 3127,

     3127, 3169, 3127, 3129, 3129, 3172, 3129, 3173, 3131, 3131,
     3175, 3131, 3134, 3134, 3176, 3134, 3177, 3128, 3178, 3136,
     3136, 3130, 3136, 3179, 3180, 3140, 3132, 3149, 3170, 3170,
     3135, 3170, 3150, 3181, 3151, 3138, 3138, 3137, 3138, 3171,
     3171, 3182, 3171, 3142, 3142, 3183, 3142, 3174, 3174, 3165,
     3174, 3148, 3184, 3139, 3148, 3185, 3186, 3187, 3188, 3189,
     3190, 3143, 3191, 3192, 3193, 3194, 3194, 3196, 3194, 3197,
     3197, 3199, 3197, 3170, 3170, 3200, 3170, 3171, 3171, 3203,
     3171, 3201, 3201, 3195, 3201, 3174, 3174, 3198, 3174, 3204,
     3204, 3205, 3204, 3206, 3207, 3208, 3209, 3210, 3211, 3202,

     3212, 3213, 3149, 3214, 3215, 3216, 3217, 3150, 3218, 3151,
     3219, 3220, 3221, 3194, 3194, 3222, 3194, 3197, 3197, 3223,
     3197, 3224, 3201, 3201, 3228, 3201, 3225, 3225, 3229, 3225,
     3230, 3195, 3233, 3226, 3226, 3198, 3226, 3234, 3204, 3204,
     3202, 3204, 3231, 3235, 3236, 3231, 3237, 3238, 3239, 3240,
     3241, 3242, 3243, 3244, 3245, 3246, 3225, 3225, 3248, 3225,
     3226, 3226, 3249, 3226, 3250, 3251, 3231, 3252, 3253, 3231,
     3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263,
     3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273,
     3274, 3275, 3276, 3277, 3278, 3227, 3279, 3232, 3280, 3281,

     3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3291, 3292,
     3289, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301,
     3303, 3232, 3306, 3307, 3308, 3290, 3247, 3302, 3302, 3304,
     3302, 3289, 3304, 3309, 3289, 3310, 3310, 3312, 3310, 3313,
     3314, 3302, 3302, 3316, 3302, 3304, 3317, 3318, 3304, 3290,
     3319, 3320, 3320, 3311, 3320, 3310, 3310, 3322, 3310, 3323,
     3324, 3325, 3326, 3327, 3329, 3333, 3327, 3332, 3332, 3321,
     3332, 3320, 3320, 3311, 3320, 3330, 3330, 3334, 3330, 3335,
     3327, 3328, 3336, 3327, 3339, 3305, 3340, 3330, 3330, 3321,
     3330, 3337, 3337, 3331, 3337, 3343, 3344, 3315, 3328, 3332,

     3332, 3305, 3332, 3341, 3345, 3331, 3341, 3337, 3337, 3346,
     3337, 3341, 3347, 3348, 3341, 3349, 3349, 3350, 3349, 3351,
     3352, 3342, 3349, 3349, 3354, 3349, 3355, 3356, 3357, 3342,
     3358, 3359, 3360, 3361, 3362, 3362, 3364, 3362, 3365, 3366,
     3362, 3362, 3367, 3362, 3368, 3369, 3370, 3371, 3371, 3373,
     3371, 3374, 3363, 3371, 3371, 3338, 3371, 3375, 3363, 3376,
     3377, 3378, 1417, 3379, 3379, 3372, 3379, 3379, 3379, 1569,
     3379, 3372,  917, 1092, 1091, 1089, 1088, 1086, 3353, 1085,
     1084, 3380, 1083, 1081, 1080, 3380,   70,   70,   70,   70,
       70,   70,   70,   70,   94,   94,   94,   94,   94,   94,

       94,   94,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,  105,  105,  105,  105,  105,  112,  112,
      112,  112,  112,  112,  112,  112,  116,  116,  116,  116,
      116,  116,  116,  116,  120,  120,  120,  120,  120,  120,
      120,  120,  124,  124,  124,  124,  124,  124,  124,  124,
      128,  128,  128,  128,  128,  128,  128,  128,  132,  132,
      132,  132,  132,  132,  132,  132,  159,  159,  159,  159,
      159,  159,  159,  159,  163,  163,  163,  163,  163,  163,
      163,  163,  167,  167,  167,  167,  167,  167,  167,  167,
      171,  171,  171,  171,  171,  171,  171,  171,  175,  175,

      175,  175,  175,  175,  175,  175,  179,  179,  179,  179,
      179,  179,  179,  179,  183,  183,  183,  183,  183,  183,
      183,  183,  234,  234,  234,  234,  234,  234,  234,  234,
      264,  264,  264,  264,  264,  264,  264,  264,  268,  268,
      268,  268,  268,  268,  268,  268,  272,  272,  272,  272,
      272,  272,  272,  272,  275,  275,  275,  275,  275,  275,
      275,  275,  279,  279,  279,  279,  279,  279,  279,  279,
      283,  283,  283,  283,  283,  283,  283,  283,  287,  287,
      287,  287,  287,  287,  287,  287,  291,  291,  291,  291,
      291,  291,  291,  291,  302,  302,  302,  302,  302,  302,

      302,  302,  305,  305,  305,  305,  305,  305,  305,  305,
      312,  312,  312,  312,  312,  312,  312,  312,  325, 1079,
      325,  361, 1078,  361,  378, 1076, 1073,  378, 1072,  378,
      466, 1071,  466,  499,  499,  499,  499,  499,  499,  499,
      507,  507,  507,  507,  510, 1070,  510,  520,  520,  520,
      520,  520,  520,  520,  520,  522,  522, 1067,  522,  522,
      522,  522,  522,  540,  540,  540,  540,  540,  540,  540,
      540,  542,  542,  542,  542,  542,  542,  542,  542,  621,
      621,  621,  621,  621,  621,  621,  621,  623,  623, 1066,
      623,  623,  623,  623,  623,  643,  643,  643,  643,  643,

      643,  643,  643,  645,  645,  645,  645,  645,  645,  645,
      645,  648,  648,  648,  648,  648,  648,  648,  648,  650,
      650, 1065,  650,  650,  650,  650,  650,  672,  672,  672,
      672,  672,  672,  672,  672,  674,  674,  674,  674,  674,
      674,  674,  674,  678,  678,  678,  678,  678,  678,  678,
      678,  680,  680,  675,  680,  680,  680,  680,  680,  714,
      714,  714,  714,  714,  714,  714,  714,  716,  716,  716,
      716,  716,  716,  716,  716,  726,  726,  726,  726,  726,
      726,  726,  726,  751,  751,  751,  751,  751,  751,  751,
      751,  753,  753,  753,  753,  753,  753,  753,  753,  540,

      540,  540,  540,  540,  540,  540,  540,  542,  542,  542,
      542,  542,  542,  542,  542,  855,  855,  855,  855,  855,
      855,  855,  855,  857,  857,  857,  857,  857,  857,  857,
      857,  643,  643,  643,  643,  643,  643,  643,  643,  645,
      645,  645,  645,  645,  645,  645,  645,  648,  648,  648,
      648,  648,  648,  648,  648,  650,  650, 1062,  650,  650,
      650,  650,  650,  879,  879,  879,  879,  879,  879,  879,
      879,  881,  881,  881,  881,  881,  881,  881,  881,  672,
      672,  672,  672,  672,  672,  672,  672,  674,  674,  674,
      674,  674,  674,  674,  674,  678,  678,  678,  678,  678,

      678,  678,  678,  680,  680,  880,  680,  680,  680,  680,
      680,  466, 1061,  466,  916,  916,  916,  916,  916,  916,
      916,  916,  918,  918,  918,  918,  918,  918,  918,  918,
      714,  714,  714,  714,  714,  714,  714,  714,  716,  716,
      716,  716,  716,  716,  716,  716,  726,  726,  726,  726,
      726,  726,  726,  726,  325, 1060,  325,  751,  751,  751,
      751,  751,  751,  751,  751,  753,  753,  753,  753,  753,
      753,  753,  753, 1168, 1168, 1168, 1168, 1059, 1168, 1058,
     1168, 1193, 1193, 1193, 1193, 1057, 1193, 1056, 1193, 1210,
     1210, 1210, 1210, 1055, 1210, 1054, 1210, 1566, 1566, 1729,

     1729, 2850, 1053, 1052, 2850, 1051, 2850, 1050, 1049, 1048,
     1047, 1046, 1045,  646, 1042,  856, 1041, 1040, 1039, 1038,
     1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028,
     1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018,
     1000,  999,  998,  997,  996,  995,  994,  993,  992,  991,
      990,  989,  988,  987,  986,  985,  984,  983,  982,  981,
      980,  979,  978,  977,  976,  975,  974,  973,  970,  969,
      968,  965,  960,  959,  958,  957,  956,  955,  954,  953,
      952,  951,  950,  949,  948,  947,  946,  543,  943,  752,
      942,  941,  940,  939,  938,  937,  936,  935,  934,  933,

      932,  931,  930,  929,  928,  727,  927,  924,  923,  922,
      920,  717,  919,  715,  717,  917,  915,  914,  913,  912,
      911,  910,  909,  908,  907,  906,  905,  904,  903,  902,
      901,  899,  897,  894,  893,  892,  891,  890,  889,  886,
      679,  883,  675,  882,  673,  675,  880,  878,  877,  876,
      875,  874,  873,  872,  871,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  860,  649,  859,  646,  858,
      644,  646,  856,  854,  853,  852,  851,  850,  849,  848,
      847,  846,  845,  844,  843,  842,  841,  840,  839,  838,
      837,  622,  836,  835,  834,  833,  832,  831,  830,  829,

      818,  809,  808,  807,  806,  805,  804,  803,  802,  801,
      796,  795,  794,  793,  792,  791,  790,  787,  781,  780,
      779,  778,  777,  776,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  761,  760,  759,  758,  757,  756,
      755,  543,  754,  541,  543,  752,  750,  749,  748,  747,
      746,  745,  744,  743,  742,  741,  738,  521,  735,  734,
      733,  732,  731,  730,  729,  728,  727,  506,  725,  724,
      723,  722,  721,  720,  719,  718,  717,  715,  694,  711,
      710,  709,  708,  707,  704,  701,  700,  699,  698,  697,
      695,  692,  690,  689,  688,  687,  686,  685,  679,  676,

      675,  673,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  655,  654,  653,  652,
      651,  649,  647,  646,  644,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  622,  620,  619,  618,  617,  616,  615,  614,
      613,  602,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  579,  578,  570,  564,  558,  557,  549,  546,  545,
      544,  543,  541,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  521,  518,  515,  514,  513,  512,
      511,  508,  506,  505,  504,  503,  502,  498,  497,  486,

      477,  490,  489,  483,  479,  473,  472,  471,  468,  467,
      459,  452,  451,  450,  449,  446,  445,  432,  442,  441,
      440,  439,  435,  432,  432,  432,  432,  432,  423,  413,
      412,  411,  410,  409,  408,  405,  405,  405,  405,  405,
      404,  403,  402,  401,  400,  399,  398,  374,  374,  374,
      374,  374,  373,  372,  371,  370,  369,  368,  344,  343,
      342,  336,  335,  334,  333,  332,  331,  330,  329,  328,
     3381,   69, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381
    } ;

static yyconst flex_int16_t yy_chk[6051] =
    {   0,
        0,    0,    1,    1,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    4,   81,    4,    5,    5,
        6,    6,   40,   42,  106,   40,   42,  106,    4,   46,

       46,  226,   46,   51,   51,   81,   40,   42,    5,  141,
        6,  141,    5,   46,    6,    9,    9,    9,    9,    5,
      226,    6,   11,   11,   12,   12,  142,    9,    9,  142,
        9,    9,    9,   13,   13,    5,  917,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   14,   14,  918,    7,    7,    7,
       10,   10,   10,   10,   15,   15,   16,   16,  206,   11,
      206,   12,   10,   10,   78,   10,   10,   10,   51,   78,
       13,   52,   52,   77,   77,   77,    7,    7,    7,  773,
      773,   17,   17,   18,   18,   19,   19,   20,   20,   21,

       21,   14,   22,   22,   25,   25,   26,   26,   27,   27,
      231,   15,  231,   16,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,   28,   28,   93,    8,    8,    8,   17,   93,
       18,  201,   19,  920,   20,  203,   21,   91,   91,   22,
       91,   25,  201,   26,  203,   27,   52,  110,  110,  110,
      145,   91,  317,  145,    8,    8,    8,  109,  205,  109,
      109,  109,  205,  240,  240,  240,  241,  246,  354,   28,
      253,  241,  145,  253,  263,  253,  246,  891,  354,  263,
      317,  891,    8,    8,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   29,   29,   30,   30,   31,   31,   32,   32,
       33,   33,   34,   34,   35,   35,   36,   36,   37,   37,
       38,   38,   79,  278,   79,   79,   79,  146,  152,  147,

      146,  152,  147,  258,   79,  251,  217,  278,  339,  362,
      250,  258,  362,  339,  217,  300,  300,  300,  250,   29,
      152,   30,  251,   31,  147,   32,  217,   33,  250,   34,
      475,   35,  146,   36,   79,   37,  475,   38,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   44,   44,  111,  191,

      111,  111,  111,  148,  191,  255,  148,  770,  922,  255,
      111,  261,  261,  255,  261,  345,  352,  770,  337,  337,
      345,  337,  255,  255,  324,  261,  324,  483,  352,  324,
      324,  324,  337,  924,  351,  483,  351,  927,  148,  351,
      111,   43,  191,   44,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   47,   47,   48,   48,   49,   49,   50,   50,
       53,   53,   54,   54,   55,   55,   56,   56,   57,   57,
       58,   58,   59,   59,   60,   60,   61,   61,   62,   62,
       65,   65,   66,   66,  156,  347,  429,  156,  347,  153,
      929,  429,  153,  143,  347,  158,  143,  137,  158,   47,
      137,   48,  930,   49,   65,   50,   66,   53,   65,   54,
       66,   55,  149,   56,  200,   57,  222,   58,  931,   59,
      156,   60,  932,   61,  137,   62,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  143,  137,
      144,  202,  202,  144,   65,   65,   66,   66,  153,  158,
      149,  158,  200,  149,  222,  200,  355,  222,  771,  355,
      375,  144,  355,  375,   63,   63,   63,  151,  154,  144,
      151,  154,  155,  771,  157,  155,  202,  157,  208,  378,
      213,  144,  378,  208,  934,  213,  935,  375,   67,   67,
       68,   68,   63,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   67,  151,   68,  154,

      936,  208,   67,  213,   68,  157,  155,  207,  358,  937,
      207,  232,  358,  348,  232,   67,  348,   68,  348,  358,
      569,  207,   64,   64,   64,  232,  569,  348,  938,  233,
      363,  363,  363,   67,  233,   68,  242,  456,  242,  242,
      242,  386,  456,  572,  386,  319,  319,  319,  242,  572,
       64,   64,  100,  100,  100,  319,  100,  100,  100,  207,
      100,  562,  939,  232,  100,  100,  100,  100,  562,  100,
      100,  100,  233,  357,  100,  100,  941,  357,  242,  322,
      322,  322,  777,  386,  323,  319,  323,  323,  323,  322,
      777,  379,  357,  357,  379,  364,  323,  364,  364,  364,

      365,  365,  365,  366,  366,  366,  942,  364,  948,  367,
      365,  367,  949,  366,  367,  367,  367,  380,  381,  322,
      380,  381,  382,  950,  383,  382,  323,  383,  384,  385,
      389,  384,  385,  389,  951,  390,  391,  364,  390,  391,
      365,  393,  392,  366,  393,  392,  394,  396,  395,  394,
      396,  395,  381,  397,  379,  428,  397,  455,  428,  952,
      455,  380,  382,  953,  384,  385,  460,  460,  460,  428,
      954,  455,  473,  473,  383,  473,  460,  463,  463,  463,
      477,  477,  551,  477,  389,  551,  955,  463,  389,  464,
      390,  464,  464,  464,  485,  494,  393,  957,  958,  485,

      494,  464,  391,  392,  959,  960,  460,  509,  509,  509,
      394,  395,  956,  465,  396,  465,  956,  463,  465,  465,
      465,  961,  397,  492,  492,  594,  492,  519,  594,  519,
      962,  464,  519,  519,  519,  963,  964,  492,  523,  523,
      523,  525,  525,  525,  524,  965,  524,  966,  523,  524,
      524,  524,  526,  526,  526,  570,  967,  580,  570,  580,
      968,  969,  580,  580,  580,  595,  970,  570,  595,  581,
      581,  581,  583,  583,  583,  582,  971,  582,  523,  581,
      582,  582,  582,  584,  584,  584,  972,  596,  597,  594,
      596,  597,  598,  599,  595,  598,  599,  600,  601,  603,

      600,  601,  603,  604,  605,  973,  604,  605,  606,  581,
      607,  606,  608,  607,  609,  608,  596,  609,  610,  598,
      974,  610,  611,  601,  975,  611,  677,  612,  677,  600,
      612,  677,  677,  677,  683,  683,  683,  976,  597,  977,
      681,  681,  681,  599,  691,  691,  682,  691,  682,  978,
      681,  682,  682,  682,  603,  684,  684,  684,  692,  692,
      981,  692,  694,  694,  982,  694,  983,  604,  736,  736,
      736,  605,  610,  810,  606,  608,  810,  607,  819,  609,
      681,  819,  612,  696,  696,  984,  696,  719,  719,  611,
      719,  723,  723,  985,  723,  724,  724,  986,  724,  987,

      691,  737,  737,  737,  739,  739,  739,  740,  740,  740,
      754,  754,  988,  754,  797,  797,  797,  798,  798,  798,
      799,  799,  799,  800,  800,  800,  811,  812,  813,  811,
      812,  813,  989,  814,  815,  810,  814,  815,  816,  817,
      820,  816,  817,  820,  990,  991,  821,  696,  819,  821,
      822,  823,  824,  822,  823,  824,  994,  996,  814,  811,
      812,  997,  825,  826,  813,  825,  826,  827,  828,  999,
      827,  828, 1000,  815, 1018,  858,  858,  817,  858,  882,
      882, 1019,  882,  884,  884,  884,  896,  896,  816,  896,
      827,  885,  885,  885,  887,  887,  887,  888,  888,  888,

      898,  898, 1020,  898, 1021,  822,  823,  820,  903,  903,
     1022,  903,  908,  908,  821,  908,  911,  911, 1023,  911,
      824,  914,  914, 1024,  914,  919,  919,  826,  919,  921,
      921,  825,  921,  925,  925, 1027,  925,  926,  926, 1028,
      926,  943,  943,  980,  943,  896,  944,  944, 1001,  944,
     1029, 1001,  980,  980,  896,  992,  992, 1030,  992,  898,
      993,  993, 1031,  993,  995,  995, 1002,  995, 1003, 1002,
     1004, 1003, 1005, 1004, 1007, 1005, 1008, 1007, 1006, 1008,
     1009, 1006, 1010, 1009,  921, 1010, 1011, 1013, 1012, 1011,
     1013, 1012, 1032, 1014, 1034, 1002, 1014, 1003, 1036, 1015,

     1037,  925, 1015, 1001, 1038,  926, 1005, 1006, 1004, 1016,
     1007, 1017, 1016, 1039, 1017, 1033, 1033, 1040, 1041, 1042,
     1042, 1046, 1042, 1047, 1043, 1043, 1008, 1043, 1048, 1049,
     1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1060, 1009,
     1061, 1062, 1062, 1065, 1062, 1063, 1063, 1066, 1063, 1067,
     1010, 1012, 1014, 1069, 1068, 1068, 1070, 1068, 1071, 1071,
     1015, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080,
     1081, 1016, 1068, 1079, 1079, 1017, 1079, 1082, 1082, 1083,
     1082, 1084, 1084, 1085, 1084, 1086, 1087, 1087, 1088, 1087,
     1089, 1090, 1090, 1092, 1090, 1091, 1091, 1098, 1091, 1093,

     1093, 1100, 1093, 1094, 1094, 1101, 1094, 1095, 1095, 1102,
     1095, 1097, 1097, 1103, 1097, 1099, 1099, 1104, 1099, 1105,
     1106, 1107, 1108, 1110, 1111, 1112, 1114, 1116, 1117, 1118,
     1119, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130,
     1131, 1132, 1133, 1134, 1082, 1135, 1136, 1137, 1138, 1139,
     1140, 1087, 1141, 1142, 1143, 1090, 1144, 1145, 1146, 1147,
     1093, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1156, 1157, 1158, 1159, 1161, 1162, 1162, 1164, 1162, 1163,
     1163, 1166, 1163, 1165, 1165, 1167, 1165, 1169, 1170, 1171,
     1186, 1172, 1171, 1173, 1172, 1187, 1173, 1176, 1174, 1188,

     1176, 1174, 1163, 1175, 1175, 1178, 1175, 1189, 1178, 1190,
     1177, 1179, 1171, 1177, 1179, 1180, 1181, 1182, 1180, 1181,
     1182, 1183, 1184, 1175, 1183, 1184, 1192, 1194, 1185, 1162,
     1172, 1185, 1173, 1174, 1195, 1177, 1165, 1172, 1197, 1173,
     1198, 1178, 1199, 1176, 1191, 1191, 1202, 1191, 1196, 1196,
     1203, 1196, 1204, 1205, 1205, 1208, 1212, 1214, 1216, 1213,
     1217, 1218, 1219, 1212, 1179, 1180, 1213, 1220, 1196, 1221,
     1182, 1222, 1183, 1215, 1215, 1224, 1215, 1225, 1226, 1227,
     1228, 1228, 1230, 1228, 1181, 1229, 1229, 1185, 1229, 1231,
     1233, 1232, 1232, 1215, 1232, 1234, 1235, 1236, 1228, 1237,

     1238, 1239, 1240, 1240, 1242, 1240, 1241, 1241, 1243, 1241,
     1244, 1245, 1245, 1248, 1245, 1246, 1246, 1249, 1246, 1247,
     1247, 1249, 1247, 1250, 1250, 1251, 1250, 1252, 1252, 1240,
     1252, 1253, 1254, 1255, 1255, 1256, 1255, 1257, 1257, 1259,
     1257, 1258, 1258, 1260, 1258, 1261, 1262, 1262, 1262, 1263,
     1263, 1263, 1264, 1265, 1266, 1267, 1268, 1232, 1240, 1271,
     1272, 1273, 1274, 1275, 1276, 1276, 1277, 1278, 1279, 1281,
     1257, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1245, 1289,
     1262, 1290, 1291, 1252, 1292, 1294, 1295, 1296, 1297, 1255,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1257,

     1307, 1308, 1309, 1308, 1308, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1318, 1306, 1317, 1317, 1319, 1317, 1320, 1321,
     1308, 1322, 1323, 1324, 1322, 1323, 1324, 1325, 1326, 1327,
     1325, 1326, 1327, 1328, 1331, 1341, 1328, 1329, 1329, 1342,
     1329, 1330, 1330, 1332, 1330, 1343, 1332, 1333, 1324, 1344,
     1333, 1345, 1325, 1326, 1327, 1328, 1334, 1329, 1347, 1334,
     1335, 1330, 1336, 1335, 1329, 1336, 1337, 1338, 1332, 1337,
     1338, 1339, 1340, 1348, 1339, 1340, 1346, 1346, 1349, 1346,
     1351, 1350, 1350, 1323, 1350, 1333, 1352, 1353, 1354, 1355,
     1356, 1357, 1360, 1337, 1334, 1361, 1362, 1363, 1364, 1365,

     1367, 1350, 1366, 1366, 1368, 1366, 1369, 1370, 1371, 1372,
     1373, 1374, 1336, 1375, 1376, 1335, 1377, 1378, 1338, 1381,
     1379, 1379, 1366, 1379, 1380, 1380, 1382, 1380, 1383, 1384,
     1384, 1346, 1384, 1385, 1386, 1340, 1387, 1388, 1389, 1339,
     1390, 1391, 1380, 1392, 1392, 1393, 1392, 1384, 1394, 1395,
     1396, 1397, 1397, 1399, 1397, 1398, 1398, 1400, 1398, 1401,
     1402, 1402, 1404, 1402, 1403, 1403, 1405, 1403, 1406, 1407,
     1408, 1409, 1413, 1410, 1410, 1417, 1410, 1411, 1411, 1419,
     1411, 1412, 1412, 1421, 1412, 1414, 1414, 1414, 1416, 1416,
     1416, 1418, 1418, 1418, 1424, 1425, 1426, 1428, 1429, 1430,

     1431, 1435, 1436, 1436, 1438, 1440, 1441, 1392, 1442, 1443,
     1444, 1445, 1446, 1436, 1398, 1397, 1397, 1447, 1436, 1414,
     1448, 1449, 1416, 1450, 1451, 1402, 1410, 1437, 1437, 1437,
     1437, 1437, 1437, 1452, 1437, 1453, 1454, 1455, 1437, 1456,
     1437, 1457, 1458, 1459, 1460, 1461, 1437, 1462, 1463, 1464,
     1465, 1466, 1467, 1469, 1470, 1471, 1472, 1472, 1473, 1472,
     1474, 1475, 1476, 1477, 1478, 1494, 1477, 1478, 1479, 1479,
     1495, 1479, 1480, 1480, 1496, 1480, 1481, 1481, 1497, 1481,
     1482, 1482, 1498, 1482, 1483, 1483, 1486, 1483, 1479, 1486,
     1485, 1485, 1480, 1485, 1487, 1488, 1481, 1487, 1488, 1489,

     1482, 1499, 1489, 1490, 1483, 1491, 1490, 1500, 1491, 1486,
     1485, 1472, 1501, 1492, 1493, 1478, 1492, 1493, 1502, 1502,
     1505, 1502, 1504, 1504, 1506, 1504, 1507, 1508, 1509, 1487,
     1511, 1511, 1518, 1511, 1512, 1512, 1519, 1512, 1502, 1520,
     1513, 1513, 1504, 1513, 1521, 1488, 1522, 1523, 1514, 1514,
     1511, 1514, 1525, 1526, 1512, 1527, 1515, 1515, 1490, 1515,
     1513, 1517, 1517, 1530, 1517, 1531, 1491, 1537, 1514, 1540,
     1528, 1528, 1492, 1528, 1532, 1532, 1515, 1532, 1541, 1533,
     1533, 1517, 1533, 1534, 1534, 1542, 1534, 1543, 1528, 1535,
     1535, 1544, 1535, 1536, 1536, 1545, 1536, 1533, 1538, 1538,

     1546, 1538, 1539, 1539, 1547, 1539, 1548, 1549, 1550, 1551,
     1551, 1552, 1551, 1553, 1554, 1554, 1555, 1554, 1556, 1557,
     1558, 1559, 1559, 1560, 1559, 1561, 1562, 1562, 1566, 1562,
     1563, 1563, 1569, 1563, 1564, 1564, 1570, 1564, 1568, 1568,
     1568, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
     1580, 1572, 1581, 1582, 1583, 1584, 1572, 1585, 1583, 1586,
     1585, 1587, 1587, 1588, 1589, 1584, 1590, 1581, 1591, 1587,
     1592, 1593, 1568, 1594, 1595, 1589, 1596, 1597, 1562, 1554,
     1600, 1602, 1603, 1605, 1606, 1563, 1607, 1610, 1591, 1608,
     1608, 1609, 1609, 1611, 1612, 1613, 1614, 1615, 1616, 1617,

     1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
     1628, 1629, 1630, 1631, 1632, 1632, 1631, 1632, 1633, 1633,
     1634, 1633, 1635, 1635, 1637, 1635, 1636, 1636, 1640, 1636,
     1638, 1638, 1643, 1638, 1632, 1646, 1639, 1639, 1633, 1639,
     1649, 1632, 1635, 1656, 1641, 1641, 1636, 1641, 1651, 1635,
     1638, 1651, 1642, 1642, 1657, 1642, 1639, 1638, 1644, 1644,
     1658, 1644, 1645, 1645, 1641, 1645, 1647, 1647, 1659, 1647,
     1651, 1641, 1642, 1652, 1648, 1648, 1652, 1648, 1644, 1660,
     1631, 1653, 1645, 1661, 1653, 1644, 1647, 1650, 1650, 1654,
     1650, 1662, 1654, 1647, 1648, 1655, 1663, 1665, 1655, 1664,

     1664, 1667, 1664, 1669, 1670, 1666, 1666, 1650, 1666, 1668,
     1668, 1671, 1668, 1674, 1673, 1673, 1654, 1673, 1676, 1664,
     1678, 1675, 1675, 1652, 1675, 1666, 1680, 1677, 1677, 1668,
     1677, 1682, 1679, 1679, 1673, 1679, 1681, 1681, 1684, 1681,
     1686, 1675, 1683, 1683, 1653, 1683, 1687, 1677, 1685, 1685,
     1688, 1685, 1679, 1689, 1690, 1691, 1681, 1692, 1695, 1655,
     1693, 1693, 1683, 1693, 1694, 1694, 1703, 1694, 1685, 1696,
     1696, 1704, 1696, 1697, 1697, 1707, 1697, 1698, 1698, 1708,
     1698, 1699, 1699, 1709, 1699, 1700, 1700, 1710, 1700, 1701,
     1701, 1711, 1701, 1702, 1702, 1712, 1702, 1705, 1705, 1713,

     1705, 1706, 1706, 1716, 1706, 1714, 1714, 1696, 1714, 1715,
     1715, 1717, 1715, 1718, 1719, 1719, 1720, 1719, 1721, 1723,
     1722, 1722, 1696, 1722, 1724, 1725, 1696, 1726, 1727, 1727,
     1729, 1727, 1731, 1732, 1733, 1699, 1734, 1735, 1736, 1737,
     1739, 1740, 1741, 1743, 1742, 1698, 1744, 1745, 1742, 1746,
     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1701, 1702, 1742,
     1754, 1755, 1714, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
     1763, 1764, 1765, 1766, 1767, 1768, 1770, 1722, 1771, 1772,
     1773, 1774, 1775, 1727, 1776, 1777, 1778, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1786, 1787, 1785, 1788, 1789, 1790,

     1791, 1792, 1793, 1794, 1794, 1795, 1794, 1796, 1797, 1798,
     1799, 1800, 1809, 1790, 1800, 1807, 1807, 1814, 1807, 1808,
     1808, 1794, 1808, 1810, 1810, 1811, 1810, 1812, 1811, 1813,
     1812, 1815, 1813, 1816, 1817, 1807, 1818, 1819, 1820, 1808,
     1821, 1825, 1807, 1810, 1824, 1824, 1827, 1824, 1826, 1826,
     1828, 1826, 1835, 1835, 1836, 1835, 1837, 1837, 1838, 1837,
     1839, 1840, 1841, 1842, 1824, 1846, 1843, 1843, 1826, 1843,
     1844, 1844, 1835, 1844, 1845, 1845, 1837, 1845, 1800, 1848,
     1811, 1849, 1812, 1850, 1843, 1847, 1847, 1851, 1847, 1853,
     1852, 1852, 1813, 1852, 1854, 1855, 1855, 1856, 1855, 1857,

     1857, 1861, 1857, 1858, 1858, 1862, 1858, 1859, 1859, 1863,
     1859, 1860, 1860, 1864, 1860, 1865, 1866, 1867, 1867, 1868,
     1867, 1869, 1873, 1870, 1870, 1859, 1870, 1871, 1871, 1874,
     1871, 1845, 1875, 1872, 1872, 1844, 1872, 1876, 1877, 1878,
     1879, 1880, 1882, 1883, 1884, 1885, 1887, 1887, 1888, 1890,
     1891, 1872, 1892, 1893, 1894, 1852, 1857, 1895, 1896, 1897,
     1898, 1899, 1900, 1857, 1901, 1902, 1903, 1904, 1905, 1906,
     1858, 1907, 1908, 1909, 1910, 1911, 1912, 1909, 1913, 1914,
     1915, 1867, 1908, 1916, 1917, 1909, 1909, 1918, 1919, 1921,
     1922, 1871, 1871, 1923, 1923, 1924, 1925, 1908, 1926, 1927,

     1928, 1929, 1930, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
     1939, 1940, 1941, 1944, 1945, 1945, 1947, 1945, 1948, 1949,
     1950, 1951, 1952, 1954, 1954, 1952, 1954, 1955, 1955, 1956,
     1955, 1957, 1945, 1958, 1957, 1959, 1958, 1960, 1959, 1961,
     1952, 1962, 1963, 1954, 1964, 1965, 1966, 1955, 1969, 1969,
     1954, 1969, 1970, 1971, 1972, 1974, 1974, 1975, 1974, 1976,
     1977, 1978, 1979, 1980, 1983, 1984, 1981, 1981, 1969, 1981,
     1982, 1982, 1985, 1982, 1987, 1974, 1986, 1986, 1988, 1986,
     1989, 1990, 1959, 1991, 1981, 1992, 1993, 1994, 1994, 1995,
     1994, 1996, 1997, 1998, 2003, 2004, 1958, 1957, 1999, 1999,

     2005, 1999, 2006, 2000, 2000, 1994, 2000, 2001, 2001, 2007,
     2001, 2002, 2002, 2008, 2002, 2010, 1999, 2009, 2009, 2012,
     2009, 2011, 2011, 2013, 2011, 2016, 2017, 2014, 2014, 2002,
     2014, 2015, 2015, 2018, 2015, 2009, 2019, 2020, 2021, 2021,
     2022, 2021, 2023, 1986, 2024, 2014, 2025, 2026, 2027, 2028,
     2029, 2030, 2031, 2032, 2033, 2035, 2038, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2055, 2056, 2001, 2057, 2058, 2011, 2059, 2060,
     2061, 2062, 2063, 2064, 2065, 2068, 2069, 2070, 2072, 2074,
     2075, 2076, 2078, 2079, 2056, 2080, 2081, 2082, 2078, 2083,

     2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
     2095, 2096, 2098, 2095, 2096, 2099, 2100, 2101, 2102, 2103,
     2104, 2106, 2107, 2109, 2110, 2111, 2113, 2113, 2115, 2113,
     2114, 2114, 2116, 2114, 2117, 2117, 2118, 2117, 2119, 2119,
     2120, 2119, 2121, 2122, 2123, 2124, 2125, 2127, 2128, 2129,
     2130, 2131, 2131, 2132, 2131, 2133, 2133, 2135, 2133, 2134,
     2134, 2095, 2134, 2136, 2137, 2138, 2139, 2140, 2141, 2141,
     2144, 2141, 2145, 2133, 2146, 2096, 2142, 2142, 2148, 2142,
     2143, 2143, 2149, 2143, 2147, 2147, 2141, 2147, 2150, 2151,
     2152, 2153, 2153, 2154, 2153, 2155, 2156, 2157, 2158, 2159,

     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
     2180, 2171, 2181, 2182, 2168, 2183, 2184, 2185, 2186, 2187,
     2188, 2189, 2189, 2190, 2189, 2191, 2192, 2193, 2194, 2195,
     2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205,
     2206, 2207, 2208, 2209, 2211, 2153, 2212, 2213, 2214, 2214,
     2215, 2214, 2216, 2217, 2219, 2220, 2221, 2219, 2220, 2222,
     2223, 2224, 2225, 2226, 2227, 2228, 2214, 2229, 2230, 2231,
     2232, 2233, 2233, 2234, 2233, 2235, 2236, 2236, 2237, 2236,
     2238, 2238, 2239, 2238, 2240, 2240, 2241, 2240, 2242, 2243,

     2243, 2244, 2243, 2245, 2245, 2246, 2245, 2247, 2248, 2249,
     2250, 2250, 2251, 2250, 2252, 2253, 2253, 2254, 2253, 2255,
     2256, 2257, 2257, 2259, 2257, 2258, 2258, 2220, 2258, 2260,
     2261, 2262, 2219, 2263, 2264, 2265, 2266, 2267, 2268, 2269,
     2270, 2271, 2272, 2274, 2275, 2277, 2233, 2278, 2279, 2280,
     2236, 2282, 2283, 2284, 2285, 2286, 2287, 2238, 2288, 2289,
     2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
     2300, 2301, 2302, 2303, 2304, 2305, 2306, 2258, 2307, 2308,
     2309, 2310, 2311, 2312, 2305, 2313, 2315, 2316, 2317, 2318,
     2319, 2320, 2321, 2322, 2323, 2324, 2325, 2328, 2329, 2330,

     2331, 2331, 2333, 2331, 2334, 2336, 2337, 2338, 2336, 2337,
     2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2331, 2347,
     2348, 2349, 2350, 2351, 2352, 2352, 2353, 2352, 2354, 2355,
     2356, 2357, 2357, 2359, 2357, 2358, 2358, 2361, 2358, 2363,
     2360, 2360, 2352, 2360, 2362, 2362, 2364, 2362, 2365, 2365,
     2366, 2365, 2367, 2368, 2368, 2370, 2368, 2369, 2369, 2371,
     2369, 2337, 2372, 2373, 2336, 2374, 2365, 2375, 2376, 2377,
     2378, 2379, 2379, 2380, 2379, 2381, 2382, 2382, 2383, 2382,
     2384, 2385, 2386, 2387, 2388, 2357, 2390, 2391, 2392, 2393,
     2394, 2395, 2396, 2397, 2360, 2398, 2399, 2362, 2401, 2402,

     2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412,
     2413, 2414, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2369,
     2423, 2424, 2425, 2401, 2426, 2427, 2428, 2429, 2430, 2431,
     2432, 2433, 2434, 2435, 2436, 2437, 2439, 2440, 2441, 2442,
     2443, 2444, 2445, 2443, 2444, 2446, 2447, 2448, 2449, 2450,
     2451, 2452, 2454, 2455, 2457, 2458, 2459, 2459, 2461, 2459,
     2460, 2460, 2462, 2460, 2463, 2464, 2465, 2466, 2466, 2467,
     2466, 2468, 2469, 2470, 2459, 2471, 2472, 2473, 2473, 2476,
     2473, 2474, 2474, 2478, 2474, 2466, 2480, 2475, 2475, 2481,
     2475, 2477, 2477, 2482, 2477, 2473, 2479, 2479, 2484, 2479,

     2483, 2483, 2485, 2483, 2443, 2475, 2486, 2486, 2487, 2486,
     2488, 2488, 2490, 2488, 2479, 2492, 2489, 2489, 2483, 2489,
     2491, 2491, 2493, 2491, 2486, 2494, 2495, 2496, 2497, 2498,
     2499, 2500, 2502, 2503, 2489, 2504, 2505, 2506, 2507, 2508,
     2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518,
     2519, 2520, 2521, 2522, 2523, 2477, 2524, 2525, 2526, 2527,
     2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2538,
     2539, 2540, 2541, 2542, 2488, 2491, 2544, 2545, 2546, 2547,
     2548, 2549, 2550, 2551, 2549, 2552, 2553, 2554, 2555, 2556,
     2557, 2558, 2559, 2560, 2561, 2562, 2562, 2563, 2562, 2564,

     2565, 2566, 2566, 2567, 2566, 2569, 2570, 2571, 2572, 2573,
     2574, 2575, 2575, 2579, 2575, 2576, 2576, 2580, 2576, 2577,
     2577, 2583, 2577, 2578, 2578, 2584, 2578, 2581, 2581, 2585,
     2581, 2582, 2582, 2576, 2582, 2586, 2586, 2588, 2586, 2587,
     2587, 2589, 2587, 2592, 2549, 2581, 2590, 2590, 2593, 2590,
     2596, 2594, 2594, 2586, 2594, 2597, 2598, 2599, 2600, 2601,
     2602, 2604, 2605, 2606, 2590, 2607, 2608, 2609, 2611, 2594,
     2612, 2613, 2614, 2615, 2617, 2618, 2619, 2620, 2621, 2622,
     2623, 2624, 2625, 2626, 2627, 2629, 2625, 2631, 2632, 2633,
     2634, 2635, 2636, 2638, 2641, 2642, 2643, 2644, 2645, 2646,

     2648, 2649, 2650, 2651, 2652, 2652, 2653, 2652, 2654, 2655,
     2656, 2657, 2658, 2658, 2659, 2658, 2660, 2660, 2662, 2660,
     2661, 2661, 2663, 2661, 2652, 2664, 2665, 2666, 2666, 2667,
     2666, 2668, 2668, 2669, 2668, 2670, 2660, 2671, 2672, 2673,
     2661, 2674, 2675, 2676, 2676, 2666, 2676, 2677, 2677, 2678,
     2677, 2679, 2680, 2680, 2682, 2680, 2681, 2681, 2683, 2681,
     2684, 2684, 2685, 2684, 2686, 2686, 2687, 2686, 2688, 2689,
     2689, 2690, 2689, 2691, 2681, 2692, 2694, 2695, 2697, 2699,
     2700, 2701, 2686, 2702, 2703, 2704, 2705, 2706, 2707, 2708,
     2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2668, 2717,

     2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,
     2729, 2677, 2730, 2731, 2732, 2733, 2733, 2735, 2733, 2734,
     2734, 2736, 2734, 2737, 2737, 2739, 2737, 2738, 2738, 2740,
     2738, 2741, 2742, 2733, 2743, 2744, 2745, 2745, 2746, 2745,
     2748, 2747, 2747, 2737, 2747, 2749, 2749, 2738, 2749, 2750,
     2737, 2751, 2752, 2753, 2754, 2755, 2755, 2758, 2755, 2756,
     2756, 2747, 2756, 2757, 2757, 2749, 2757, 2759, 2760, 2761,
     2762, 2763, 2764, 2755, 2765, 2766, 2767, 2768, 2769, 2769,
     2772, 2769, 2771, 2771, 2773, 2771, 2774, 2774, 2776, 2774,
     2777, 2745, 2775, 2775, 2779, 2775, 2769, 2780, 2778, 2778,

     2771, 2778, 2781, 2783, 2774, 2784, 2785, 2786, 2787, 2788,
     2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798,
     2799, 2800, 2801, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2813, 2814, 2815, 2816, 2818, 2818, 2814, 2818,
     2820, 2820, 2821, 2820, 2822, 2824, 2825, 2826, 2827, 2828,
     2829, 2830, 2833, 2834, 2818, 2835, 2836, 2837, 2837, 2839,
     2837, 2841, 2778, 2838, 2838, 2843, 2838, 2840, 2840, 2845,
     2840, 2842, 2842, 2846, 2842, 2844, 2844, 2847, 2844, 2848,
     2849, 2849, 2857, 2849, 2851, 2851, 2858, 2851, 2852, 2852,
     2861, 2852, 2862, 2853, 2853, 2820, 2853, 2863, 2849, 2864,

     2854, 2854, 2851, 2854, 2855, 2855, 2865, 2855, 2856, 2856,
     2866, 2856, 2859, 2859, 2867, 2859, 2868, 2869, 2854, 2838,
     2860, 2860, 2870, 2860, 2871, 2872, 2873, 2874, 2876, 2877,
     2878, 2874, 2879, 2874, 2880, 2881, 2882, 2883, 2884, 2885,
     2886, 2887, 2889, 2891, 2892, 2893, 2894, 2895, 2896, 2897,
     2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907,
     2908, 2909, 2910, 2911, 2911, 2912, 2911, 2913, 2913, 2916,
     2913, 2914, 2914, 2917, 2914, 2915, 2915, 2918, 2915, 2919,
     2927, 2911, 2931, 2920, 2920, 2913, 2920, 2921, 2921, 2914,
     2921, 2922, 2922, 2915, 2922, 2923, 2923, 2933, 2923, 2924,

     2924, 2920, 2924, 2925, 2925, 2934, 2925, 2926, 2926, 2935,
     2926, 2928, 2928, 2923, 2928, 2929, 2929, 2924, 2929, 2930,
     2930, 2936, 2930, 2937, 2938, 2939, 2940, 2941, 2942, 2943,
     2944, 2945, 2946, 2949, 2951, 2953, 2954, 2955, 2956, 2957,
     2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967,
     2968, 2969, 2969, 2970, 2969, 2971, 2972, 2974, 2975, 2926,
     2973, 2973, 2978, 2973, 2976, 2976, 2979, 2976, 2987, 2969,
     2977, 2977, 2929, 2977, 2988, 2930, 2981, 2981, 2973, 2981,
     2983, 2983, 2976, 2983, 2984, 2984, 2989, 2984, 2977, 2986,
     2986, 2993, 2986, 2994, 2981, 2996, 2990, 2990, 2983, 2990,

     2992, 2992, 2997, 2992, 2998, 2995, 2995, 2986, 2995, 2999,
     3000, 3001, 3002, 3005, 3006, 3008, 3009, 3010, 3011, 3012,
     3014, 3015, 3016, 3017, 3020, 3022, 3023, 3024, 3026, 3027,
     3028, 3029, 3030, 3008, 3031, 3031, 3027, 3031, 3029, 3033,
     3034, 3035, 3035, 3038, 3035, 3036, 3036, 3039, 3036, 3044,
     3040, 3040, 3031, 3040, 3041, 3041, 3045, 3041, 3042, 3042,
     2995, 3042, 3052, 3036, 3043, 3043, 3053, 3043, 3040, 3046,
     3046, 3054, 3046, 3056, 3047, 3047, 3042, 3047, 3048, 3048,
     3057, 3048, 3049, 3049, 3058, 3049, 3059, 3046, 3050, 3050,
     3060, 3050, 3051, 3051, 3061, 3051, 3055, 3055, 3062, 3055,

     3049, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3072,
     3074, 3075, 3077, 3078, 3055, 3079, 3080, 3080, 3081, 3080,
     3082, 3083, 3084, 3084, 3097, 3084, 3085, 3085, 3099, 3085,
     3086, 3086, 3102, 3086, 3087, 3087, 3103, 3087, 3089, 3089,
     3084, 3089, 3090, 3090, 3085, 3090, 3091, 3091, 3086, 3091,
     3092, 3092, 3104, 3092, 3093, 3093, 3089, 3093, 3094, 3094,
     3107, 3094, 3095, 3095, 3108, 3095, 3096, 3096, 3092, 3096,
     3098, 3098, 3093, 3098, 3100, 3100, 3105, 3100, 3109, 3105,
     3110, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3098, 3119,
     3087, 3120, 3100, 3123, 3123, 3124, 3123, 3125, 3126, 3127,

     3127, 3133, 3127, 3129, 3129, 3140, 3129, 3141, 3131, 3131,
     3144, 3131, 3134, 3134, 3145, 3134, 3146, 3127, 3147, 3136,
     3136, 3129, 3136, 3149, 3150, 3096, 3131, 3105, 3137, 3137,
     3134, 3137, 3105, 3151, 3105, 3138, 3138, 3136, 3138, 3139,
     3139, 3152, 3139, 3142, 3142, 3153, 3142, 3143, 3143, 3123,
     3143, 3148, 3154, 3138, 3148, 3155, 3156, 3157, 3158, 3159,
     3160, 3142, 3161, 3162, 3165, 3166, 3166, 3167, 3166, 3168,
     3168, 3169, 3168, 3170, 3170, 3172, 3170, 3171, 3171, 3175,
     3171, 3173, 3173, 3166, 3173, 3174, 3174, 3168, 3174, 3176,
     3176, 3177, 3176, 3178, 3179, 3180, 3181, 3182, 3183, 3173,

     3184, 3185, 3148, 3186, 3187, 3188, 3189, 3148, 3190, 3148,
     3191, 3192, 3193, 3194, 3194, 3196, 3194, 3197, 3197, 3199,
     3197, 3200, 3201, 3201, 3205, 3201, 3202, 3202, 3206, 3202,
     3207, 3194, 3209, 3203, 3203, 3197, 3203, 3210, 3204, 3204,
     3201, 3204, 3208, 3211, 3212, 3208, 3213, 3214, 3215, 3216,
     3219, 3220, 3221, 3222, 3223, 3224, 3225, 3225, 3227, 3225,
     3226, 3226, 3228, 3226, 3229, 3230, 3231, 3232, 3233, 3231,
     3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243,
     3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253,
     3254, 3255, 3256, 3257, 3260, 3204, 3261, 3208, 3262, 3263,

     3265, 3266, 3267, 3268, 3269, 3271, 3272, 3273, 3275, 3276,
     3273, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285,
     3287, 3231, 3291, 3294, 3296, 3273, 3226, 3286, 3286, 3288,
     3286, 3289, 3288, 3297, 3289, 3298, 3298, 3299, 3298, 3300,
     3301, 3302, 3302, 3303, 3302, 3304, 3305, 3306, 3304, 3289,
     3307, 3309, 3309, 3298, 3309, 3310, 3310, 3312, 3310, 3313,
     3314, 3315, 3316, 3317, 3319, 3324, 3317, 3323, 3323, 3309,
     3323, 3320, 3320, 3310, 3320, 3322, 3322, 3325, 3322, 3326,
     3327, 3317, 3329, 3327, 3333, 3288, 3334, 3330, 3330, 3320,
     3330, 3331, 3331, 3322, 3331, 3336, 3338, 3302, 3327, 3332,

     3332, 3304, 3332, 3335, 3339, 3330, 3335, 3337, 3337, 3340,
     3337, 3341, 3343, 3344, 3341, 3345, 3345, 3346, 3345, 3347,
     3348, 3335, 3349, 3349, 3350, 3349, 3351, 3352, 3353, 3341,
     3354, 3355, 3356, 3357, 3358, 3358, 3359, 3358, 3360, 3361,
     3362, 3362, 3364, 3362, 3365, 3366, 3367, 3368, 3368, 3369,
     3368, 3370, 3358, 3371, 3371, 3332, 3371, 3373, 3362, 3374,
     3375, 3376, 3463, 3377, 3377, 3368, 3377, 3379, 3379, 3465,
     3379, 3371,  916,  913,  912,  910,  909,  907, 3349,  906,
      905, 3377,  904,  902,  901, 3379, 3382, 3382, 3382, 3382,
     3382, 3382, 3382, 3382, 3383, 3383, 3383, 3383, 3383, 3383,

     3383, 3383, 3384, 3384, 3384, 3384, 3384, 3384, 3384, 3384,
     3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385, 3386, 3386,
     3386, 3386, 3386, 3386, 3386, 3386, 3387, 3387, 3387, 3387,
     3387, 3387, 3387, 3387, 3388, 3388, 3388, 3388, 3388, 3388,
     3388, 3388, 3389, 3389, 3389, 3389, 3389, 3389, 3389, 3389,
     3390, 3390, 3390, 3390, 3390, 3390, 3390, 3390, 3391, 3391,
     3391, 3391, 3391, 3391, 3391, 3391, 3392, 3392, 3392, 3392,
     3392, 3392, 3392, 3392, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3394, 3394, 3394, 3394, 3394, 3394, 3394, 3394,
     3395, 3395, 3395, 3395, 3395, 3395, 3395, 3395, 3396, 3396,

     3396, 3396, 3396, 3396, 3396, 3396, 3397, 3397, 3397, 3397,
     3397, 3397, 3397, 3397, 3398, 3398, 3398, 3398, 3398, 3398,
     3398, 3398, 3399, 3399, 3399, 3399, 3399, 3399, 3399, 3399,
     3400, 3400, 3400, 3400, 3400, 3400, 3400, 3400, 3401, 3401,
     3401, 3401, 3401, 3401, 3401, 3401, 3402, 3402, 3402, 3402,
     3402, 3402, 3402, 3402, 3403, 3403, 3403, 3403, 3403, 3403,
     3403, 3403, 3404, 3404, 3404, 3404, 3404, 3404, 3404, 3404,
     3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3406, 3406,
     3406, 3406, 3406, 3406, 3406, 3406, 3407, 3407, 3407, 3407,
     3407, 3407, 3407, 3407, 3408, 3408, 3408, 3408, 3408, 3408,

     3408, 3408, 3409, 3409, 3409, 3409, 3409, 3409, 3409, 3409,
     3410, 3410, 3410, 3410, 3410, 3410, 3410, 3410, 3411,  900,
     3411, 3412,  899, 3412, 3413,  897,  895, 3413,  894, 3413,
     3414,  893, 3414, 3415, 3415, 3415, 3415, 3415, 3415, 3415,
     3416, 3416, 3416, 3416, 3417,  892, 3417, 3418, 3418, 3418,
     3418, 3418, 3418, 3418, 3418, 3419, 3419,  890, 3419, 3419,
     3419, 3419, 3419, 3420, 3420, 3420, 3420, 3420, 3420, 3420,
     3420, 3421, 3421, 3421, 3421, 3421, 3421, 3421, 3421, 3422,
     3422, 3422, 3422, 3422, 3422, 3422, 3422, 3423, 3423,  889,
     3423, 3423, 3423, 3423, 3423, 3424, 3424, 3424, 3424, 3424,

     3424, 3424, 3424, 3425, 3425, 3425, 3425, 3425, 3425, 3425,
     3425, 3426, 3426, 3426, 3426, 3426, 3426, 3426, 3426, 3427,
     3427,  883, 3427, 3427, 3427, 3427, 3427, 3428, 3428, 3428,
     3428, 3428, 3428, 3428, 3428, 3429, 3429, 3429, 3429, 3429,
     3429, 3429, 3429, 3430, 3430, 3430, 3430, 3430, 3430, 3430,
     3430, 3431, 3431,  881, 3431, 3431, 3431, 3431, 3431, 3432,
     3432, 3432, 3432, 3432, 3432, 3432, 3432, 3433, 3433, 3433,
     3433, 3433, 3433, 3433, 3433, 3434, 3434, 3434, 3434, 3434,
     3434, 3434, 3434, 3435, 3435, 3435, 3435, 3435, 3435, 3435,
     3435, 3436, 3436, 3436, 3436, 3436, 3436, 3436, 3436, 3437,

     3437, 3437, 3437, 3437, 3437, 3437, 3437, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3439, 3439, 3439, 3439, 3439,
     3439, 3439, 3439, 3440, 3440, 3440, 3440, 3440, 3440, 3440,
     3440, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3442,
     3442, 3442, 3442, 3442, 3442, 3442, 3442, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3444, 3444,  880, 3444, 3444,
     3444, 3444, 3444, 3445, 3445, 3445, 3445, 3445, 3445, 3445,
     3445, 3446, 3446, 3446, 3446, 3446, 3446, 3446, 3446, 3447,
     3447, 3447, 3447, 3447, 3447, 3447, 3447, 3448, 3448, 3448,
     3448, 3448, 3448, 3448, 3448, 3449, 3449, 3449, 3449, 3449,

     3449, 3449, 3449, 3450, 3450,  879, 3450, 3450, 3450, 3450,
     3450, 3451,  877, 3451, 3452, 3452, 3452, 3452, 3452, 3452,
     3452, 3452, 3453, 3453, 3453, 3453, 3453, 3453, 3453, 3453,
     3454, 3454, 3454, 3454, 3454, 3454, 3454, 3454, 3455, 3455,
     3455, 3455, 3455, 3455, 3455, 3455, 3456, 3456, 3456, 3456,
     3456, 3456, 3456, 3456, 3457,  876, 3457, 3458, 3458, 3458,
     3458, 3458, 3458, 3458, 3458, 3459, 3459, 3459, 3459, 3459,
     3459, 3459, 3459, 3460, 3460, 3460, 3460,  875, 3460,  874,
     3460, 3461, 3461, 3461, 3461,  873, 3461,  872, 3461, 3462,
     3462, 3462, 3462,  871, 3462,  870, 3462, 3464, 3464, 3466,

     3466, 3467,  868,  867, 3467,  866, 3467,  865,  864,  863,
      862,  861,  859,  857,  856,  855,  853,  852,  851,  850,
      849,  848,  847,  846,  845,  843,  842,  841,  840,  839,
      838,  837,  836,  835,  834,  833,  832,  831,  830,  829,
      809,  808,  807,  806,  805,  804,  803,  802,  801,  796,
      795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  776,  775,
      774,  772,  769,  768,  767,  766,  765,  764,  763,  762,
      761,  760,  759,  758,  757,  756,  755,  753,  752,  751,
      750,  749,  748,  747,  745,  743,  742,  741,  735,  734,

      733,  732,  731,  730,  728,  726,  725,  722,  721,  720,
      718,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  695,  693,  690,  689,  688,  687,  686,  685,  679,
      678,  676,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  649,  648,  647,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,

      602,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      579,  578,  577,  576,  575,  574,  573,  571,  568,  567,
      566,  565,  564,  563,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  550,  549,  548,  547,  546,  545,
      544,  542,  541,  540,  539,  538,  537,  536,  534,  533,
      532,  531,  530,  529,  528,  527,  521,  520,  518,  517,
      516,  515,  514,  513,  512,  511,  508,  507,  505,  504,
      503,  502,  501,  500,  498,  497,  496,  495,  491,  490,
      489,  488,  487,  486,  484,  482,  481,  480,  479,  478,
      476,  474,  472,  471,  470,  469,  468,  467,  461,  459,

      458,  457,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  442,  441,  440,  439,  438,  437,  436,
      435,  433,  432,  431,  430,  427,  426,  425,  424,  423,
      422,  421,  420,  417,  416,  415,  413,  412,  411,  410,
      409,  408,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  388,  377,  376,  374,  373,  372,  371,  370,  369,
      368,  360,  359,  356,  353,  350,  349,  346,  344,  343,
      342,  341,  340,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  320,  318,  316,  315,  309,  308,
      303,  299,  297,  294,  290,  286,  282,  271,  267,  260,

      259,  257,  256,  254,  252,  249,  248,  247,  245,  244,
      237,  230,  229,  228,  227,  225,  224,  223,  221,  220,
      219,  218,  216,  215,  212,  211,  210,  209,  204,  199,
      198,  197,  196,  195,  194,  193,  190,  189,  188,  187,
      186,  182,  178,  174,  170,  166,  162,  150,  140,  139,
      138,  136,  135,  131,  127,  123,  119,  115,   99,   98,
       97,   90,   89,   88,   87,   86,   85,   84,   83,   82,
       69, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,

     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381,
     3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[417] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
    1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 
    1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 
    1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 
    0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "compiler/EaseaLex.l"
#line 2 "compiler/EaseaLex.l"
 /****************************************************************************
EaseaLex.l
Lexical analyser for the EASEA language (EAsy Specification for Evolutionary Algorithms)

Pierre COLLET (Pierre.Collet@polytechnique.fr)
Ecole Polytechnique
Centre de Math�matiques Appliqu�es
91128 Palaiseau cedex
  ****************************************************************************/
#ifdef WIN32
#define _CRT_SECURE_NO_WARNINGS
//#pragma comment(lib, "libAlexYacc.lib")
#endif
#include "Easea.h"
#include "EaseaParse.hpp"

#if defined WIN32 || defined WIN64
#include <direct.h>
#else
#include <unistd.h>
#endif

#ifndef SIZE_MAX
# define SIZE_MAX ((size_t) -1)
#endif

#ifndef SSIZE_MAX
# define SSIZE_MAX ((ssize_t) (SIZE_MAX / 2))
#endif

#include "debug.h"
#include <boost/regex.hpp>
//#include <iostream>
//#include <sstream>

#if defined __WIN64__ || defined __APPLE__ || defined __WIN32__
 /* Mac OS X don't have strndup even if _GNU_SOURCE is defined */
char *strndup (const char *s, size_t n){
    size_t len = strlen (s);
    char *ret;

    if (len <= n)
	return strdup (s);

    ret = (char *)malloc(n + 1);
    strncpy(ret, s, n);
    ret[n] = '\0';
    return ret;
}

ssize_t getline (char **lineptr, size_t *n, FILE *fp){
    ssize_t result;
    size_t cur_len = 0;

    if (lineptr == NULL || n == NULL || fp == NULL){
	errno = EINVAL;
	return -1;
    }

    if (*lineptr == NULL || *n == 0){
	*n = 120;
	*lineptr = (char *) malloc (*n);
	if (*lineptr == NULL){
	    result = -1;
	    goto end;
	}
    }

    for (;;){
	int i;

	i = getc (fp);
	if (i == EOF){
	    result = -1;
	    break;
	}

	/* Make enough space for len+1 (for final NUL) bytes.  */
	if (cur_len + 1 >= *n){
	    size_t needed_max =	SSIZE_MAX < SIZE_MAX ? (size_t) SSIZE_MAX + 1 : SIZE_MAX;
	    size_t needed = 2 * *n + 1;   /* Be generous. */
	    char *new_lineptr;

	    if (needed_max < needed)
		needed = needed_max;
	    if (cur_len + 1 >= needed){
		result = -1;
		goto end;
	    }

	    new_lineptr = (char *) realloc (*lineptr, needed);
	    if (new_lineptr == NULL){
		result = -1;
		goto end;
	    }

	    *lineptr = new_lineptr;
	    *n = needed;
	}

	(*lineptr)[cur_len] = i;
	cur_len++;

	if (i == '\n')
	    break;
    }
    (*lineptr)[cur_len] = '\0';
    result = cur_len ? (ssize_t) cur_len : result;

end:
    return result;
}
#endif

 /* getline implementation is copied from glibc. */


  size_t genomeSize;
  bool genomeSizeValidity=false;
  int lineCounter = 0;

  // local functions
char* selectorDetermination(int nMINIMISE, char* sSELECTOR){

  char selectorName[50];  
  selectorName[3] = 0;
  if( nMINIMISE )
    strcpy(selectorName,"Min");
  else
    strcpy(selectorName,"Max");
  

  if( mystricmp("Tournament",sSELECTOR)==0 )
    strcat(selectorName,"Tournament(globalRandomGenerator)");
  else if( mystricmp("dettour",sSELECTOR)==0 )
    strcat(selectorName,"Tournament(globalRandomGenerator)");
  else if( mystricmp("Deterministic",sSELECTOR)==0 )
    strcat(selectorName,"Deterministic()");
  else if( mystricmp("deterministic",sSELECTOR)==0 )
    strcat(selectorName,"Deterministic()");
  else if( mystricmp("Random",sSELECTOR)==0 )
    strcat(selectorName,"Random(globalRandomGenerator)");
  else if( mystricmp("Roulette",sSELECTOR)==0 )
    strcat(selectorName,"Roulette(globalRandomGenerator)");

  else{
    //DEBUG_PRT_PRT("%s is not yet implemented",sSELECTOR);
    return NULL;
  }
  
  char* ret = (char*)malloc((strlen(selectorName)+1)*sizeof(char));
  strcpy(ret,selectorName);

  return ret;
}


  // include file
  // forward references
  class CEASEAParser;
  class CSymbolTable;
  class OPCodeDesc;


void yyreset()
{
	yyleng = 0;
	yylineno = 1;
    YY_FLUSH_BUFFER;
	//yyunputindex = 0;
	//yymoreflg = 0;
	//yyrejectflg = 0;
	//yyeol = 1;
	//yyoldeol = 1;
	//yystart = 0;
}



  CSymbolTable *pSymbolTable;   // the symbol table
  bool bSymbolInserted,bWithinEvaluator, bWithinOptimiser;  // used to change evalutor type from double to float 
  bool bInitFunction,bDisplayFunction,bFunction, bNotFinishedYet, bWithinEO_Function;
  bool bDoubleQuotes,bWithinDisplayFunction,bWithinInitialiser,bWithinMutator,bWithinXover;
  bool bWaitingForSemiColon,bFinishNB_GEN,bFinishMINIMISE,bFinishMINIMIZE,bGenerationReplacementFunction;
  bool bCatchNextSemiColon,bWaitingToClosePopulation, bMethodsInGenome, bFinalizationFunction;
  bool bWithinCUDA_Initializer, bWithinMAKEFILEOPTION, bWithinCUDA_Evaluator, bBoundCheckingFunction;
  bool bIsParentReduce, bIsOffspringReduce, bEndGeneration, bBeginGeneration, bEndGenerationFunction, bBeginGenerationFunction, bGenerationFunctionBeforeReplacement;
  bool bGPOPCODE_ANALYSIS,bCOPY_GP_EVAL_GPU;
  
  CSymbol *pASymbol;

  unsigned iGP_OPCODE_FIELD, accolade_counter;
  OPCodeDesc* opDesc[128];
  unsigned iNoOp;

  
  unsigned iCOPY_GP_EVAL_STATUS;
  bool bIsCopyingGPEval;




  // extract yylval for use later on in actions
  //YYSTYPE& yylval = *(YYSTYPE*)yyparserptr->yylvalptr;
 



 

/* macros */
#line 3350 "compiler/EaseaLex.cpp"

#define INITIAL 0
#define GENOME_ANALYSIS 1
#define TEMPLATE_ANALYSIS 2
#define MACRO_IDENTIFIER 3
#define MACRO_DEFINITION 4
#define COPY_USER_DECLARATIONS 5
#define COPY_USER_CUDA 6
#define COPY_INITIALISATION_FUNCTION 7
#define ANALYSE_USER_CLASSES 8
#define COPY_EO_INITIALISER 9
#define COPY_GP_OPCODE 10
#define COPY 11
#define COPY_INITIALISER 12
#define COPY_CROSSOVER 13
#define COPY_MUTATOR 14
#define COPY_EVALUATOR 15
#define COPY_OPTIMISER 16
#define COPY_FINALIZATION_FUNCTION 17
#define COPY_DISPLAY 18
#define COPY_USER_FUNCTION 19
#define COPY_USER_GENERATION 20
#define PARAMETERS_ANALYSIS 21
#define GET_PARAMETERS 22
#define COPY_USER_FUNCTIONS 23
#define COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT 24
#define GET_METHODS 25
#define COPY_MAKEFILE_OPTION 26
#define COPY_BOUND_CHECKING_FUNCTION 27
#define COPY_BEG_GENERATION_FUNCTION 28
#define COPY_END_GENERATION_FUNCTION 29
#define COPY_INSTEAD_EVAL 30
#define GP_RULE_ANALYSIS 31
#define GP_COPY_OPCODE_CODE 32
#define COPY_GP_EVAL 33

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 221 "compiler/EaseaLex.l"



 /*Gobbles up ^Ms, to be compatible with unix*/
#line 3606 "compiler/EaseaLex.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3382 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5972 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 225 "compiler/EaseaLex.l"
{}
	YY_BREAK
/*switch immediately to TEMPLATE_ANALYSIS state*/
case 2:
YY_RULE_SETUP
#line 228 "compiler/EaseaLex.l"
{
  BEGIN TEMPLATE_ANALYSIS; yyless(yyleng-1);
 }
	YY_BREAK
/******************************************
 *  GA_GENERATION lexer (feeds on template file and occasionally on .ez file)
 ******************************************/
case 3:
YY_RULE_SETUP
#line 235 "compiler/EaseaLex.l"
{             
  char sFileName[1000];
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".cpp"); 
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 241 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"EASEA");}        
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 242 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sPROJECT_NAME);}        
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 243 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sEZ_PATH);}        
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 244 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sTPL_DIR);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 245 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sEO_DIR);}        
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 246 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sLOWER_CASE_PROJECT_NAME);}        
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 247 "compiler/EaseaLex.l"
{switch (OPERATING_SYSTEM) {
  case UNIX : fprintf(fpOutputFile,"UNIX_OS"); break;
  case WINDOWS : fprintf(fpOutputFile,"WINDOWS_OS"); break;
  case UNKNOWN_OS : fprintf(fpOutputFile,"UNKNOWN_OS"); break;
  }
 }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 253 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user declarations.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_USER_DECLARATIONS;
 }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 261 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user cuda.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_USER_CUDA;
 }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 269 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting initialisation function.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter = 1;
  BEGIN COPY_INITIALISATION_FUNCTION;
 }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 277 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting generation before reduce function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bGenerationFunctionBeforeReplacement = true;
  BEGIN COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT;
 }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 286 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("insert beg");
  if (bVERBOSE) printf ("Inserting at the begining of each generation function.\n");
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter+1, sRAW_PROJECT_NAME);

  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bBeginGeneration = true;
  bEndGeneration = false;
  lineCounter = 1;
  BEGIN COPY_BEG_GENERATION_FUNCTION;
 }
	YY_BREAK
/*
  Here we will insert parmeters for GP template.
 */
case 16:
YY_RULE_SETUP
#line 305 "compiler/EaseaLex.l"
{
  if( bVERBOSE )printf("inserting gp parameters\n");
  //  fprintf(fpOutputFile,"#define MAX_XOVER_DEPTH",%d
  fprintf(fpOutputFile,"#define TREE_DEPTH_MAX %d\n",iMAX_TREE_D);
  fprintf(fpOutputFile,"#define INIT_TREE_DEPTH_MAX %d\n",iMAX_INIT_TREE_D);
  fprintf(fpOutputFile,"#define INIT_TREE_DEPTH_MIN %d\n",iMIN_INIT_TREE_D);

  fprintf(fpOutputFile,"#define MAX_PROGS_SIZE %d\n",iPRG_BUF_SIZE);
  fprintf(fpOutputFile,"#define NB_GPU %d\n",iNB_GPU);
  /*fprintf(fpOutputFile,"#define NO_FITNESS_CASES %d\n",iNO_FITNESS_CASES);*/
}
	YY_BREAK
/*
  This part dump every declaration related to gp opcode.
  the enumeration, the array of name (to plot trees)
  and the arity of every opcode.
  */
case 17:
YY_RULE_SETUP
#line 322 "compiler/EaseaLex.l"
{
  
  fprintf(fpOutputFile,"enum OPCODE              {"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%s,",opDesc[i]->opcode->c_str());
  }
  fprintf(fpOutputFile,"OPCODE_SIZE, OP_RETURN};\n");


  fprintf(fpOutputFile,"const char* opCodeName[]={"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%s",opDesc[i]->realName->c_str());
    if( i<(iNoOp-1) )fprintf(fpOutputFile,",");
  }
  fprintf(fpOutputFile,"};\n"); 
  fprintf(fpOutputFile,"unsigned opArity[]=     {"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%d",opDesc[i]->arity);
    if( i<(iNoOp-1) )fprintf(fpOutputFile,",");
  }
  fprintf(fpOutputFile,"};\n"); 

  /*
  // count the number of variable (arity zero and non-erc operator)
  unsigned var_len = 0;
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    if( opDesc[i]->arity==0 && !opDesc[i]->isERC ) var_len++;
  }
  if( bVERBOSE ) printf("var length is %d\n",var_len);
  fprintf(fpOutputFile,"#define VAR_LEN %d\n",var_len); */
 }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 354 "compiler/EaseaLex.l"
{
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"    case %s :\n",opDesc[i]->opcode->c_str());
    fprintf(fpOutputFile,"      %s",opDesc[i]->gpuCodeStream.str().c_str());
    fprintf(fpOutputFile,"      break;\n");

  }
 }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 363 "compiler/EaseaLex.l"
{
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"  case %s :\n",opDesc[i]->opcode->c_str());
    fprintf(fpOutputFile,"    %s\n",opDesc[i]->cpuCodeStream.str().c_str());
    fprintf(fpOutputFile,"    break;\n");
  }
 }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 372 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  if (bVERBOSE) printf ("Analysing GP OP code from ez file\n");
  BEGIN COPY_GP_OPCODE;
 }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 381 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("found begin section\n");
  bGPOPCODE_ANALYSIS = true;
  BEGIN GP_RULE_ANALYSIS;
 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 387 "compiler/EaseaLex.l"
{ 
  if( bGPOPCODE_ANALYSIS ){
    rewind(fpGenomeFile);
    yyin = fpTemplateFile;
    yypop_buffer_state();
    bGPOPCODE_ANALYSIS = false;
    
    OPCodeDesc::sort(opDesc,iNoOp);
    /*for( unsigned i=0 ; i<iNoOp ; i++ ){
      opDesc[i]->show();
      }*/
    BEGIN TEMPLATE_ANALYSIS; 
  }  
 }
	YY_BREAK
case YY_STATE_EOF(COPY_GP_OPCODE):
#line 402 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No GP OP codes were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
 }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 409 "compiler/EaseaLex.l"
{/*if( bGPOPCODE_ANALYSIS ) printf("%c",yytext[0]);*/}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 410 "compiler/EaseaLex.l"
{if( bGPOPCODE_ANALYSIS )printf("\n");lineCounter++;}
	YY_BREAK
/*
  This section analyse a GP rule which is written as : 
  OP_NAME, "realopname", arity (a number), { the c code for this operator};
  OP_NAME, "realopname", arity (a number), { the c code for this operator};
 */
case 25:
YY_RULE_SETUP
#line 418 "compiler/EaseaLex.l"
{
    /* this rule match the OP_NAME */
    if( iGP_OPCODE_FIELD != 0 ) {
      fprintf(stderr,"Error, OP_CODE name must be given first\n");
      exit(-1);
    }
    opDesc[iNoOp] = new OPCodeDesc();
    opDesc[iNoOp]->opcode = new string(yytext);
  }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 428 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 430 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 1 ){
    fprintf(stderr,"Error, op code real name must be given at the second place\n");
    exit(-1);
  }
  opDesc[iNoOp]->realName = new string(yytext);
 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 439 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 2 ){
    fprintf(stderr,"Error, arity must be given at the third place\n");
    exit(-1);
  }
  char* endptr;
  
  opDesc[iNoOp]->arity = strtol(yytext,&endptr,10);
  if( endptr==yytext ){
    fprintf(stderr, "warning, unable to translate this arity %s assuming 0\n",yytext);
    opDesc[iNoOp]->arity = 0;
  }
 }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 453 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 454 "compiler/EaseaLex.l"
{
  iGP_OPCODE_FIELD = 0;
  iNoOp++;
 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 459 "compiler/EaseaLex.l"
{
  if( bGPOPCODE_ANALYSIS ) iGP_OPCODE_FIELD++;
 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 464 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 3 ){
    fprintf(stderr,"Error, code must be given at the forth place\n");
    exit(-1);
  }
  accolade_counter=1;

//  printf("arity : %d\n",opDesc[iNoOp]->arity);
  if( opDesc[iNoOp]->arity>=2 )
    opDesc[iNoOp]->gpuCodeStream << "OP2 = stack[--sp];\n      ";
  if( opDesc[iNoOp]->arity>=1 )
    opDesc[iNoOp]->gpuCodeStream << "OP1 = stack[--sp];\n      ";

  BEGIN GP_COPY_OPCODE_CODE;
 }
	YY_BREAK
/*
  This section copy the code contained in the code part of the GP opcode rule
  It count the number of curly bracket, when it reaches 0, the code part is finished.
 */
case 33:
YY_RULE_SETUP
#line 484 "compiler/EaseaLex.l"
{
  accolade_counter++;
  opDesc[iNoOp]->cpuCodeStream << "{";
  opDesc[iNoOp]->gpuCodeStream << "{";
 }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 490 "compiler/EaseaLex.l"
{
  accolade_counter--;
  if( accolade_counter==0 ){
    opDesc[iNoOp]->gpuCodeStream << "\n      stack[sp++] = RESULT;\n";

    BEGIN GP_RULE_ANALYSIS;
  }
  else{
    opDesc[iNoOp]->cpuCodeStream << "}";
    opDesc[iNoOp]->gpuCodeStream << "}";
  }
 }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 503 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_input = strtol(yytext+strlen("INPUT["),&endptr,10);
//  printf("input no : %d\n",no_input);
  opDesc[iNoOp]->cpuCodeStream << "input["<< no_input <<"]" ;
  opDesc[iNoOp]->gpuCodeStream << "input["<< no_input << "]";  
 }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 511 "compiler/EaseaLex.l"
{
  opDesc[iNoOp]->isERC = true;
  opDesc[iNoOp]->cpuCodeStream << "root->erc_value" ;
  opDesc[iNoOp]->gpuCodeStream << "k_progs[start_prog++];" ;
//  printf("ERC matched\n");
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 518 "compiler/EaseaLex.l"
{
  opDesc[iNoOp]->cpuCodeStream << "\n  ";
  opDesc[iNoOp]->gpuCodeStream << "\n    ";
 }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 524 "compiler/EaseaLex.l"
{
  // Convert OP1 to OPS[1] to keep the retrocompability between NNode and Node
  int length = strlen(yytext);
  std::ostringstream text;

  for(int i = 0; i < length; i++) {
    if(yytext[i] == 'O' && yytext[i+1] == 'P') {
        int n = 0;
        i += 2;

        while(isdigit(yytext[i])) {
            n *= 10;
            n += yytext[i];
            i++;
        }

        text << "OPS[" << n << "]";
        i--;
    }
    else
        text << yytext[i];
  }

  opDesc[iNoOp]->cpuCodeStream << text.str();
  opDesc[iNoOp]->gpuCodeStream << text.str();
 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 551 "compiler/EaseaLex.l"
{ 
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  if( bVERBOSE ) printf("Insert GP eval header\n");
  iCOPY_GP_EVAL_STATUS = EVAL_HDR;
  fprintf(fpOutputFile,"  ");
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 562 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_BDY;
  if( bVERBOSE ) printf("Insert GP eval body\n");
  fprintf(fpOutputFile,"      ");
  bCOPY_GP_EVAL_GPU = false;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 576 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_BDY;
  if( bVERBOSE ) printf("Insert GP eval body\n");
  fprintf(fpOutputFile,"      ");
  bCOPY_GP_EVAL_GPU = true;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 590 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_FTR;
  if( bVERBOSE ) printf("Insert GP eval footer\n");
  fprintf(fpOutputFile,"  ");
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 601 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_FTR;
  if( bVERBOSE ) printf("Insert GP eval footer\n");
  fprintf(fpOutputFile,"  ");
  bCOPY_GP_EVAL_GPU = true;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_GP_EVAL):
#line 614 "compiler/EaseaLex.l"
{
  switch(iCOPY_GP_EVAL_STATUS){
  case EVAL_HDR:
    fprintf(stderr,"Error, no evaluator header has been defined\n");
    exit(-1);
  case EVAL_BDY:
    fprintf(stderr,"Error, no evaluator body has been defined\n");
    exit(-1);
  case EVAL_FTR:
    fprintf(stderr,"Error, no evaluator footer has been defined\n");
    exit(-1);
  }
 }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 629 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_HDR){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 635 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_BDY){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 643 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_FTR){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 649 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval ){
    bIsCopyingGPEval = false;
    bCOPY_GP_EVAL_GPU = false;
    rewind(fpGenomeFile);
    yyin = fpTemplateFile;
    yypop_buffer_state();
    BEGIN TEMPLATE_ANALYSIS;
  }
 }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 660 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval ) fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 664 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval) 
    //if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[i]" );
    //else fprintf(fpOutputFile, "outputs[i]" );
  
 }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 672 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_output = strtol(yytext+strlen("OUTPUT["),&endptr,10);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[(i+%d)*NUMTHREAD+tid]", no_output);
    else fprintf(fpOutputFile, "outputs[i+%d]", no_output );
  
 }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 682 "compiler/EaseaLex.l"
{
	char *var;
	var = strndup(yytext+strlen("OUTPUT["), strlen(yytext) - strlen("OUTPUT[") - 1);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[(i+%s)*NUMTHREAD+tid]", var);
    else fprintf(fpOutputFile, "outputs[i+%s]", var);
  
 }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 692 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[i*NUMTHREAD+tid]" );
    else fprintf(fpOutputFile, "inputs[i][0]" );
  
 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 700 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_input = strtol(yytext+strlen("INPUT["),&endptr,10);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[(i+%d)*NUMTHREAD+tid]", no_input);
    else fprintf(fpOutputFile, "inputs[i+%d][0]", no_input );
  
 }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 710 "compiler/EaseaLex.l"
{
	char *var;
	var = strndup(yytext+strlen("INPUT["), strlen(yytext) - strlen("INPUT[") - 1);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[(i+%s)*NUMTHREAD+tid]", var);
    else fprintf(fpOutputFile, "inputs[i+%s][0]", var);
  
 }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 720 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    if( iCOPY_GP_EVAL_STATUS==EVAL_FTR )
      if( bCOPY_GP_EVAL_GPU ){
	fprintf(fpOutputFile,"k_results[index] =");
      }
      else fprintf(fpOutputFile,"return fitness=");
 }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 732 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    switch(iCOPY_GP_EVAL_STATUS){
    case EVAL_FTR:
    case EVAL_HDR:
      fprintf(fpOutputFile,"\n  ");
      break;
    case EVAL_BDY:
      fprintf(fpOutputFile,"\n      ");
      break;
    }
 }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 746 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    fprintf(fpOutputFile,"return fitness = "); 
 }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 753 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("insert beg");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  if (bVERBOSE) printf ("Evaluation population in a single function!!.\n");
  lineCounter = 1;
  BEGIN COPY_INSTEAD_EVAL;
 }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 762 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting at the end of each generation function.\n");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bEndGeneration = true;
  bBeginGeneration = false;
  BEGIN COPY_END_GENERATION_FUNCTION;
 }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 771 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting Bound Checking function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_BOUND_CHECKING_FUNCTION;
 }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 778 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Analysing user classes.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN ANALYSE_USER_CLASSES;
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 785 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting User classes.\n");
  fprintf (fpOutputFile,"// User classes\n");
  CListItem<CSymbol*> *pSym;
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem())
    if ((pSym->Object->pType->ObjectType==oUserClass)&&(!pSym->Object->pType->bAlreadyPrinted)){
      //DEBUG_PRT_PRT("%p",pSym->Object->pType);
      pSym->Object->pType->printClasses(fpOutputFile);
    }

  if( TARGET == CUDA ){
    //DEBUG_PRT_PRT("User classes are :");
    for( int i = nClasses_nb-1 ; i>=0 ; i-- ){
      //DEBUG_PRT_PRT(" %s, %p ,%d| ",pCLASSES[i]->sName,pCLASSES[i],pCLASSES[i]->bAlreadyPrinted);
      if( !pCLASSES[i]->bAlreadyPrinted ){
	fprintf(fpOutputFile,"// User class not refereced by the Genome");
	pCLASSES[i]->printClasses(fpOutputFile);
      }
    }
    //DEBUG_PRT_PRT("\n");
  }
 }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 808 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome constructor.\n");
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"    %s=NULL;\n",pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 820 "compiler/EaseaLex.l"
{
  size_t size_of_genome=0;
  if (bVERBOSE) printf ("Inserting default genome size.\n");
  if( !genomeSizeValidity ){
    if (bVERBOSE) printf ("\tComputing default genome size.\n");  
    CListItem<CSymbol*> *pSym;
    pGENOME->pSymbolList->reset();
    while (pSym=pGENOME->pSymbolList->walkToNextItem()){
      //DEBUG_PRT_PRT("%s has size : %lu",pSym->Object->sName,pSym->Object->nSize);
      size_of_genome+=pSym->Object->nSize;
    }
    //DEBUG_PRT_PRT("Total genome size is %lu",size_of_genome); 
    genomeSize = size_of_genome;
    genomeSizeValidity=true;
  }
  else{
    size_of_genome = genomeSize;
  }
  fprintf(fpOutputFile,"%d",size_of_genome);
 }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 841 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome constructor.\n");
  pGENOME->pSymbolList->reset();

  fprintf(fpOutputFile,"\tmemcpy(GENOME_ACCESS(id,buffer),this,Individual::sizeOfGenome);");

  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"    %s=NULL;\n",pSym->Object->sName);
    }
  }
  
 }
	YY_BREAK
/* <TEMPLATE_ANALYSIS>"\\GENOME_CUDA_MOTION" { */
/*   if (bVERBOSE) printf ("Inserting default genome cuda motion function.\n"); */
/*   CListItem<CSymbol*> *pSym; */
/*   if (bVERBOSE) printf ("Creating default copy constructor.\n"); */
/*   fprintf (fpOutputFile,"// Memberwise copy\n");              */
/*   pGENOME->pSymbolList->reset(); */
/*   while (pSym=pGENOME->pSymbolList->walkToNextItem()){ */
/*     if (pSym->Object->ObjectQualifier==1) continue; // 1=Static */
/*     if (pSym->Object->ObjectType==oObject) */
/*       fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName); */
/*     if (pSym->Object->ObjectType==oPointer) */
/*       fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName); */
/*     if (pSym->Object->ObjectType==oArray){ */
/* /\*       fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize); *\/ */
/* /\*       fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName); *\/ */
/*     } */
/*   } */
/*  } */
case 66:
YY_RULE_SETUP
#line 881 "compiler/EaseaLex.l"
{        
  if (pGENOME->sString) {
    if (bVERBOSE) printf ("Inserting Methods into Genome Class.\n");
    fprintf(fpOutputFile,"// User-defined methods:\n\n");
    fprintf(fpOutputFile,"%s\n",pGENOME->sString);
  }
  if (bVERBOSE) printf ("Inserting genome.\n");
  pGENOME->print(fpOutputFile);
 }                                            
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 890 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default assignment constructor.\n");
  fprintf (fpOutputFile,"// Memberwise assignment\n");             
  pGENOME->pSymbolList->reset();                                      
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"    %s=new %s(*(genome.%s));\n",pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 907 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default clone method.\n");
  fprintf (fpOutputFile,"// Memberwise Cloning\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oPointer)
	fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
  }
 }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 925 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default copy constructor.\n");
  fprintf (fpOutputFile,"// Memberwise copy\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oPointer)
	fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
      else if( pSym->Object->ObjectType==oArrayPointer ){ 
	// here we handle array of pointer (developped for Tree GP)
	fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
	fprintf(fpOutputFile,"      if(genome.%s[EASEA_Ndx]) %s[EASEA_Ndx] = new %s(*(genome.%s[EASEA_Ndx]));\n",pSym->Object->sName,
		pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
	fprintf(fpOutputFile,"      else %s[EASEA_Ndx] = NULL;\n",pSym->Object->sName);
	
      }
      
  }
 }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 952 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome serializer.\n");
  fprintf (fpOutputFile,"// Memberwise serialization\n");
  pGENOME->pSymbolList->reset();
  pGENOME->serializeIndividual(fpOutputFile, "this");
  //fprintf(fpOutputFile,"\tEASEA_Line << endl;\n");
 }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 961 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome deserializer.\n");
  fprintf (fpOutputFile,"// Memberwise deserialization\n");
  pGENOME->pSymbolList->reset();
  pGENOME->deserializeIndividual(fpOutputFile, "this");
 }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 969 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default copy constructor.\n");
  fprintf (fpOutputFile,"// Memberwise copy\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    dest->%s=src->%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       dest->%s[EASEA_Ndx]=src->%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
  }
 }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 985 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default destructor.\n");
  fprintf (fpOutputFile,"// Destructing pointers\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"  if (%s) delete %s;\n  %s=NULL;\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->sName);
    }
    else if( pSym->Object->ObjectType==oArrayPointer ){ 
      // here we handle array of pointer (developped for Tree GP)
      fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
      fprintf(fpOutputFile,"      if(%s[EASEA_Ndx]) delete %s[EASEA_Ndx];\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1002 "compiler/EaseaLex.l"
{       
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default diversity test.\n");
  fprintf (fpOutputFile,"// Default diversity test (required by GALib)\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()) {
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"  if (%s!=genome.%s) return 0;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"  if (*%s!=*(genome.%s)) return 0;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"  {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"     if (%s[EASEA_Ndx]!=genome.%s[EASEA_Ndx]) return 0;}\n",pSym->Object->sName,pSym->Object->sName);
    }
    else if( pSym->Object->ObjectType==oArrayPointer ){ 
      // here we handle array of pointer (developped for Tree GP)
      fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
      fprintf(fpOutputFile,"      if(%s[EASEA_Ndx] != genome.%s[EASEA_Ndx]) return 0;\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    }
    
  }
 }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1024 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default genome comparator.\n");
  fprintf (fpOutputFile,"// Default genome comparator (required by GALib)\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()) {
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"  if (sis.%s!=bro.%s) diff++;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"  if (*(sis.%s)!=*(bro.%s)) diff++;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"  {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"     if (sis.%s[EASEA_Ndx]!=bro.%s[EASEA_Ndx]) diff++;}\n",pSym->Object->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1040 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default read command.\n");
  fprintf (fpOutputFile,"// Default read command\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
  }
 }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1049 "compiler/EaseaLex.l"
{        
  if (bVERBOSE) printf ("Inserting genome display function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_DISPLAY;   
 }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1057 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("Inserting user LDFLAGS.\n");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_MAKEFILE_OPTION;
 }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1064 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (!bDisplayFunction){
    if (bVERBOSE) printf ("*** Creating default display function. ***\n");
    fprintf (fpOutputFile,"// Default display function\n");
    pGENOME->pSymbolList->reset();
    while (pSym=pGENOME->pSymbolList->walkToNextItem()){
      if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
	if (pSym->Object->ObjectType==oObject){
	  if (bDisplayFunction) printf("//");
	}
	if (pSym->Object->ObjectType==oArray){
	  if (bDisplayFunction) printf("//");
	  if (bDisplayFunction) printf("//");
	  fprintf(fpOutputFile,"   for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	  if (bDisplayFunction) printf("//");
	  if (bDisplayFunction) printf("//");
	  fprintf(fpOutputFile,"  os << \"\\n\";\n",pSym->Object->sName);
	}         
	if (pSym->Object->ObjectType==oPointer){
	  if (bDisplayFunction) printf("//");
	}
    }
  }                      
 }    
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1089 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user functions.\n");
  yyin = fpGenomeFile;                    
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=2;                                 // switch to .ez file and analyser
  BEGIN COPY_USER_FUNCTIONS;
 }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1096 "compiler/EaseaLex.l"
{        
  bWithinEO_Function=1;
  lineCounter=1;
  if( TARGET==CUDA || TARGET==STD) bWithinCUDA_Initializer = 1;
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_EO_INITIALISER;                               // not implemented as a function !
 }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1105 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter = 1;
  BEGIN COPY_INITIALISER;   
 }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1112 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting Finalization function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_FINALIZATION_FUNCTION;
 }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1120 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_CROSSOVER;   
 }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1126 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_MUTATOR;   
 }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1132 "compiler/EaseaLex.l"
{
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_EVALUATOR;   
 }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1138 "compiler/EaseaLex.l"
{      
  if( bVERBOSE ) fprintf(stdout,"Inserting optimization function\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_OPTIMISER;   
 }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1145 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bWithinCUDA_Evaluator = 1;
  lineCounter=1;
  BEGIN COPY_EVALUATOR;
 }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1152 "compiler/EaseaLex.l"
{ 
  if( bVERBOSE ) fprintf(stdout,"Inserting cuda optimization function\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bWithinCUDA_Evaluator = 1;
  lineCounter=1;
  BEGIN COPY_OPTIMISER;
 }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1161 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN PARAMETERS_ANALYSIS;   
 }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1166 "compiler/EaseaLex.l"
{
  if (bGenerationReplacementFunction) {
    if( bVERBOSE ) fprintf(stdout,"Inserting generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEAGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1175 "compiler/EaseaLex.l"
{
  if( bEndGenerationFunction ) {
    if( bVERBOSE ) fprintf(stdout,"Inserting end generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEAEndGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1184 "compiler/EaseaLex.l"
{
  if( bBeginGenerationFunction ) {
    if( bVERBOSE ) fprintf(stdout,"Inserting beginning generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEABeginningGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1194 "compiler/EaseaLex.l"
{
  if (bBoundCheckingFunction) {
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEABoundChecking(this);");
    }
  }
 }        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1202 "compiler/EaseaLex.l"
{
    fprintf(fpOutputFile,"%d",bIsParentReduce);
 }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1206 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"%d",bIsOffspringReduce);
 }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1210 "compiler/EaseaLex.l"
{
  if (bInitFunction) fprintf(fpOutputFile,"\n  EASEAInitFunction(argc, argv);\n");
 }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1214 "compiler/EaseaLex.l"
{
  if (bFinalizationFunction) fprintf(fpOutputFile,"\n  EASEAFinalization(pop);\n");
 }        
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1218 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("Inserting user classe definitions");
  pGENOME->printUserClasses(fpOutputFile);
 }        
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1223 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Selector is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sSELECTOR);
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1236 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sSELECTOR_OPERATOR);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1237 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fSELECT_PRM);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1238 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_PAR_OPERATOR);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1239 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_PAR_PRM);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1240 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_OFF_OPERATOR);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1241 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_OFF_PRM);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1242 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_FINAL_OPERATOR);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1243 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_FINAL_PRM);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1244 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nPOP_SIZE);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1245 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nOFF_SIZE);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1246 "compiler/EaseaLex.l"
{ fprintf(fpOutputFile,"%d",nELITE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1247 "compiler/EaseaLex.l"
{ fprintf(fpOutputFile,"%d",iNO_FITNESS_CASES); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1250 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Parent reduction is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_PAR);
 }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1263 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Offspring reduction is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_OFF);
 }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1276 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Replacement selector is \"%s\" | Goal is %s",sRED_FINAL,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sRED_FINAL);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : replacement operator %s doesn't exist in CUDA/TPL template\n",yylineno,sRED_FINAL);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_FINAL);
 }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1289 "compiler/EaseaLex.l"
{
if(OPERATING_SYSTEM=WINDOWS)
	fprintf(fpOutputFile,"%s\\",getenv("NVSDKCUDA_ROOT"));
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1293 "compiler/EaseaLex.l"
{if(fSURV_PAR_SIZE>=0.0)fprintf(fpOutputFile,"%f",fSURV_PAR_SIZE); else fprintf(fpOutputFile,"%f",(float)nPOP_SIZE);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1294 "compiler/EaseaLex.l"
{if(fSURV_OFF_SIZE>=0.0)fprintf(fpOutputFile,"%f",fSURV_OFF_SIZE); else fprintf(fpOutputFile,"%f",(float)nOFF_SIZE);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1295 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",nGENOME_NAME);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1296 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nPROBLEM_DIM);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1297 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nNB_GEN);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1298 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nTIME_LIMIT);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1299 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fMUT_PROB);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1300 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fXOVER_PROB);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1301 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",(nMINIMISE? "true" : "false")); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1302 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bELITISM);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1304 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nNB_OPT_IT);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1305 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bBALDWINISM);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1307 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bREMOTE_ISLAND_MODEL);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1308 "compiler/EaseaLex.l"
{if(strlen(sIP_FILE)>0)fprintf(fpOutputFile,"%s",sIP_FILE); else fprintf(fpOutputFile,"NULL");}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1309 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fMIGRATION_PROBABILITY);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1310 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nSERVER_PORT);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1312 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bPRINT_STATS);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1313 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bPLOT_STATS);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1314 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_CSV_FILE);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1315 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_GNUPLOT_SCRIPT);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1316 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_R_SCRIPT);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1318 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bSAVE_POPULATION);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1319 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bSTART_FROM_FILE);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1321 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,"Individual.hpp");
  fpOutputFile=fopen(sFileName,"w");    
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
 }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1329 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  if( TARGET==CUDA )
    strcat(sFileName,"Individual.cu");
  else if( TARGET==STD )
    strcat(sFileName,"Individual.cpp");
  fpOutputFile=fopen(sFileName,"w");    
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
 }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1340 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".prm");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1348 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".mak");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1357 "compiler/EaseaLex.l"
{
  char sFileName[1000];
 fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".vcproj");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1366 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  char sPathName[1000];
  char sFullFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".mak");

  // get the path without fillename
  int fileNameLength = -1;
  for( int i=strlen(sRAW_PROJECT_NAME) ; i>=0 ; i-- )
    if( sRAW_PROJECT_NAME[i] == '/' ){
      fileNameLength = i;
      break;
    }
  if( fileNameLength != -1 ){
    // add "Makefile" at the end of path
    //char* cdn = get_current_dir_name();
    char cdn[4096];
    #ifdef WIN32 
    _getcwd(cdn,4096);
    #else
    getcwd(cdn,4096);
    #endif
    size_t cdnLength = strlen(cdn);
    strcpy(sFullFileName,cdn);
    strcat(sFullFileName,"/\0");
    strcat(sFullFileName,sFileName);
    
    strncpy(sPathName,sRAW_PROJECT_NAME,fileNameLength);
    strcpy(sPathName+fileNameLength,"/Makefile");
    
    //DEBUG_PRT_PRT("PathName is %s",sPathName);
    //DEBUG_PRT_PRT("FullFileName is %s",sFullFileName);
    
  
    // create a symbolic link from Makefile to EASEA.mak
#ifndef WIN32
    symlink(sFullFileName,sPathName);
#endif
  }
  else{
    //DEBUG_PRT_PRT("file name : %s",sFileName);
#ifndef WIN32
    if( symlink(sFileName,"Makefile") ) perror("Symlink creation error ");
#endif
  }
  if (bVERBOSE){
    printf("Creating %s...\n",sFileName);
    printf("Creating %s symbolic link...\n",sPathName);
  }
  fpOutputFile=fopen(sFileName,"w");
  if( !fpOutputFile ) {
    fprintf(stderr,"Error in %s creation\n",sFileName);
    exit(-1);
  }
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1423 "compiler/EaseaLex.l"
{
  if (nWARNINGS) printf ("\nWARNING !!!\nTarget file(s) generation went through WITH %d WARNING(S) !\n",nWARNINGS);
  else printf ("\nCONGRATULATIONS !!!\nTarget file(s) generation succeeded without warnings.\n");
  printf ("You can now type \"make\" to compile your project.\n");
  if (TARGET==CUDA || TARGET==STD) fprintf(fpOutputFile,"\n# That's all folks ! \n");
  else fprintf(fpOutputFile,"\n// That's all folks ! \n");
  fflush(fpOutputFile);
  fclose(fpOutputFile);
  fclose(fpTemplateFile);
  fclose(fpGenomeFile);
  return TEMPLATE_END;
 }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1436 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
 *  use information found in .ez file
 *****************************************/
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1442 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// Genome Initialiser\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_EO_INITIALISER):
#line 1448 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No genome initialiser was found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1456 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1457 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1459 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User declarations\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_DECLARATIONS):
#line 1465 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user declarations were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1474 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1475 "compiler/EaseaLex.l"
{
  lineCounter++;
 } 
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1479 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User CUDA\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_CUDA):
#line 1485 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user CUDA were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1494 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1495 "compiler/EaseaLex.l"
{
  lineCounter++;
 }                
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1499 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User functions\n\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_FUNCTIONS):
#line 1505 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user functions were found. ***\n");
  fprintf(fpOutputFile,"\n// No user functions.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1514 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1515 "compiler/EaseaLex.l"
{
  lineCounter++;
 }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1519 "compiler/EaseaLex.l"
{
    fprintf (fpOutputFile,"// Initialisation function\nvoid EASEAInitFunction(int argc, char *argv[]){\n");
  bFunction=1; bInitFunction=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
      
  BEGIN COPY;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_INITIALISATION_FUNCTION):
#line 1527 "compiler/EaseaLex.l"
{bInitFunction=0; // No before everything else function was found in the .ez file
  if (bVERBOSE) printf("*** No before everything else function was found. ***\n");
  fprintf(fpOutputFile,"\n// No before everything else function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();

  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1537 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1538 "compiler/EaseaLex.l"
{lineCounter++;} 
	YY_BREAK
/****************************************
 *  Easea GPGPU & EO Finalization function
 *****************************************/
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1544 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// Finalization function\nvoid EASEAFinalization(CPopulation* population){\n");
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);

  bFunction=1; bFinalizationFunction=1;
  BEGIN COPY;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_FINALIZATION_FUNCTION):
#line 1553 "compiler/EaseaLex.l"
{bFinalizationFunction=0; // No after everything else function was found in the .ez file
  if (bVERBOSE) printf("*** No after everything else function was found. ***\n");
  fprintf(fpOutputFile,"\n// No after eveything else function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1562 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 1563 "compiler/EaseaLex.l"
{lineCounter++;}                                      
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 1566 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each end");
  if( (TARGET==CUDA || TARGET==STD)  ){
    fprintf (fpOutputFile,"{\n");
    //fprintf (fpOutputFile,"// Function called at each new generation\nvoid EASEAEndGenerationFunction(EvolutionaryAlgorithm* evolutionaryAlgorithm){\n");
    bFunction=1; 
    bEndGenerationFunction = 1;
    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case YY_STATE_EOF(COPY_END_GENERATION_FUNCTION):
#line 1577 "compiler/EaseaLex.l"
{
  bEndGenerationFunction=0; // No Generation function was found in the .ez file
  if( bVERBOSE) printf("*** No end generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No at end of generation function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1588 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1591 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each beg");
  if( (TARGET==CUDA || TARGET==STD)){
    fprintf (fpOutputFile,"{\n");
    bFunction=1;
    bBeginGeneration = 0;
    bBeginGenerationFunction = 1;
    if( bLINE_NUM_EZ_FILE )
      fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1604 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each beg");
  if( (TARGET==CUDA || TARGET==STD)){
    fprintf (fpOutputFile,"{\n");
    bFunction=1;
    if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);

    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1616 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1617 "compiler/EaseaLex.l"
{lineCounter++;}                                      
	YY_BREAK
case YY_STATE_EOF(COPY_INSTEAD_EVAL):
#line 1619 "compiler/EaseaLex.l"
{
  bBeginGenerationFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No Instead evaluation step function was found. ***\n");
  fprintf(fpOutputFile,"\n// No Instead evaluation step function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_BEG_GENERATION_FUNCTION):
#line 1632 "compiler/EaseaLex.l"
{
  bBeginGenerationFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No beginning generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No at beginning of generation function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 1644 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1645 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1648 "compiler/EaseaLex.l"
{
//DEBUG_PRT_PRT("at each");
  if((TARGET==CUDA || TARGET==STD) /* && !bBeginGeneration && !bEndGeneration ) */)
  {
      fprintf (fpOutputFile,"{\n");
      bFunction=1; 
      bGenerationReplacementFunction=1;
      BEGIN COPY_USER_GENERATION;
  }
}
	YY_BREAK
case YY_STATE_EOF(COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT):
#line 1659 "compiler/EaseaLex.l"
{
  bGenerationFunctionBeforeReplacement=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No generation function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 1670 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1671 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 1674 "compiler/EaseaLex.l"
{
  if(TARGET==CUDA || TARGET==STD){
    //fprintf (fpOutputFile,"void EASEABoundChecking(EvolutionaryAlgorithm* evolutionaryAlgorithm){\n");
    fprintf (fpOutputFile,"{\n");
  }
  bFunction=1; bBoundCheckingFunction=1;
  BEGIN COPY_USER_GENERATION;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_BOUND_CHECKING_FUNCTION):
#line 1683 "compiler/EaseaLex.l"
{bBoundCheckingFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No bound checking function was found. ***\n");
  fprintf(fpOutputFile,"\n// No Bound checking function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 1694 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 1698 "compiler/EaseaLex.l"
{
  BEGIN GENOME_ANALYSIS; return CLASSES;}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 1700 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
/****************************************
  *  Basic copy to cpp file with minor changes
  ****************************************/
case 181:
YY_RULE_SETUP
#line 1706 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1707 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 1709 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else if(TARGET == STD) fprintf(fpOutputFile,"(*EZ_current_generation)");
    } // local genome name
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1712 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 185:
/* rule 185 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1714 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 1716 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 1718 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"MUT_PROB");
  else
    if( TARGET==STD || TARGET==CUDA){
      fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
    else fprintf(fpOutputFile,"EZ_MUT_PROB");
  
 } // local genome name
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 1728 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");
 } // local genome name
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1735 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 1737 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE");
  else fprintf(fpOutputFile,"EZ_MINIMISE");} // local genome name
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1739 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE");
  else fprintf(fpOutputFile,"EZ_MINIMIZE");} // local genome name
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1741 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE");
  else fprintf(fpOutputFile,"EZ_MAXIMISE");} // local genome name
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 1743 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE");
  else fprintf(fpOutputFile,"EZ_MAXIMIZE");} // local genome name
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1746 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA ){
    fprintf(fpOutputFile,"%s",yytext);
  }
 }
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 1752 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n",sEZ_FILE_NAME,yylineno); exit(1);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 1753 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The number of generations can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1754 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 1755 "compiler/EaseaLex.l"
{
  fprintf(stderr,"\n%s - Error line %d: The mutation probability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); 
  exit (1);
}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 1760 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The crossover proability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1761 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The replacement percentage can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1762 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 1763 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1764 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 1765 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1766 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1767 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1768 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1770 "compiler/EaseaLex.l"
{ // local random name 
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1772 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1774 "compiler/EaseaLex.l"
{
  if (bWithinEO_Function && TARGET!=CUDA && TARGET!=STD) fprintf(fpOutputFile,"_genotype");
  else if(bWithinEO_Function && bWithinCUDA_Initializer )fprintf(fpOutputFile,"(*this)");
  else fprintf(fpOutputFile,"Genome");} // local genome name
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1778 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1779 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext); BEGIN MACRO_IDENTIFIER;} 
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1780 "compiler/EaseaLex.l"
{
  int i;
  for (i=0;(yytext[i]!=' ')&&(yytext[i]!=' ');i++);
  yytext[i]=0;
  fprintf(fpOutputFile,"template <class fitT> %s %sGenome<fitT>::",yytext,sPROJECT_NAME);}         
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1785 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"template <class fitT> %sGenome<fitT>::",sPROJECT_NAME);}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1786 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD) fprintf(fpOutputFile,"IndividualImpl");
  else fprintf(fpOutputFile,"%sGenome",sPROJECT_NAME);} // local name
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1789 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction){
	bWaitingToClosePopulation=true;
    fprintf(fpOutputFile,"((IndividualImpl*)pPopulation[");
  }
 }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1795 "compiler/EaseaLex.l"
{
  	if (!bWaitingToClosePopulation) fprintf(fpOutputFile,"]");
  	else {fprintf(fpOutputFile,"])"); ;bWaitingToClosePopulation=false;}}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1798 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction){
    fprintf(fpOutputFile,"pPopulation");
  }
  else fprintf(fpOutputFile,"/*pPopulation only in \"After everything else function\" this will cause an error*/ pPopulation");
 }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1804 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction)
	fprintf(fpOutputFile,"((IndividualImpl*)bBest)");
  else fprintf(fpOutputFile,"/*bBest only in \"After everything else function\" this will cause an error*/ bBest");
  }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1809 "compiler/EaseaLex.l"
{
  if (bFunction==1 && bWithinCUDA_Initializer==0) {
    fprintf (fpOutputFile,"}\n"); 
    bFunction=0;
    bWithinCUDA_Initializer=0;
  }
  bWithinEO_Function=0;
  rewind(fpGenomeFile); 
  yyin = fpTemplateFile; 
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;} // Back to the template file
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 1820 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/* Looking for an identifier */
case 222:
YY_RULE_SETUP
#line 1823 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"%s",yytext);
  pASymbol = new CSymbol(yytext); pASymbol->ObjectType=oMacro;
  BEGIN MACRO_DEFINITION; }
	YY_BREAK
/* If no identifier was found, we're not interested */
/* old rule : <MACRO_IDENTIFIER>\/.|\n
  * I don't understand why there is a "\/"...
  */
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1832 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);BEGIN COPY;}
	YY_BREAK
/* Looking for the first number following the macro definition */
/*gobbles up spaces and tabs*/
case 224:
YY_RULE_SETUP
#line 1837 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1838 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);
  pASymbol->dValue = myStrtod();
  pSymbolTable->insert(pASymbol);
  bSymbolInserted=1;
  BEGIN COPY;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1843 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);
  pASymbol->dValue = atoi(yytext);
  pSymbolTable->insert(pASymbol);
  bSymbolInserted=1;
  BEGIN COPY;}
	YY_BREAK
/*If no number was found, we're not interested*/
/* old rule : <MACRO_DEFINITION>\/.|\n 
   * I don't understand why there is a "\/"...
   */
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1852 "compiler/EaseaLex.l"
{
  if (!bSymbolInserted) delete pASymbol;
  else bSymbolInserted=0;
  putc(yytext[0],fpOutputFile);
  BEGIN COPY;}
	YY_BREAK
/****************************************
 *  GENOME_ANALYSIS lexer
 *****************************************/
/* takes care of C++-like comments*/
/*blah blah on a line containing sth else*/
case 228:
YY_RULE_SETUP
#line 1865 "compiler/EaseaLex.l"
;         
	YY_BREAK
/*blah blah on its own on a single line*/
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1867 "compiler/EaseaLex.l"
;
	YY_BREAK
/* blah blah on a line containing sth else */
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1869 "compiler/EaseaLex.l"
;  
	YY_BREAK
/* blah blah with nothing before the comment */
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 1871 "compiler/EaseaLex.l"
;
	YY_BREAK
/*gobbles up white spaces, tabs or carriage returns*/
case 232:
YY_RULE_SETUP
#line 1874 "compiler/EaseaLex.l"
{ /* do nothing */ }
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1875 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1876 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
/*keywords*/
case 235:
YY_RULE_SETUP
#line 1879 "compiler/EaseaLex.l"
{
  yylval.pSymbol = pSymbolTable->find("bool");
  return BOOL;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1882 "compiler/EaseaLex.l"
{
    yylval.pSymbol = new CSymbol(yytext);
    return IDENTIFIER;
    }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 1886 "compiler/EaseaLex.l"
{
  yylval.pSymbol = new CSymbol("GPNode");
  //yylval.pSymbol->ObjectType = oPointer;
  //printf("match gpnode\n");
  return GPNODE;
 }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 1893 "compiler/EaseaLex.l"
{return STATIC;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1894 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("int"); return INT;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1895 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("double"); return DOUBLE;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1896 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("float"); return FLOAT;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1897 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("char"); return CHAR;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1898 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("pointer"); return POINTER;}
	YY_BREAK
/*<GENOME_ANALYSIS>"pointer"                  {yylval.pSymbol = pSymbolTable->find("pointer"); return POINTER;}*/
/*Back to the template file*/
case 244:
YY_RULE_SETUP
#line 1901 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);yyin = fpTemplateFile;yypop_buffer_state();BEGIN TEMPLATE_ANALYSIS;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1903 "compiler/EaseaLex.l"
{return GENOME; }                         
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1905 "compiler/EaseaLex.l"
{BEGIN GET_METHODS;
  yylval.szString=yytext;  
  bMethodsInGenome=1;
  return METHODS;}
	YY_BREAK
/*number*/
case 247:
YY_RULE_SETUP
#line 1910 "compiler/EaseaLex.l"
{ yylval.dValue = myStrtod(); return NUMBER; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1911 "compiler/EaseaLex.l"
{yylval.dValue=atoi(yytext); return NUMBER;}
	YY_BREAK
/*identifier*/
case 249:
YY_RULE_SETUP
#line 1914 "compiler/EaseaLex.l"
{ yylval.pSymbol = new CSymbol(yytext);
  return IDENTIFIER; }
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 1916 "compiler/EaseaLex.l"
{BEGIN GENOME_ANALYSIS; return END_METHODS;}
	YY_BREAK
/*****************************************
 *  Looking for a user-supplied display function.
 *****************************************/
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 1922 "compiler/EaseaLex.l"
{ 
 /*   //DEBUG_PRT_PRT("Display function is at %d line in %s.ez",yylineno,sRAW_PROJECT_NAME); */
 /*   fprintf(fpOutputFile,"\n#line %d \"%s.ez\"\n",yylineno,sRAW_PROJECT_NAME); */
  bDisplayFunction=bWithinDisplayFunction=1;
  BEGIN COPY_USER_FUNCTION;
 }
	YY_BREAK
/*No display function was found in the .ez file*/
case YY_STATE_EOF(COPY_DISPLAY):
#line 1929 "compiler/EaseaLex.l"
{
  bDisplayFunction=0;
  if (bVERBOSE) printf("*** No display function was found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 1938 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1940 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("LDFLAGS is beg: %s",yytext); 
  bWithinMAKEFILEOPTION=1;
  return MAKEFILE_OPTION;
 }
	YY_BREAK
/****************************************
  * Looks for Makefile options (like 
  * LDFLAGS+= or CPPFLAGS...)
  ****************************************/
case 254:
YY_RULE_SETUP
#line 1952 "compiler/EaseaLex.l"
{
  if( bWithinMAKEFILEOPTION ){
    //DEBUG_PRT_PRT("end of makefile options");
    yyin = fpTemplateFile;
    yypop_buffer_state();
    bWithinMAKEFILEOPTION = 0;
    BEGIN TEMPLATE_ANALYSIS;
    return END_OF_FUNCTION;
  }
 }
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1963 "compiler/EaseaLex.l"
{
  if( bWithinMAKEFILEOPTION ){
    putc(yytext[0],fpOutputFile);
    }
 }
	YY_BREAK
/*
 This rule is matched by the previous one
 <COPY_MAKEFILE_OPTION>\n {
  //if( bWithinMAKEFILEOPTION );
 }
 */
case YY_STATE_EOF(COPY_MAKEFILE_OPTION):
#line 1976 "compiler/EaseaLex.l"
{ 
  //DEBUG_PRT_PRT("No makefile options defined.");

  yyin = fpTemplateFile;
  yypop_buffer_state();
  bWithinMAKEFILEOPTION = 0;
  BEGIN TEMPLATE_ANALYSIS;

  return MAKEFILE_OPTION;
 }
	YY_BREAK
/****************************************
  *  Looks for standard and user functions in the .ez file
  ****************************************/
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1990 "compiler/EaseaLex.l"
{
  bWithinInitialiser=1;
  BEGIN COPY_USER_FUNCTION;
  BEGIN TEMPLATE_ANALYSIS;
  return USER_CTOR;
 }
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 1996 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1997 "compiler/EaseaLex.l"
{
  bWithinXover=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY_USER_FUNCTION;
  return USER_XOVER;
 }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2004 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 2005 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 2006 "compiler/EaseaLex.l"
{
  bWithinMutator=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY_USER_FUNCTION;
  return USER_MUTATOR;
 }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2013 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 2014 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 2016 "compiler/EaseaLex.l"
{
  BEGIN COPY_USER_FUNCTION;            
  bWithinEvaluator=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  return USER_EVALUATOR;
 }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2023 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 2024 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 2027 "compiler/EaseaLex.l"
{
  BEGIN COPY_USER_FUNCTION;
  bWithinOptimiser=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  return USER_OPTIMISER;
 }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2034 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 2035 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
/****************************************
  *  Basic copy to .cpp file with major changes
  ****************************************/
/*blah blah on a line containing sth else*/
case 270:
YY_RULE_SETUP
#line 2042 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/*blah blah on its own on a single line*/
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 2044 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} 
	YY_BREAK
/* blah blah on a line containing sth else */
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 2046 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/* blah blah with nothing before the comment */
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 2048 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/*local genome name*/
case 274:
YY_RULE_SETUP
#line 2050 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome");}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2051 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2052 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2054 "compiler/EaseaLex.l"
{bWaitingToClosePopulation=true;
    fprintf(fpOutputFile,"((IndividualImpl*)pPopulation[");
 }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2057 "compiler/EaseaLex.l"
{
  if (!bWaitingToClosePopulation) fprintf(fpOutputFile,"]");
  else {
    fprintf(fpOutputFile,"])"); 
    bWaitingToClosePopulation=false;
  }
 }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2065 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else {
      fprintf(fpOutputFile,"(*EZ_current_generation)");}} // local genome name
	YY_BREAK
case 280:
/* rule 280 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 17);
(yy_c_buf_p) = yy_cp = yy_bp + 17;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2069 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else {
      fprintf(fpOutputFile,"(*EZ_current_generation)");}} // local genome name
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 2073 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
 /*local genome name*/
  else {fprintf(fpOutputFile,"(*EZ_NB_GEN)"); }} 
	YY_BREAK
case 282:
/* rule 282 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2076 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
 /*local genome name*/
  else {fprintf(fpOutputFile,"(*EZ_NB_GEN)"); }} 
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2079 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");}
	YY_BREAK
/*local genome name*/
case 284:
/* rule 284 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2081 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2082 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else {fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
 }
	YY_BREAK
/* local genome name*/
case 286:
/* rule 286 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2088 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else {fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
 }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2093 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"XOVER_PROB");
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");     
    }
 }
	YY_BREAK
/*local genome name*/
case 288:
/* rule 288 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2100 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"XOVER_PROB");
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");     
    }
 }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 2106 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC"); //local genome name
    }
	YY_BREAK
case 290:
/* rule 290 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2108 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC"); //local genome name
    }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2110 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE"); // local genome name
    } 
	YY_BREAK
case 292:
/* rule 292 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2112 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE"); // local genome name
    } 
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2114 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE"); // local genome name
    }
	YY_BREAK
case 294:
/* rule 294 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2116 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE"); // local genome name
    }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2118 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE"); // local genome name
    }
	YY_BREAK
case 296:
/* rule 296 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2120 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE"); // local genome name
    }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2122 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE"); // local genome name
    }
	YY_BREAK
case 298:
/* rule 298 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2124 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE"); // local genome name
    }
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 2127 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n    hint -> You must have meant \"NB_GEN=...\" rather than \"currentGeneration=...\"\n",sEZ_FILE_NAME,yylineno);
  exit(1);
 } 
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 2132 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*EZ_NB_GEN)=");
    }} // local genome name
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 2136 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    } // local genome name
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 2138 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*pEZ_MUT_PROB)=");
    }
 } // local genome name
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 2143 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)=");
    }
 } // local genome name
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 2148 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    } // local genome name
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 2150 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 2152 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 2154 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 2156 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 2158 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 2159 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 2160 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 2162 "compiler/EaseaLex.l"
{ // local random name
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 2164 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 2166 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 2167 "compiler/EaseaLex.l"
{
  if(bBeginGenerationFunction || bEndGenerationFunction || bGenerationFunctionBeforeReplacement){
    fprintf(fpOutputFile,"pPopulation)");
  }
  else fprintf(fpOutputFile,"pPopulation");
 }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 2173 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"((IndividualImpl*)bBest)");
 }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 2176 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  fprintf(fpOutputFile,"}");} // Back to the template file
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 2181 "compiler/EaseaLex.l"
{if (bWaitingForSemiColon){
    bWaitingForSemiColon=0;
    if (bFinishMINIMISE) {fprintf(fpOutputFile,");\n  if (MINIMISE) g.minimize() else g.maximize();\n"); bFinishMINIMISE=0;}
    if (bFinishMINIMIZE) {fprintf(fpOutputFile,");\n  if (MINIMIZE) g.minimize() else g.maximize();\n"); bFinishMINIMISE=0;}
    if ((bFinishNB_GEN)&&(OPERATING_SYSTEM==UNIX))
      {fprintf(fpOutputFile,"));\n  if ( (EZ_daFITNESS = (double *) realloc(EZ_daFITNESS, ((*EZ_NB_GEN) +1)* sizeof (double) )) == NULL){\n");
	fprintf(fpOutputFile,"    fprintf(stderr,\"Not enough memory... bailing out.\");\n    exit(1);");}
    else if (bFinishNB_GEN) {fprintf(fpOutputFile,"));"); bFinishNB_GEN=0;}
    else fprintf(fpOutputFile,"));");
  }
  else fprintf(fpOutputFile,";");}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 2192 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"(*evoluationaryAlgorithm).");}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 2193 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"(*evoluationaryAlgorithm).");}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 2194 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
  *  Basic copy to .cpp file with minor changes
  ****************************************/
/* takes care of C++-like comments */
case 322:
YY_RULE_SETUP
#line 2201 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}         // blah blah on a line containing sth else
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 2202 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} // blah blah on its own on a single line
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 2203 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);printf("%s\n",yytext);}  /* blah blah on a line containing sth else */
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 2204 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}  /* blah blah on a line containing sth else */
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 2205 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} /* blah blah with nothing before the comment */
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 2207 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"Genome.");
 }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 2211 "compiler/EaseaLex.l"
{
  if( bWithinCUDA_Evaluator && TARGET==CUDA && TARGET_FLAVOR==CUDA_FLAVOR_MO ){
    fprintf(fpOutputFile,"(f[0])");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 2219 "compiler/EaseaLex.l"
{
  if( bWithinCUDA_Evaluator &&  TARGET==CUDA && TARGET_FLAVOR==CUDA_FLAVOR_MO ){
    fprintf(fpOutputFile,"(f[1])");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 2228 "compiler/EaseaLex.l"
{
  if( ((bWithinEvaluator || bWithinOptimiser) && !bWithinCUDA_Evaluator) && ( TARGET==STD || TARGET==CUDA )){
    fprintf(fpOutputFile,"");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 2237 "compiler/EaseaLex.l"
{

  if(bWithinOptimiser || bWithinEvaluator || bWithinMutator || bWithinDisplayFunction){ 
    if( bWithinCUDA_Evaluator)
      fprintf(fpOutputFile, "(*INDIVIDUAL_ACCESS(devBuffer,id))");
    else fprintf(fpOutputFile, "(*this)");
  }

  else fprintf(fpOutputFile,"Genome");} // local genome name
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 2247 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 2248 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 2250 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else switch  (TARGET) {
    case STD : fprintf(fpOutputFile,"(*EZ_current_generation)"); break;
    }} // local genome name
	YY_BREAK
case 335:
/* rule 335 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 17);
(yy_c_buf_p) = yy_cp = yy_bp + 17;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2254 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else switch  (TARGET) {
    case STD : fprintf(fpOutputFile,"(*EZ_current_generation)"); break;
    }} // local genome name
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 2258 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 337:
/* rule 337 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2260 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 2262 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 339:
/* rule 339 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2264 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 2266 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else if( TARGET==CUDA || TARGET==STD)
    fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
  else fprintf(fpOutputFile,"EZ_MUT_PROB");
 } // local genome name
	YY_BREAK
case 341:
/* rule 341 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2272 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else if( TARGET==CUDA || TARGET==STD)
    fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
  else fprintf(fpOutputFile,"EZ_MUT_PROB");
 } // local genome name
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 2278 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");} // local genome name
	YY_BREAK
case 343:
/* rule 343 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2284 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");} // local genome name
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 2290 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 345:
/* rule 345 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2292 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 2295 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n",sEZ_FILE_NAME,yylineno); exit(1);}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 2296 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The number of generations can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 348:
/* rule 348 can match eol */
YY_RULE_SETUP
#line 2297 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 2298 "compiler/EaseaLex.l"
{
  fprintf(stderr,"\n%s - Error line %d: The mutation probability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); 
  exit (1);
}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 2303 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The crossover proability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 2304 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The replacement percentage can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 2305 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 2306 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 2307 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 2309 "compiler/EaseaLex.l"
{ // local random name
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 2311 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 2313 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"child1");
 }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 2315 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"child2");
 }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 2317 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"parent1");
 }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 2319 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"parent2");
 }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 2321 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 2322 "compiler/EaseaLex.l"
{if (bWithinEvaluator) {
    if( TARGET==CUDA || TARGET==STD) {
      if( bWithinCUDA_Evaluator ){
	fprintf(fpOutputFile,"return "); 
	//bWithinCUDA_Evaluator = 0;
      }
      else
	fprintf(fpOutputFile,"return fitness = "); 
      bCatchNextSemiColon=false;
    }
    //bWithinEvaluator=0;
  }
  else if ((bWithinMutator)) {
    fprintf(fpOutputFile,"return ");
    bCatchNextSemiColon=true;
  }
  else fprintf(fpOutputFile,"return"); }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 2339 "compiler/EaseaLex.l"
{if (!bCatchNextSemiColon) fprintf(fpOutputFile,";");
  else if (bWithinMutator){fprintf(fpOutputFile,">0?true:false;");/* bWithinMutator=false;*/}
  else fprintf(fpOutputFile,"));");
  bCatchNextSemiColon=false;
 }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 2344 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bWithinInitialiser=bWithinXover=bWithinMutator=bWithinEvaluator=bWithinOptimiser=bWithinCUDA_Evaluator=0;
  if (bWithinDisplayFunction){
    bWithinDisplayFunction=0; // display function
  }
  else return END_OF_FUNCTION;} // Back to the template file
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 2353 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
   Looks for run parameters in the .ez file
  ****************************************/
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 2359 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Analysing parameters...\n");
  BEGIN GET_PARAMETERS;
 }
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 2363 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
/* takes care of C++-like comments */
case 368:
YY_RULE_SETUP
#line 2366 "compiler/EaseaLex.l"
;         // blah blah on a line containing sth else
	YY_BREAK
case 369:
/* rule 369 can match eol */
YY_RULE_SETUP
#line 2367 "compiler/EaseaLex.l"
; // blah blah on its own on a single line
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 2368 "compiler/EaseaLex.l"
;  /* blah blah on a line containing sth else */
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 2369 "compiler/EaseaLex.l"
; /* blah blah with nothing before the comment */
	YY_BREAK
/* gobbles up white spaces, tabs or carriage returns */
case 372:
YY_RULE_SETUP
#line 2371 "compiler/EaseaLex.l"
{ /* do nothing */ }
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 2372 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 2373 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 2375 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tNb of Gen...\n");return NB_GEN;}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 2376 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tTime Limit...\n");return TIME_LIMIT;}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 2377 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tPop Size...\n");return POP_SIZE;}
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 2378 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tElite Size...\n");return ELITE;}
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 2379 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSelection Operator...\n");return SELECTOR;}
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 2380 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSel Genitors...\n");}
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 2381 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tMut Prob...\n");return MUT_PROB;}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 2382 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tXov Prob...\n");return XOVER_PROB;}
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 2383 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tOff Size...\n");return OFFSPRING;}
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 2385 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPrint Stats...\n");return PRINT_STATS;}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 2386 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPlot Stats with gnuplot...\n");return PLOT_STATS;}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 2387 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPrint Stats to csv File...\n");return GENERATE_CSV_FILE;}
	YY_BREAK
case 387:
/* rule 387 can match eol */
YY_RULE_SETUP
#line 2388 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tGenerate Gnuplot Script...\n");return GENERATE_GNUPLOT_SCRIPT;}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 2389 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tGenerate R Script...\n");return GENERATE_R_SCRIPT;}
	YY_BREAK
case 389:
/* rule 389 can match eol */
YY_RULE_SETUP
#line 2391 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tSave population...\n"); return SAVE_POPULATION;}
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 2392 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tStart from file...\n"); return START_FROM_FILE;}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 2394 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("\tReduce Parents Operator...\n");
  bIsParentReduce = true;
  return RED_PAR;
 }
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 2399 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSurv Par...\n");return SURVPAR;}
	YY_BREAK
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 2401 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("\tReduce Offspring Operator...\n");
  bIsOffspringReduce = true;
  return RED_OFF;
 }
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 2406 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSurv Off...\n");return SURVOFF;}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 2409 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tFinal Reduce Operator...\n");return RED_FINAL;/* DISCARD; */}
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 2412 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tElitism...\n");return ELITISM;}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 2413 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tMinMax...\n");return MINIMAXI;}
	YY_BREAK
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 2414 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tNb of Optimisation It...\n");return NB_OPT_IT;}
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 2415 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tBaldwinism...\n");return BALDWINISM;}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 2418 "compiler/EaseaLex.l"
{if(bVERBOSE) printf ("\tRemote Island Model...\n"); return REMOTE_ISLAND_MODEL;}
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 2419 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tIP File...\n"); return IP_FILE;}
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 2420 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tMigration Probability...\n"); return MIGRATION_PROBABILITY;}
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 2421 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tServer port...\n"); return SERVER_PORT;}
	YY_BREAK
/* number */
case 404:
YY_RULE_SETUP
#line 2425 "compiler/EaseaLex.l"
{ yylval.dValue = myStrtod(); return NUMBER2; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 2426 "compiler/EaseaLex.l"
{yylval.dValue=atof(yytext); return NUMBER2;}
	YY_BREAK
/* identifier */
case 406:
YY_RULE_SETUP
#line 2429 "compiler/EaseaLex.l"
{
  yylval.pSymbol = new CSymbol(yytext);
  return IDENTIFIER2;}
	YY_BREAK
/* end of .ez file : resume tpl analysis */
/* switch back to .tpl file and analyser */
case 407:
YY_RULE_SETUP
#line 2434 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
 }
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 2441 "compiler/EaseaLex.l"
{
  lineCounter++;
 }
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 2445 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMax init tree depth...\n");
  return MAX_INIT_TREE_D;
 }            
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 2450 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMin init tree depth...\n");
  return MIN_INIT_TREE_D;
 }            
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 2455 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMax tree depth...\n");
  return MAX_TREE_D;
 }            
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 2460 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tNo of GPUs...\n");
  return NB_GPU;
 }            
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 2465 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tProgramm length buffer...\n");
  return PRG_BUF_SIZE;
 }            
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 2470 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tNo of fitness cases...\n");
  return NO_FITNESS_CASES;
 }            
	YY_BREAK
/****************************************
 * all other characters
 *****************************************/
case 415:
YY_RULE_SETUP
#line 2480 "compiler/EaseaLex.l"
{return  (char)yytext[0];}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 2483 "compiler/EaseaLex.l"
ECHO;
	YY_BREAK
#line 7667 "compiler/EaseaLex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(GENOME_ANALYSIS):
			case YY_STATE_EOF(TEMPLATE_ANALYSIS):
			case YY_STATE_EOF(MACRO_IDENTIFIER):
			case YY_STATE_EOF(MACRO_DEFINITION):
			case YY_STATE_EOF(ANALYSE_USER_CLASSES):
			case YY_STATE_EOF(COPY):
			case YY_STATE_EOF(COPY_INITIALISER):
			case YY_STATE_EOF(COPY_CROSSOVER):
			case YY_STATE_EOF(COPY_MUTATOR):
			case YY_STATE_EOF(COPY_EVALUATOR):
			case YY_STATE_EOF(COPY_OPTIMISER):
			case YY_STATE_EOF(COPY_USER_FUNCTION):
			case YY_STATE_EOF(COPY_USER_GENERATION):
			case YY_STATE_EOF(PARAMETERS_ANALYSIS):
			case YY_STATE_EOF(GET_PARAMETERS):
			case YY_STATE_EOF(GET_METHODS):
			case YY_STATE_EOF(GP_RULE_ANALYSIS):
			case YY_STATE_EOF(GP_COPY_OPCODE_CODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3382 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3382 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3381);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2483 "compiler/EaseaLex.l"


		       /////////////////////////////////////////////////////////////////////////////

inline char  mytolower(char c) {
  return ((c>=65)&&(c<=90)) ? c+=32:c;
}

inline int mystricmp(const char *string1, const char *string2){
  int i;
  for (i=0; string1[i]&&string2[i];i++){
    if (mytolower(string1[i])<mytolower(string2[i])) return -(i+1);
    if (mytolower(string1[i])>mytolower(string2[i])) return i+1;
  }
  if (string2[i]) return  -(i+1);
  if (string1[i]) return  i+1;
  return 0;
}                                  

inline int isLetter(char c){ 
  if (((c>=65)&&(c<=90))||((c>=97)&&(c<=122))) return 1;
  if ((c==45)||(c==46)||(c==95)) return 1;
  return 0;
}

inline int isFigure(char c){ 
  if ((c>=48)&&(c<=57)) return 1;
  return 0;
}

/////////////////////////////////////////////////////////////////////////////
// EASEALexer commands

int CEASEALexer_create(CSymbolTable* pSymTable)
{ 
  int i;
  char sTemp[1000];
#if defined UNIX_OS
  OPERATING_SYSTEM=UNIX;
#elif defined WIN32 //WINDOWS_OS
  OPERATING_SYSTEM=WINDOWS;
//#else
//  OPERATING_SYSTEM=OTHER_SYSTEM;
#endif
  //assert(pParser != NULL);
  //assert(pSymTable != NULL);
  
  pSymbolTable = pSymTable;
  //if (!yycreate(pParser)) return 0;    

  if (bVERBOSE) {
	printf("\n                                                                   ");
  	printf("\n                                   E A S E A                   (v1.0.3)");
  	printf("\n                              ___________________     ");
 	printf("\n                                                                    ");
	printf("\n		Stochastic Optimisation and Nature Inspired Computing");
	printf("\nLaboratoire des Sciences de l'Image, de l'Informatique et de la Teledetection");
	printf("\n			Universite de Strasbourg - France");
	printf("\n		Ogier Maitre - Frederic Kruger - Pierre Collet");
 	printf("\n                                                                    ");
  	printf("\n                              ___________________     ");
 	printf("\n                                                                    ");
  }
  
  if (sRAW_PROJECT_NAME[0]==0){
    printf("\nInsert a .ez file name or a local project name: ");
    scanf("%s",sRAW_PROJECT_NAME);
  }                         
  if (bVERBOSE) printf("\n");
  
  if (TARGET==0) {
 /*     printf("\nPlease select a target library (GALib STD or CUDA): "); */
 /*     scanf("%s",sTemp); */
 /*     else if (!mystricmp(sTemp,"cuda")) TARGET=CUDA; */
 /*     else if (!mystricmp(sTemp,"std")) TARGET=STD; */
 /*     else return 0; */
    TARGET = STD;
  }

  /////////////////////////////////////////////////////////  
  //strcpy(sTemp,"e:\\lutton\\easea\\debug");pour tester sous windows
  if ((sEZ_PATH==NULL)||(sEZ_PATH[0]==0)) {
    if (getenv("EZ_PATH")==NULL){
      //strcpy(sEZ_PATH,"./tpl/");	
      strcpy(sEZ_PATH,"./");	
    }else
      strcpy(sEZ_PATH,getenv("EZ_PATH"));
  }

  strcpy(sTPL_DIR,sEZ_PATH);
  strcat(sTPL_DIR,"tpl/");
  
 
  switch (OPERATING_SYSTEM) {
  case UNIX : if (sEZ_PATH[strlen(sEZ_PATH)-1] != '/') strcat (sEZ_PATH,"./"); break;
  case WINDOWS : if (sEZ_PATH[strlen(sEZ_PATH)-1] != '\\') strcat (sEZ_PATH,"\\"); break;
  case UNKNOWN_OS : fprintf(fpOutputFile,"UNKNOWN_OS"); break;
  }
  //strcpy(sTemp,sEZ_PATH);
  strcpy(sTemp,sTPL_DIR);

  if (TARGET==CUDA){
    if(TARGET_FLAVOR == CUDA_FLAVOR_SO )
      strcat(sTemp,"CUDA.tpl");
    else if(TARGET_FLAVOR == CMAES )
      strcat(sTemp,"CMAES_CUDA.tpl");
    else if( TARGET_FLAVOR == FLAVOR_GP )
      strcat(sTemp,"CUDA_GP.tpl");
    else if(TARGET_FLAVOR == MEMETIC )
      strcat(sTemp,"CUDA_MEM.tpl");
    else 
      strcat(sTemp,"CUDA_MO.tpl");
    printf("tpl file : %s\n",sTemp);
    if (!(yyin = fpTemplateFile = fopen(sTemp, "r"))){
      fprintf(stderr,"\n*** Could not open %s.\n",sTemp);
      fprintf(stderr,"*** Please modify the EZ_PATH environment variable.\n");
      exit(1);
    } }

  if (TARGET==STD){
    if(TARGET_FLAVOR == STD_FLAVOR_SO)
      strcat(sTemp,"STD.tpl");
    else if (TARGET_FLAVOR == CMAES)
      strcat(sTemp,"CMAES.tpl");
    else if (TARGET_FLAVOR == FLAVOR_GP)
      strcat(sTemp,"GP.tpl");
    else if (TARGET_FLAVOR == MEMETIC )
      strcat(sTemp,"STD_MEM.tpl");
    //else if (TARGET_FLAVOR == STD_FLAVOR_GP )
   //   strcat(sTemp,"GP.tpl");
    else
      strcat(sTemp,"STD_MO.tpl");
    if (!(yyin = fpTemplateFile = fopen(sTemp, "r"))){
      fprintf(stderr,"\n*** Could not open %s.\n",sTemp);
      fprintf(stderr,"*** Please modify the EZ_PATH environment variable.\n");
      exit(1);
    }
  }
  
  if ((sRAW_PROJECT_NAME[0]=='"')&&(OPERATING_SYSTEM!=WINDOWS)){
    strcpy(sRAW_PROJECT_NAME,&(sRAW_PROJECT_NAME[1]));
    sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-1]=0;
  }
  if (strlen(sRAW_PROJECT_NAME)>3) 
    if (!mystricmp(".EZ",&(sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-3])))
      sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-3]=0;

  strcpy(sEZ_FILE_NAME, sRAW_PROJECT_NAME);
  strcat(sEZ_FILE_NAME,".ez");

  for (i=strlen(sRAW_PROJECT_NAME)-1;isFigure(sRAW_PROJECT_NAME[i]) || isLetter(sRAW_PROJECT_NAME[i]);i--);
  strcpy (sPROJECT_NAME,&(sRAW_PROJECT_NAME[i+1]));
  
  for(i=0;i<(int)strlen(sPROJECT_NAME);i++) sLOWER_CASE_PROJECT_NAME[i]=mytolower(sPROJECT_NAME[i]);
  
  if ((!isLetter(sPROJECT_NAME[0]))&&(sPROJECT_NAME[0]!='"')&&(sPROJECT_NAME[0]!='/')&&(sPROJECT_NAME[0]!='\\')) {
    fprintf(stderr,"\n*** Project names starting with non-letters are invalid.\n*** Please choose another name.\n"); return 0;}
                                                                           
  if (!(fpGenomeFile = fopen(sEZ_FILE_NAME, "r"))){
    fprintf(stderr,"\n*** Could not open %s\n",sEZ_FILE_NAME); return 0;}
 
  return 1;
}


/////////////////////////////////////////////////////////////////////////////
// calc_lexer attribute commands

double myStrtod(){
  errno = 0;    // clear error flag
  char* endp;
  double d = strtod(yytext, &endp);
  if ((d == +HUGE_VAL || d == -HUGE_VAL) && errno == ERANGE)
  {
    printf("number too large\n");
  }
  return d;
}                               

