/*_________________________________________________________

  This is a standard GP implementation on EASEA, 
  aimed for learn dynamics of complex systems.

  use : easea -gp cs.ez
	make
__________________________________________________________*/

\User declarations :

//number of birds
#define NB_BIRDS 10

//2 axes for the directions and the position
#define ATTRIBUTE_BIRDS_LEN 4

\end

\User functions:

/**
   This function generates data NO_FITNESS_CASES fitness cases,
   from the polynome POLY(X) with X randomly picked between (-1,1)

   @inputs address of the inputs array. (array will be allocated here)
   @outputs adddress of the outputs array. (array will be allocated here)

   @ret number of loaded fitness cases (should be equal to NO_FITNESS_CASES).   
 */
int generateData(float*** inputs, float** outputs){
  int i=0;

  (*inputs) = new float*[NB_BIRDS];
  (*outputs) = new float[NB_BIRDS];
  
  for( i=0 ; i<NB_BIRDS ; i++ ){
    (*inputs)[i]=new float[ATTRIBUTE_BIRDS_LEN];

    //Define randomly the position and the direction of the birds
    for (int j = 0; j < ATTRIBUTE_BIRDS_LEN; ++j) {
      float x = random(5.,10.);
      (*inputs)[i][j] = x;
    }

    float x = random(-10.,+10.);
    (*inputs)[i][0] = x;
    (*outputs)[i] = POLY(x);
  }

  return NO_FITNESS_CASES;
}


void free_data(){
  for( int i=0 ; i<NO_FITNESS_CASES ;i++ ) delete[] inputs[i] ;

  delete[] outputs;
  delete[] inputs;
} 
\end



\Before everything else function:
{
  generateData(&inputs,&outputs);
}
\end

\After everything else function:
{
  std::cout << toString(((IndividualImpl*)EA->population->Best)->root) << std::endl;

  free_data();
}
\end

\At the beginning of each generation function:
{}
\end

\At the end of each generation function:
{}
\end

\At each generation before reduce function:
{}
\end


\User classes :

GenomeClass {
  GPNode* root;
}
\end

\GenomeClass::display:

\end

\GenomeClass::initialiser :
{
  Genome.root = ramped_hh();
}
\end

\GenomeClass::crossover :
{
  simpleCrossOver(parent1,parent2,child);
  child.valid = false;
}
\end

\GenomeClass::mutator : // Must return the number of mutations
{
  simple_mutator(&Genome);

  return 1;
}
\end


\begin operator description :
OP_X, "x", 0, {RESULT=INPUT[0];};
OP_ERC, "ERC", 0, {RESULT=ERC;};
OP_ADD, "+", 2, {RESULT=OP1+OP2;};
OP_SUB, "-", 2, {RESULT=OP1-OP2;};
OP_MUL, "*", 2, {RESULT=OP1*OP2;};
OP_DIV, "/", 2, {
  if( !OP2 ) RESULT = 1;
  else RESULT = OP1/OP2;
};

\end


\GenomeClass::evaluator header:
\end

\GenomeClass::evaluator for each fc :
\end

\GenomeClass::evaluator accumulator :
float EVOLVED_VALUE = recEval(this->root,inputs[i]);
return sqrtf(ERROR);
\end


\User Makefile options:
\end

\Default run parameters :         // Please let the parameters appear in this order
  Number of generations : 50   	// NB_GEN
  Time limit: 0 			// In seconds, 0 to deactivate
  Population size : 5			//POP_SIZE
  Offspring size : 5 // 40%
  Mutation probability : 0.1       // MUT_PROB
  Crossover probability : 0.9      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 7
  Surviving parents: 100%//percentage or absolute  
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 7

  Elitism: Strong			//Weak or Strong
  Elite: 1
  Print stats: true				//Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false				//Default: 0

  //  Remote island model: true
  //IP	  file: ip.txt 			//File containing all the remote island's IP
  //Server port : 2929
  //Migration probability: 0.33

  Save population: false
  Start from file:false

  max init tree depth : 4
  min init tree depth : 2

  max tree depth : 8

  size of prog buffer : 200000000
\end
