/*_________________________________________________________

  This is a standard GP implementation on EASEA,
  aimed for regression.

  use : easea -gp regression.ez
	make

	OR (if you'd like to exploit a CUDA-compatible graphic card)

	easea -cuda_gp regression.ez
        make

  in order to generate and compile this code.
__________________________________________________________*/

\User declarations :

// these 3 defines are mandatory here. Adjust as you like.
#define NO_FITNESS_CASES 4
#define VAR_LEN 2
#define GROW_FULL_RATIO 0.5
#include <typeinfo>


// this is the number of learning cases computed in parallel.
// note that on 1024 is the maximum size on fermi architectures 512 on older cards.
#define NUMTHREAD 1024
#define MAX_STACK 15


#define PI (3.141592653589793)
float** inputs;
float* outputs;

\end

\User functions:
/**
   This function generates data NO_FITNESS_CASES fitness cases,
   from the polynome POLY(X) with X randomly picked between (-1,1)

   @inputs address of the inputs array. (array will be allocated here)
   @outputs adddress of the outputs array. (array will be allocated here)

   @ret number of loaded fitness cases (should be equal to NO_FITNESS_CASES).
 */

inline static double square(double x) { return pow(x, 2); }

inline static float XOR(float x, float y) { return x != y; }


int generateData(){
  inputs = new float*[NO_FITNESS_CASES];
  outputs = new float[NO_FITNESS_CASES];

  for( int i=0 ; i<2 ; i++ ){
    for( int j=0 ; j<2 ; j++ ){
    int index = i*2+j;
      inputs[index]=new float[VAR_LEN];
      inputs[index][0] = i;
      inputs[index][1] = j;
      outputs[index] = XOR(i,j);
    }
  }

  return NO_FITNESS_CASES;
}

int treeSize(GPNode* root) {
    int result = 1;

    for(int i = 0; i < 2; i++) {
        if(root->getChild(i))
        result += treeSize(root->getChild(i));
    }

    return result;
}

void free_data(){
  for( int i=0 ; i<NO_FITNESS_CASES ;i++ ) delete[] inputs[i] ;

  delete[] outputs;
  delete[] inputs;
}
\end



\Before everything else function:
{
  generateData();
}
\end

\After everything else function:
{
  std::cout << toString(((IndividualImpl*)EA->population->Best)->root) << std::endl;
  std::cout << treeSize(((IndividualImpl*)EA->population->Best)->root) << std::endl;
  free_data();
}
\end

\At the beginning of each generation function:
{
  //cout << "At the beginning of each generation function called" << endl;
}
\end

\At the end of each generation function:
{
  //cout << "At the end of each generation function called" << endl;
}
\end

\At each generation before reduce function:
 //cout << "At each generation before replacement function called" << endl;
\end


\User classes :

GenomeClass {
  GPNode* root;
}
\end

\GenomeClass::display:

\end

\GenomeClass::initialiser :
{
  Genome.root = ramped_hh();
}
\end

\GenomeClass::crossover :
{
  //simpleCrossOver(parent1,parent2,child);
  child.valid = false;
}
\end

\GenomeClass::mutator : // Must return the number of mutations
{
  simple_mutator(&Genome);

  return 1;
}
\end


\begin operator description :

OP_X, "x", 0, { RESULT=root->getValue(input); };
OP_Y, "y", 0, { RESULT=root->getValue(input); };
OP_ERC, "ERC", 0, {RESULT=root->getValue(input);};
OP_NOT, "NOT", 1, {RESULT=root->getValue(input);};
OP_OR, "OR", 2, {RESULT=root->getValue(input);};
OP_AND, "AND", 2, {RESULT=root->getValue(input);};

\end

\GenomeClass::evaluator : // Returns the score
{
  double value = 0.;
  for(int i = 0; i < NO_FITNESS_CASES; i++) {
    float evolvedValue = recEval(this->root,inputs[i]);
    value += square(outputs[i] - evolvedValue);
  }
  value *= 10;

  if(value == 0)
    value += treeSize(this->root) / 10.;

  return value; //MSE
}
\end


\Default run parameters :         // Please let the parameters appear in this order
  Number of generations : 50   	// NB_GEN
  Time limit: 0 			// In seconds, 0 to deactivate
  Population size : 5000			//POP_SIZE
  Offspring size : 5000 // 40%
  Mutation probability : 0.2       // MUT_PROB
  Crossover probability : 0.9      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 50
  Surviving parents: 100%//percentage or absolute
  Surviving offspring: 100%
  Reduce parents operator: Tournament 50
  Reduce offspring operator: Tournament 50
  Final reduce operator: Tournament 50

  Elitism: Strong			//Weak or Strong
  Elite: 1
  Print stats: true				//Default: 1
  Generate csv stats file:false
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false				//Default: 0

  //  Remote island model: true
  //IP	  file: ip.txt 			//File containing all the remote island's IP
  //Server port : 2929
  //Migration probability: 0.33

  Save population: false
  Start from file:false

  max init tree depth : 4
  min init tree depth : 2

  max tree depth : 8

  size of prog buffer : 200000000
\end
